angular.module('agil.controladores')
    .controller('ControladorRecursosHumanos', ['$scope', '$sce', '$localStorage', '$location', '$templateCache', '$route', 'blockUI', 'ListaDatosGenero', 'NuevoRecursoHumano', 'RecursosHumanosPaginador', 'Paginator', 'FieldViewer', 'EmpleadoEmpresa', 'obtenerEmpleadoRh', 'UsuarioRecursosHUmanosActivo', 'Prerequisito', 'ListaDatosPrerequisito', 'Prerequisitos', 'ListaPrerequisitosPaciente', 'ActualizarPrerequisito', 'UsuarioRecursosHumanosFicha', 'ClasesTipo', 'Clases', 'Paises', 'CrearEmpleadoFicha', 'EliminarOtroSeguroRh', 'EliminarFamiliarRh', 'GuardarPrerequisitoPaciente', 'PrerequisitosHistorial', 'UsuarioRhHistorialFicha', 'ObtenerEmpleadoHojaVida', 'GuardarEmpleadoHojaVida', 'CrearPrestamo', 'ObtenerListaPrestamo', 'CrearRolTurno', 'CrearPagoPrestamo', 'VerificarUsuarioEmpresa', 'EditarPrestamo', 'ListaEmpleadosRrhh', 'CrearHorasExtra', 'HistorialHorasExtra', 'ListaRolTurnos', 'ValidarCodigoCuentaEmpleado', '$timeout', 'DatosCapacidadesImpresion', 'NuevoAnticipoEmpleado', 'ListaAnticiposEmpleado', 'CrearNuevosAnticiposEmpleados', 'ActualizarAnticipoEmpleado', 'NuevaAusenciaEmpleado', 'HistorialEmpleadoAusencias', 'HistorialEmpresaEmpleadosAusencias', 'NuevaVacacionEmpleado', 'HistorialEmpleadoVacaciones', 'HistorialEmpresaVacaciones', 'NuevoFeriado', 'ListaFeriados', 'GuardarClasesAusencias', 'Tipos', 'ListaBancos', 'ConfiguracionesVacacion', 'HistorialGestionesVacacion', 'GuardarTr3', 'ListaTr3Empresa', 'GuardarHistorialVacacion', 'CrearBeneficioSocial', 'ListaBeneficiosEmpleado', 'GuardarBitacoraFicha', 'VerBitacoraFicha', 'ObtenerFiniquitoEmpleado', 'ClasesTipoEmpresa', 'GuardarConfiguracionRopaCargo', 'ListaConfiguracionRopaCargo', 'DatosReporteConfiguracionRopa', 'FichasEmpleadoEmpresa', 'ListaCargosEmpleado', 'ListaRopaTrabajoProductos', 'GuardarDotacionRopa', 'ListaDotacionRopa', 'EliminarDotacionRopa', 'ListaDotacionRopaEmpresa', 'ActualizarDotacionRopa', 'FamiliaresEmpleadoEmpresa', 'ListaRolTurnosEmpresa', 'ClasesEmpresa', 'ListaChoferesViaje', 'GuardarViajeRrhh', 'ListaViajeRrhh', 'ListaRolTurnosCalendario', 'ViajeRrhhLista', 'BeneficioEmpresa', 'GuardarConductoresEmpresa', 'ListaHijosEmpleadosEmpresa', 'GuardarImportacionFichaEmpleados', 'GuardarImportacionRolTurnoEmpleados', 'PrerequisitosSave', 'GuardarEmpleadoEmpresaI', 'ListaPrerequisitosEmpleado', 'GuardarImportacionPreRequisitos', 'ListaHijosEmpleado', 'GuardarCargaHorarioRRHH', 'ListarCargaHorarioRRHH', 'RegistrarContratoHijo', 'ObtenerContratosfamiliar', 'ActualizarDocumentoFamiliar', 'EliminarPrestamoPersonal', 'RegistrarHoraExtraOrdinaria', 'ObtenerHorasExtraOrdinarias', 'ActualizarHoraExtraOrdinaria', 'HistorialEmpleadoAusencia', 'rrhhReportesExcel', 'ObtenerDatosFiniquito', 'ObtenerImagen', 'GuardarConfiguracionSubsidio', 'ListaConfiguracionSubsidios', 'GuardarExcelImportacionVacaciones', 'VerificarCIEmpleado', 'ListaFichasAltasBajasEmpleados', 'GuardarRolesTurnosExtra', 'ObtenerRolesTurnosExtra', 'GuardarParamsEmpleadosCampamento', 'ObtenerParamsEmpleadosCampamento', 'ObtenerParametroEmpleadosCampamento', 'CrearSubsidioEmpleado', 'ListaSubsidioEmpleado', 'ListaSubsidioPlanificacion', 'ListaSubsidioEmpleadoSeguimiento', 'CrearSubsidioEmpleadoSeguimiento', 'HistorialEmpresaEmpleadosAusenciasMed', 'ActualizarDocPreRequisito', 'ObtenerHistorialEmpresaVacacionGestiones', 'ActivoInactivoPrerequisto', 'AsignarDocumentoPrerequisito', 'RecursosHumanosEmpleadosHorasExtras', 'Parametros', 'RRHHPlanillaSueldo', 'CrearMatrizAnticipo', 'ObtenerMatrizAnticipo', 'GuardarImportacionconfiguracionRopa', 'GuardarConceptosHojasDeVida', 'GuardarHojasDeVidaImportacion', 'ListaFichasInactivasEmpleado', 'SweetAlert', 'ObtenerConfiguracionIso', '$filter', 'CrearOtrosBonos', 'RRHHlistaPlanillaSueldos', 'ListaFichasAltasBajasEmpleadoIndividual', 'EliminarVacacionEmpleado', 'CrearLlamadaAtencion', 'HistorialLlamadaAtencion', 'ObtenerTodoPersonal', 'CerrarLlamadaAtencion', 'ObtenerSueldoMesEmpleado', 'ObtenerDotacionRopaEmpleado', 'ListaDotacionRopaEmpresaComprobante', 'VerificarFechaPlanillaSueldo', 'ActulizarOtrosBonos', 'GetPrerequisitosPaciente', 'CargosEmpresa', 'UltimoRegistroTr3Empresa', 'GetBeneficiosSociales','ListaBonosEmpresaPaciente', 'ObtenerDatosEdicionDotacionRopa', 'ObtenerBajasMedicas', 'RecursosHumanosEmpleados', 'RecursosHumanosViajesRolTurnosEmpleados', 'ObtenerConfiguracionIsoEmpresa', 'ObtenerViaje', function ($scope, $sce, $localStorage, $location, $templateCache, $route, blockUI, ListaDatosGenero, NuevoRecursoHumano, RecursosHumanosPaginador, Paginator, FieldViewer, EmpleadoEmpresa, obtenerEmpleadoRh, UsuarioRecursosHUmanosActivo, Prerequisito, ListaDatosPrerequisito, Prerequisitos, ListaPrerequisitosPaciente, ActualizarPrerequisito, UsuarioRecursosHumanosFicha, ClasesTipo, Clases, Paises, CrearEmpleadoFicha, EliminarOtroSeguroRh, EliminarFamiliarRh, GuardarPrerequisitoPaciente, PrerequisitosHistorial, UsuarioRhHistorialFicha, ObtenerEmpleadoHojaVida, GuardarEmpleadoHojaVida, CrearPrestamo, ObtenerListaPrestamo, CrearRolTurno, CrearPagoPrestamo, VerificarUsuarioEmpresa, EditarPrestamo, ListaEmpleadosRrhh, CrearHorasExtra, HistorialHorasExtra, ListaRolTurnos, ValidarCodigoCuentaEmpleado, $timeout, DatosCapacidadesImpresion, NuevoAnticipoEmpleado, ListaAnticiposEmpleado, CrearNuevosAnticiposEmpleados, ActualizarAnticipoEmpleado, NuevaAusenciaEmpleado, HistorialEmpleadoAusencias, HistorialEmpresaEmpleadosAusencias, NuevaVacacionEmpleado, HistorialEmpleadoVacaciones, HistorialEmpresaVacaciones, NuevoFeriado, ListaFeriados, GuardarClasesAusencias, Tipos, ListaBancos, ConfiguracionesVacacion, HistorialGestionesVacacion, GuardarTr3, ListaTr3Empresa, GuardarHistorialVacacion, CrearBeneficioSocial, ListaBeneficiosEmpleado, GuardarBitacoraFicha, VerBitacoraFicha, ObtenerFiniquitoEmpleado, ClasesTipoEmpresa, GuardarConfiguracionRopaCargo, ListaConfiguracionRopaCargo, DatosReporteConfiguracionRopa, FichasEmpleadoEmpresa, ListaCargosEmpleado, ListaRopaTrabajoProductos, GuardarDotacionRopa, ListaDotacionRopa, EliminarDotacionRopa, ListaDotacionRopaEmpresa, ActualizarDotacionRopa, FamiliaresEmpleadoEmpresa, ListaRolTurnosEmpresa, ClasesEmpresa, ListaChoferesViaje, GuardarViajeRrhh, ListaViajeRrhh, ListaRolTurnosCalendario, ViajeRrhhLista, BeneficioEmpresa, GuardarConductoresEmpresa, ListaHijosEmpleadosEmpresa, GuardarImportacionFichaEmpleados, GuardarImportacionRolTurnoEmpleados, PrerequisitosSave, GuardarEmpleadoEmpresaI, ListaPrerequisitosEmpleado, GuardarImportacionPreRequisitos, ListaHijosEmpleado, GuardarCargaHorarioRRHH, ListarCargaHorarioRRHH, RegistrarContratoHijo, ObtenerContratosfamiliar, ActualizarDocumentoFamiliar, EliminarPrestamoPersonal, RegistrarHoraExtraOrdinaria, ObtenerHorasExtraOrdinarias, ActualizarHoraExtraOrdinaria, HistorialEmpleadoAusencia, rrhhReportesExcel, ObtenerDatosFiniquito, ObtenerImagen, GuardarConfiguracionSubsidio, ListaConfiguracionSubsidios, GuardarExcelImportacionVacaciones, VerificarCIEmpleado, ListaFichasAltasBajasEmpleados, GuardarRolesTurnosExtra, ObtenerRolesTurnosExtra, GuardarParamsEmpleadosCampamento, ObtenerParamsEmpleadosCampamento, ObtenerParametroEmpleadosCampamento, CrearSubsidioEmpleado, ListaSubsidioEmpleado, ListaSubsidioPlanificacion, ListaSubsidioEmpleadoSeguimiento, CrearSubsidioEmpleadoSeguimiento, HistorialEmpresaEmpleadosAusenciasMed, ActualizarDocPreRequisito, ObtenerHistorialEmpresaVacacionGestiones, ActivoInactivoPrerequisto, AsignarDocumentoPrerequisito, RecursosHumanosEmpleadosHorasExtras, Parametros, RRHHPlanillaSueldo, CrearMatrizAnticipo, ObtenerMatrizAnticipo, GuardarImportacionconfiguracionRopa, GuardarConceptosHojasDeVida, GuardarHojasDeVidaImportacion, ListaFichasInactivasEmpleado, SweetAlert, ObtenerConfiguracionIso, $filter, CrearOtrosBonos, RRHHlistaPlanillaSueldos, ListaFichasAltasBajasEmpleadoIndividual, EliminarVacacionEmpleado, CrearLlamadaAtencion, HistorialLlamadaAtencion, ObtenerTodoPersonal, CerrarLlamadaAtencion, ObtenerSueldoMesEmpleado, ObtenerDotacionRopaEmpleado, ListaDotacionRopaEmpresaComprobante, VerificarFechaPlanillaSueldo, ActulizarOtrosBonos, GetPrerequisitosPaciente, CargosEmpresa, UltimoRegistroTr3Empresa,GetBeneficiosSociales, ListaBonosEmpresaPaciente, ObtenerDatosEdicionDotacionRopa, ObtenerBajasMedicas, RecursosHumanosEmpleados, RecursosHumanosViajesRolTurnosEmpleados, ObtenerConfiguracionIsoEmpresa, ObtenerViaje) {
            $scope.usuario = JSON.parse($localStorage.usuario);
            $scope.idModalPrerequisitosInactivos = 'dialog-pre-requisitos-inactivos';
            $scope.idModalEmpleado = 'dialog-empleado';
            $scope.idModalwizardContainerEmpleado = 'modal-wizard-empleado-container';
            $scope.idModalDepartamentoEstado = "dialog-departamento-estado";
            $scope.idModalProvincia = "dialog-provincia";
            $scope.idModalLocalidad = "dialog-localidad";
            $scope.idImputContrato = "id-contrato";
            $scope.idModalHojaVida = 'modal-hoja-vida';
            $scope.idModalwizardContainerHojaVida = 'modal-wizard-hoja-vida-container';
            $scope.idModalNuevoFamiliar = "dialog-nuevo-familiar";
            $scope.idModalHistorialContrato = "dialog-historial-contrato";
            $scope.idModalBeneficiosSociales = "modal-beneficios-sociales";
            $scope.idModalDetalleVacaciones = "dialog-detalle-vacaciones";
            $scope.idmodalFechasAnticipoExcel = 'dialog-seleccion-fechas-anticipos-excel';
            $scope.idModalBitacoraFicha = "dialog-bitacora-ficha";
            $scope.idModalAnticipoExtraordinario = "dialog-anticipo-extraordinario";
            $scope.idModalNuevoAnticipoExtraordinario = "dialog-nuevo-anticipo-extraordinario";
            $scope.idModalNuevoPrestamo = "dialog-nuevo-prestamo";
            $scope.idModalAusenciasVacaciones = "dialog-ausencias-vacaciones";
            $scope.idTabAusenciasVacaciones = "tab-ausencias-vacaciones";
            $scope.idModalTipoBaja = "dialog-tipo-baja";
            $scope.idModalFeriados = "dialog-feriados";
            $scope.idModalHitorialVacaciones = "dialog-historial-vacaciones";
            $scope.idModalCompensacion = "dialog-compesacion";
            $scope.idModalHistorialAusencias = "dialog-historial-ausencias";
            $scope.idModalHistorialAusenciaMedica = "dialog-historial-ausencia-medica";
            $scope.idModalTipoAusencia = "dialog-tipo-ausencia";
            $scope.idModalRolTurnos = "dialog-rol-turnos";
            $scope.idModalHistorialTurnos = "dialog-historial-turnos";
            $scope.idModalHistorialFichas = "dialog-historial-fichas";
            $scope.idModalHorasExtras = "dialog-horas-extras";
            $scope.idModalHistorialHorasExtras = "dialog-historial-horas-extras";
            $scope.idModalAnticipoRegular = "dialog-anticipo-regular";
            $scope.idModalPrestamosPersonal = "dialog-prestamos-personal";
            $scope.idModalAdvertencia = "dialog-advertencia";
            $scope.idModalPretamosNuevoTodos = "dialog-nuevo-prestamo-todos";
            $scope.idModalReporteHijos = "dialog-reporte-hijos";
            $scope.idModalReporteVeneficios = "dialog-reporte-beneficios-sociales";
            $scope.idModalPagoPrestamo = "dialog-pago-prestamo";
            $scope.idModalReporteVacaciones = "dialog-reporte-vacaciones";
            $scope.idModalReporteBajasMedicas = "dialog-reporte-bajas-medicas";
            $scope.idModalReporteAltasBajas = "dialog-reporte-altas-bajas";
            $scope.idModalReporteRolTurnos = "dialog-reporte-rol-turnos";
            $scope.idModalReporteTurnosDetallado = "dialog-reporte-turnos-detallado";
            $scope.idModalViajes = "dialog-viajes";
            $scope.idModalVisita = "dialog-visita";
            $scope.idModalVisitaSalida = "dialog-visita-salida"
            $scope.idModalVehiculosViaje = "dialog-vehiculos-viaje";
            $scope.idModalConductoresViaje = 'dialog-conductores-viaje'
            $scope.idModalHistorialViajes = "dialog-historial-viajes";
            $scope.idModalReporteAusencias = "dialog-reporte-ausencias";
            $scope.idModalCertificado = "dialog-certificado";
            // $scope.idModalCaracteristicaDiscapacidadEdicion = "dialog-caracteristica-discapacidad"
            $scope.idModalRhNuevo = "dialog-rh-nuevo";
            $scope.idModalWizardRhNuevo = "modal-wizard-rh-container";
            $scope.idImagenUsuario = 'imagen-persona';
            $scope.idEliminarUsuarioRh = 'dialog-eliminar-usuarioRh';
            $scope.idEliminarSeguroEmpleado = 'dialog-eliminar-seguro';
            $scope.idEliminarFamiliarEmpleado = 'dialog-eliminar-familiar';
            $scope.idModalWizardRhVista = 'dialog-rh-vista';
            $scope.idModalContenedorRhVista = 'modal-wizard-container-rh-vista';
            $scope.idModalHistorialPrerequisito = 'dialog-historico-preRequisito';
            $scope.idModalHistorialPrerequisitoInactivos = 'dialog-historico-preRequisito-inactivos';
            $scope.idModalEditarPrerequisito = 'dialog-editar-preRequisito';
            $scope.idModalDialogConfirmacionEntregaAdelantado = 'dialog-entrega-adelantada-prerequisito'
            $scope.idInputDocPrerequisito = "id-doc-prerequisito";
            $scope.idInputEdicionDocPrerequisito = "id-edicion-doc-prerequisito";
            $scope.IdModalVerificarCuenta = 'modal-verificar-cuenta';
            $scope.IdModalVerificarCuentaRrhh = 'modal-verificar-cuenta-Rrhh';
            $scope.idModalImpresionHojaVida = 'dialog-impresion-hoja-vida';
            $scope.idModalNuevoAnticipoRegularTodos = 'dialog-nuevo-anticipo-regular-todos';
            $scope.idModalTr3BancoMsc = 'modal-tr3-banco-msc'
            $scope.idModalTr3BancoUnion = 'modal-tr3-banco-union'
            $scope.idModalHistorialTr3 = 'modal-historial-tr3'
            $scope.idModalConfirmarDesabilitacion = 'modal-confirmar-desabilitacion'
            $scope.idModalReingresoEmpleado = 'modal-reingreso-empleado'
            $scope.idModalHistorialBeneficios = "dialog-historial-beneficio_social"
            $scope.idModalConfiguracionRopaDeTrabajo = "dialog-configuracion-ropa-trabajo"
            $scope.idModalReporteRopaDeTrabajo = "dialog-reporte-ropa-trabajo"
            $scope.idmodalWizardContainerConfiguracionRopaTrabajo = "modal-wizard-container-configuracion-ropa-trabajo"
            $scope.idModalRopaTrabajo = "dialog-ropa-trabajo"
            $scope.idModalNuevaRopaTrabajo = "dialog-nueva-ropa-trabajo"
            $scope.idModalItemsNuevaRopaTrabajo = "dialog-items-nueva-ropa-trabajo"
            $scope.idModalEliminarRopaTrabajo = "dialog-eliminar-ropa-trabajo"
            $scope.idModalConceptoEdicion = 'dialog-conceptos';
            $scope.idModalDesabilitarPasajero = 'dialog-motivo-desabilitar-viajero'
            $scope.idModalCerrarRolDeTurno = 'modal-cerrar-rol-de-turno'
            $scope.idModalHistorialGestionesVacaciones = 'dialog-historial-gestiones-vacaciones'
            $scope.idModalTipoImportacionRol = 'dialog-tipo-importacion-rol'
            $scope.idModalCargaHorario = 'modal-carga-horario'
            $scope.idModalHistorialContratoHijos = 'dialog-historial-contrato-hijos'
            $scope.idModalEliminarPrestamo = 'modal-eliminar-prestamo'
            $scope.idModalHistorialHorasExtrasOrdinarias = 'dialog-historial-horas-extra';
            $scope.idModalVistaVacaciones = 'dialog-vista-vacaciones';
            $scope.idModalConfiguracionSubsidios = "dialog-configuracion-subsidios";
            $scope.idmodalWizardContainerConfiguracionSubsidios = "modal-wizard-container-configuracion-subsidios"
            $scope.idModalNuevoSubsidio = "modal-nuevo-subsidio";
            $scope.idModalRolTurnosNoche = "modal-rol-turnos-noche";
            $scope.idModalParmEmpleadoCampa = "dialog-empleados-campamento";
            $scope.idTabSubsidios = "tab-subsidios";
            $scope.idModalEliminarAusenciaMedica = "dialog-eliminar-ausencia-medica"
            $scope.dialogEditarDocPreRequisito = 'dialog-editar-doc-preRequisito'
            $scope.idModalAsignarDocumentoPrerequisito = 'dialog-asignar-documento-prerequisito'
            $scope.idModalMatrizAnticipo = 'dialog-matriz-anticipos'
            $scope.idModalCopiaAnticipo = 'dialog-copia-anticipo'
            $scope.idModalNuevoEmpleadoAnticipo = "dialog-nuevo-empleado-anticipo"
            $scope.idModalCerrarHorasExtrasOrdinario = "dialog-cerrarhorasExtras-ordinario";
            $scope.idModalOtrosBonos = "dialog-otros-bonos";
            $scope.idModalHistorialOtrosBonos = "dialog-historial-otros-bonos";
            $scope.idModalLugarSeguroSaludEdicion = 'dialog-lugar-seguro-salud';

            $scope.idModalLlamadaATencion = "dialog-llamadas-atencion";
            $scope.idModalHistorialLlamadaATencionEmpleado = "dialog-h-llamada-atencion-empleado";
            $scope.idModalHistorialLlamadasDeATencion = 'dialog-h-llamadas-de-atencion';
            $scope.idModalReporteGeneralOtrosBonos = 'dialog-reportes-otros-bonos';
            $scope.idInputDocFormacion = "id-doc-formacion";
            $scope.idInputDocExperiencia = "id-doc-experiencia";
            $scope.idInputDocCapacitacion = "id-doc-capacitacion";
            $scope.idInputDocLogro = "id-doc-logro";
            $scope.idModalEdicionRopaTrabajo = "dialog-edicion-ropa-trabajo"


            $scope.$on('$viewContentLoaded', function () {
                // resaltarPestaña($location.path().substring(1));
                resaltarPestaña($location.path().substring(1));
                ejecutarScriptsRecursosHumanos(
                    $scope.idModalPrerequisitosInactivos, 
                    $scope.idModalEmpleado,
                    $scope.idModalwizardContainerEmpleado,
                    $scope.idModalDepartamentoEstado, $scope.idModalProvincia, $scope.idModalLocalidad, $scope.idImputContrato, $scope.idModalHojaVida, $scope.idModalwizardContainerHojaVida,
                    $scope.idModalNuevoFamiliar, $scope.idModalHistorialContrato, $scope.idModalBeneficiosSociales,
                    $scope.idModalDetalleVacaciones, $scope.idModalBitacoraFicha,
                    $scope.idModalAnticipoExtraordinario, $scope.idModalNuevoAnticipoExtraordinario, $scope.idModalNuevoPrestamo, $scope.idModalAusenciasVacaciones,
                    $scope.idTabAusenciasVacaciones, $scope.idModalTipoBaja, $scope.idModalFeriados, $scope.idModalHitorialVacaciones,
                    $scope.idModalCompensacion, $scope.idModalHistorialAusencias, $scope.idModalHistorialAusenciaMedica, $scope.idModalTipoAusencia,
                    $scope.idModalRolTurnos, $scope.idModalHistorialTurnos, $scope.idModalHorasExtras, $scope.idModalHistorialHorasExtras,
                    $scope.idModalAnticipoRegular, $scope.idModalPrestamosPersonal, $scope.idModalAdvertencia, $scope.idModalPretamosNuevoTodos,
                    $scope.idModalReporteHijos, $scope.idModalReporteVeneficios, $scope.idModalPagoPrestamo, $scope.idModalReporteVacaciones,
                    $scope.idModalReporteBajasMedicas, $scope.idModalReporteRolTurnos, $scope.idModalReporteTurnosDetallado,
                    $scope.idModalViajes, $scope.idModalVisita, $scope.idModalVehiculosViaje,
                    $scope.idModalHistorialViajes, $scope.idModalReporteAusencias, $scope.idModalCertificado,
                    $scope.idModalRhNuevo, $scope.idModalWizardRhNuevo, $scope.idImagenUsuario, $scope.idEliminarUsuarioRh, $scope.idModalWizardRhVista,
                    $scope.idModalContenedorRhVista, $scope.idEliminarSeguroEmpleado, $scope.idEliminarFamiliarEmpleado, $scope.idModalHistorialPrerequisito, $scope.idModalHistorialPrerequisitoInactivos,
                    $scope.idModalEditarPrerequisito, $scope.idModalDialogConfirmacionEntregaAdelantado, $scope.IdModalVerificarCuenta, $scope.idModalImpresionHojaVida, $scope.idModalNuevoAnticipoRegularTodos,
                    $scope.idModalTr3BancoMsc, $scope.idModalTr3BancoUnion, $scope.idModalHistorialTr3, $scope.IdModalVerificarCuentaRrhh, $scope.idModalConfirmarDesabilitacion, $scope.idModalReingresoEmpleado,
                    $scope.idModalHistorialBeneficios, $scope.idModalConfiguracionRopaDeTrabajo, $scope.idModalReporteRopaDeTrabajo, $scope.idmodalWizardContainerConfiguracionRopaTrabajo, $scope.idModalRopaTrabajo, $scope.idModalNuevaRopaTrabajo, $scope.idModalItemsNuevaRopaTrabajo,
                    $scope.idModalEliminarRopaTrabajo, $scope.idModalConceptoEdicion, $scope.idModalVisitaSalida, $scope.idModalDesabilitarPasajero, $scope.idModalCerrarRolDeTurno, $scope.idModalConductoresViaje, $scope.idModalHistorialGestionesVacaciones, $scope.idModalTipoImportacionRol, $scope.idModalCargaHorario,
                    $scope.idModalHistorialContratoHijos, $scope.idModalEliminarPrestamo, $scope.idModalHistorialHorasExtrasOrdinarias, $scope.idModalVistaVacaciones, $scope.idModalConfiguracionSubsidios, $scope.idmodalWizardContainerConfiguracionSubsidios, $scope.idModalNuevoSubsidio, $scope.idModalReporteAltasBajas, $scope.idModalRolTurnosNoche,
                    $scope.idModalParmEmpleadoCampa, $scope.idTabSubsidios, $scope.idInputDocPrerequisito, $scope.dialogEditarDocPreRequisito, $scope.idInputEdicionDocPrerequisito, $scope.idModalEliminarAusenciaMedica, $scope.idModalAsignarDocumentoPrerequisito, $scope.idModalMatrizAnticipo, $scope.idModalCopiaAnticipo, $scope.idModalNuevoEmpleadoAnticipo,
                    $scope.idModalHistorialFichas, $scope.idModalCerrarHorasExtrasOrdinario, $scope.idModalOtrosBonos, $scope.idModalHistorialOtrosBonos, $scope.idModalLugarSeguroSaludEdicion, $scope.idmodalFechasAnticipoExcel, $scope.idModalLlamadaATencion,
                    $scope.idModalHistorialLlamadaATencionEmpleado, $scope.idModalHistorialLlamadasDeATencion, $scope.idModalReporteGeneralOtrosBonos, $scope.idInputDocFormacion, $scope.idInputDocExperiencia, $scope.idInputDocCapacitacion, $scope.idInputDocLogro, $scope.idModalEdicionRopaTrabajo);
                $scope.buscarAplicacion($scope.usuario.aplicacionesUsuario, $location.path().substring(1));
                $scope.buscarOpcionesAplicacion($scope.usuario.aplicacionesUsuario, $location.path().substring(1))

                $scope.obtenerColumnasAplicacion()
                blockUI.stop();

            });

            $scope.$on('$routeChangeStart', function (next, current) {
                $scope.eliminarPopup($scope.idModalEmpleado)
                $scope.eliminarPopup($scope.idModalRhNuevo)
                $scope.eliminarPopup($scope.idModalDepartamentoEstado)
                $scope.eliminarPopup($scope.idModalProvincia)
                $scope.eliminarPopup($scope.idModalLocalidad)
                $scope.eliminarPopup($scope.idModalHojaVida)
                $scope.eliminarPopup($scope.idmodalFechasAnticipoExcel)
                $scope.eliminarPopup($scope.idModalNuevoFamiliar)

                $scope.eliminarPopup($scope.idModalHistorialContrato)
                $scope.eliminarPopup($scope.idModalBeneficiosSociales)

                $scope.eliminarPopup($scope.idModalDetalleVacaciones)

                $scope.eliminarPopup($scope.idModalBitacoraFicha)
                $scope.eliminarPopup($scope.idModalAnticipoExtraordinario)
                $scope.eliminarPopup($scope.idModalNuevoAnticipoExtraordinario)
                $scope.eliminarPopup($scope.idModalNuevoPrestamo)
                $scope.eliminarPopup($scope.idModalAusenciasVacaciones)
                $scope.eliminarPopup($scope.idModalTipoBaja)
                $scope.eliminarPopup($scope.idModalFeriados)
                $scope.eliminarPopup($scope.idModalHitorialVacaciones)
                $scope.eliminarPopup($scope.idModalCompensacion)
                $scope.eliminarPopup($scope.idModalHistorialAusencias)
                $scope.eliminarPopup($scope.idModalHistorialAusenciaMedica)
                $scope.eliminarPopup($scope.idModalTipoAusencia)
                $scope.eliminarPopup($scope.idModalRolTurnos)
                $scope.eliminarPopup($scope.idModalHistorialTurnos)
                $scope.eliminarPopup($scope.idModalHistorialFichas)
                $scope.eliminarPopup($scope.idModalHorasExtras)
                $scope.eliminarPopup($scope.idModalHistorialHorasExtras)
                $scope.eliminarPopup($scope.idModalAnticipoRegular)
                $scope.eliminarPopup($scope.idModalPrestamosPersonal)
                $scope.eliminarPopup($scope.idModalAdvertencia)
                $scope.eliminarPopup($scope.idModalPretamosNuevoTodos)
                $scope.eliminarPopup($scope.idModalReporteHijos)
                $scope.eliminarPopup($scope.idModalReporteVeneficios)
                $scope.eliminarPopup($scope.idModalPagoPrestamo)
                $scope.eliminarPopup($scope.idModalReporteVacaciones)
                $scope.eliminarPopup($scope.idModalReporteBajasMedicas)
                $scope.eliminarPopup($scope.idModalReporteAltasBajas)
                $scope.eliminarPopup($scope.idModalReporteRolTurnos)
                $scope.eliminarPopup($scope.idModalReporteTurnosDetallado)
                $scope.eliminarPopup($scope.idModalViajes)
                $scope.eliminarPopup($scope.idModalVisita)
                $scope.eliminarPopup($scope.idModalVehiculosViaje)

                $scope.eliminarPopup($scope.idModalHistorialViajes)
                $scope.eliminarPopup($scope.idModalReporteAusencias)
                $scope.eliminarPopup($scope.idModalCertificado)

                $scope.eliminarPopup($scope.idModalPrerequisitos)
                $scope.eliminarPopup($scope.idModalPrerequisitosInactivos)
                $scope.eliminarPopup($scope.idModalWizardRhVista)
                $scope.eliminarPopup($scope.idModalDialogPrerequisitoNuevo)
                $scope.eliminarPopup($scope.idEliminarFamiliarEmpleado)
                $scope.eliminarPopup($scope.idEliminarSeguroEmpleado)
                $scope.eliminarPopup($scope.idModalHistorialPrerequisito)
                $scope.eliminarPopup($scope.idModalHistorialPrerequisitoInactivos)
                $scope.eliminarPopup($scope.idModalEditarPrerequisito)
                $scope.eliminarPopup($scope.idModalDialogConfirmacionEntregaAdelantado)
                $scope.eliminarPopup($scope.IdEntregaPrerequisito)
                $scope.eliminarPopup($scope.IdModalVerificarCuenta)
                $scope.eliminarPopup($scope.idModalImpresionHojaVida)
                $scope.eliminarPopup($scope.idModalNuevoAnticipoRegularTodos)
                $scope.eliminarPopup($scope.idEliminarUsuarioRh)
                $scope.eliminarPopup($scope.idModalTr3BancoMsc)
                $scope.eliminarPopup($scope.idModalTr3BancoUnion)
                $scope.eliminarPopup($scope.idModalHistorialTr3)
                $scope.eliminarPopup($scope.IdModalVerificarCuentaRrhh)
                $scope.eliminarPopup($scope.idModalConfirmarDesabilitacion)
                $scope.eliminarPopup($scope.idModalReingresoEmpleado)
                $scope.eliminarPopup($scope.idModalHistorialBeneficios)
                $scope.eliminarPopup($scope.idModalConfiguracionRopaDeTrabajo)
                $scope.eliminarPopup($scope.idModalReporteRopaDeTrabajo)
                $scope.eliminarPopup($scope.idModalRopaTrabajo)
                $scope.eliminarPopup($scope.idModalNuevaRopaTrabajo)
                $scope.eliminarPopup($scope.idModalItemsNuevaRopaTrabajo)
                $scope.eliminarPopup($scope.idModalEliminarRopaTrabajo)
                $scope.eliminarPopup($scope.idModalConceptoEdicion)
                $scope.eliminarPopup($scope.idModalVisitaSalida)
                $scope.eliminarPopup($scope.idModalDesabilitarPasajero)
                $scope.eliminarPopup($scope.idModalCerrarRolDeTurno)
                $scope.eliminarPopup($scope.idModalConductoresViaje)
                $scope.eliminarPopup($scope.idModalHistorialGestionesVacaciones)
                $scope.eliminarPopup($scope.idModalTipoImportacionRol)
                $scope.eliminarPopup($scope.idModalCargaHorario)
                $scope.eliminarPopup($scope.idModalHistorialContratoHijos)
                $scope.eliminarPopup($scope.idModalEliminarPrestamo)
                $scope.eliminarPopup($scope.idModalHistorialHorasExtrasOrdinarias)
                $scope.eliminarPopup($scope.idModalVistaVacaciones)
                $scope.eliminarPopup($scope.idModalConfiguracionSubsidios)
                $scope.eliminarPopup($scope.idModalNuevoSubsidio)
                $scope.eliminarPopup($scope.idModalRolTurnosNoche)
                $scope.eliminarPopup($scope.idModalParmEmpleadoCampa)
                $scope.eliminarPopup($scope.dialogEditarDocPreRequisito)
                $scope.eliminarPopup($scope.idModalEliminarAusenciaMedica)
                $scope.eliminarPopup($scope.idModalAsignarDocumentoPrerequisito)
                $scope.eliminarPopup($scope.idModalMatrizAnticipo)
                $scope.eliminarPopup($scope.idModalCopiaAnticipo)
                $scope.eliminarPopup($scope.idModalNuevoEmpleadoAnticipo)
                $scope.eliminarPopup($scope.idModalCerrarHorasExtrasOrdinario)
                $scope.eliminarPopup($scope.idModalOtrosBonos)
                $scope.eliminarPopup($scope.idModalHistorialOtrosBonos)
                $scope.eliminarPopup($scope.idModalLlamadaATencion)
                $scope.eliminarPopup($scope.idModalHistorialLlamadaATencionEmpleado)
                $scope.eliminarPopup($scope.idModalHistorialLlamadasDeATencion)
                $scope.eliminarPopup($scope.idModalDialogPrerequisitosConfig);
                $scope.eliminarPopup($scope.idModalReporteGeneralOtrosBonos);
                $scope.eliminarPopup($scope.idModalEdicionRopaTrabajo);
                $scope.eliminarPopup($scope.idModalAlertPrerequisitos);

            });
            $scope.inicio = function () {
                //$scope.localStorageSpace()
                $scope.listYearsAnticipo = $scope.obtenerAnios(2017)
                $scope.obtenerGenero();

                $scope.obtenerRecursosHumanos();
                $scope.historialRolesTurno = false
                $scope.recuperarDatosTipo()
                $scope.empleadosSeleccionados = []
                $scope.listaBancos()
                $scope.obtenerConfiguracionVacaciones()
                $scope.obtenerTiposOtrosingresosYDeduccion()
                // $scope.obtenerMotivosRetiro()
                // $scope.obtenerCuentasBancos()
                $scope.buscarDepartamentoFiniquito()
                $scope.obtenerGestiones()
                // $scope.obtenerChoferesViaje()
                $scope.dynamicPopoverRopaTrabajo = {
                    isOpen: false,
                    templateUrl: 'myPopoverRopaTrabajo.html',
                    open: function open() {
                        $scope.dynamicPopoverRopaTrabajo.isOpen = true;
                    },
                    close: function close() {
                        $scope.dynamicPopoverRopaTrabajo.isOpen = false;
                    }
                };
                $scope.sortDirectionForFormacionAcademica = false;
                $scope.sortDirectionExperienciaLaboral = false;
                $scope.dynamicPopoverCargosPre = {
                    templateUrl: 'myPopoverTemplatePreCargos.html',
                };
                $scope.dynamicPopoverExcelReport = {
                    templateUrl: 'myPopoverTemplateExcelReport.html',
                };
                $scope.dynamicPopoverSubsidios = {
                    isOpen: false,
                    templateUrl: 'myPopoverSubsidios.html',
                    open: function open() {
                        $scope.dynamicPopoverSubsidios.isOpen = true;
                    },
                    close: function close() {
                        $scope.dynamicPopoverSubsidios.isOpen = false;
                    }
                };
                $scope.filtroReporteRopa = {
                    inicio: "",
                    fin: "",
                    campo: ""
                }
            }


            $scope.abrirDialogConceptoEdicion = function (tipo) {
                $scope.tipo_edicion = tipo;
                $scope.clase = {};
                $scope.abrirPopup($scope.idModalConceptoEdicion);
            }
            $scope.cerrarDialogConceptoEdicion = function () {
                $scope.cerrarPopup($scope.idModalConceptoEdicion);
            }
            $scope.abrirDialogCerrarRolDeTurno = function () {
                $scope.abrirPopup($scope.idModalCerrarRolDeTurno);
            }
            $scope.cerrarDialogCerrarRolDeTurno = function () {
                $scope.cerrarPopup($scope.idModalCerrarRolDeTurno);
            }
            $scope.abrirDialogConductoresViaje = function () {
                $scope.obtenerTipoLicenciaVehiculo();
                $scope.conductor = {};
                $scope.abrirPopup($scope.idModalConductoresViaje);
            }
            $scope.cerrarDialogConductoresViaje = function () {
                $scope.cerrarPopup($scope.idModalConductoresViaje);
            }
            $scope.abrirDialogTipoImportacionRol = function (roles) {
                $scope.rolesTurno = roles
                $scope.tipoImportacionRol = true
                $scope.abrirPopup($scope.idModalTipoImportacionRol);
            }
            $scope.cerrarDialogTipoImportacionRol = function () {
                $scope.cerrarPopup($scope.idModalTipoImportacionRol);
            }

            $scope.abrirDialogHistorialGestionesVacaciones = async function () {
                $scope.conductor = {};
                var filtroVacacion = {}
                $scope.historialEmpresaVacacionesGestion = await $scope.obtenerHistorialEmpresaVacacionGestion(filtroVacacion)
                $scope.abrirPopup($scope.idModalHistorialGestionesVacaciones);
                $scope.$evalAsync()
            }
            $scope.cerrarDialogHistorialGestionesVacaciones = function () {
                $scope.cerrarPopup($scope.idModalHistorialGestionesVacaciones);
            }

            $scope.obtenerColumnasAplicacion = function () {
                $scope.fieldViewer = FieldViewer({
                    crear: true,
                    id_empresa: $scope.usuario.id_empresa,
                    configuracion: {
                        codigo: { value: "Codigo", show: true },
                        nombre: { value: "Nombre", show: true },
                        empresa: { value: "Empresa", show: true },
                        imagen: { value: "Imagen", show: true },
                        ci: { value: "CI", show: true },
                        extension: { value: "Extension", show: true },
                        tipo_contrato: { value: "Tipo Contrato", show: true },
                        campo: { value: "Campo", show: true },
                        cargo: { value: "Cargo", show: true }
                    }
                }, $scope.aplicacion.aplicacion.id);
                $scope.fieldViewer.updateObject();
            }
            $scope.obtenerTiposPrestamos = () => {
                const prom = ClasesTipoEmpresa("RRHH_TPRESEMP", $scope.usuario.id_empresa); //tipos prestamos empleado
                prom.then((entidad) => {
                    $scope.tipos_prestamo_empleado = entidad.clases;
                }).catch((err) => {
                    alert(err?.stack ?? 'Se perdió la conexión.')
                })
            }
            $scope.abrirModalHistorialTr3 = function (banco, tipo) {
                $scope.tipoBanco = tipo
                var promesa = ListaTr3Empresa($scope.usuario.id_empresa, banco.nombre)
                promesa.then(function (dato) {
                    $scope.historialTr3 = dato
                    $scope.abrirPopup($scope.idModalHistorialTr3)
                }).catch(function (err) {
                    var men = (err.data !== undefined && err.data !== null) ? err.data : err.message
                    $scope.mostrarMensaje('Se produjo un error! > ' + men)
                    blockUI.stop();
                })
            }
            $scope.abrirModalBeneficioSicial = function () {
                $scope.filtro = {}
                $scope.obtenerbeneficiosSocialesH()
                $scope.abrirPopup($scope.idModalHistorialBeneficios)
            }
            $scope.obtenerbeneficiosSocialesH = function (tiempoTrabajado) {
                $scope.quienqueniosDisponibles = true
                var promesa = ListaBeneficiosEmpleado($scope.empleado.id_ficha)
                promesa.then(function (dato) {
                    $scope.listabeneficios2 = dato
                })
            }
            $scope.obtenerbeneficiosSociales = function (tiempoTrabajado) {
                $scope.quienqueniosDisponibles = true
                var promesa = ListaBeneficiosEmpleado($scope.empleado.id_ficha)
                promesa.then(function (dato) {
                    $scope.listabeneficios = dato
                    $scope.quinqueniosRealizados = $scope.listabeneficios.length
                    var anios = $scope.quinqueniosRealizados * 5
                    var añosRestantes = tiempoTrabajado.anios - anios
                    $scope.añosRestantes = añosRestantes
                    $scope.quienquenioRestante = Math.trunc(añosRestantes / 5)
                    if (!$scope.beneficio.tipo_beneficio) {
                        if ($scope.quienquenioRestante == 0) {
                            $scope.quienquenioRestanteDisabled = true
                            SweetAlert.swal("", "No cuenta con mas quinquenios disponibles", "warning");
                        } else {
                            $scope.quienquenioRestanteDisabled = false
                        }
                    }
                })
            }
            $scope.cerrarModalBeneficioSicial = function () {
                $scope.cerrarPopup($scope.idModalHistorialBeneficios)
            }

            $scope.cerrarModalHistorialTr3 = function () {
                $scope.cerrarPopup($scope.idModalHistorialTr3)
            }
            $scope.abrirModalConfiguracionRopaDeTrabajo = function () {
                $scope.dynamicPopoverRopaTrabajo.close();
                $scope.listaRopasDeTrabajo = []
                $scope.ropaTrabajo = {}
                $scope.cargo = {};
                $scope.buscarRopaTrabajo();
                $scope.listaRopaTrabajoPorCargo()
                $scope.abrirPopup($scope.idModalConfiguracionRopaDeTrabajo)
            }
            $scope.cerrarModalConfiguracionRopaDeTrabajo = function () {
                $scope.cerrarPopup($scope.idModalConfiguracionRopaDeTrabajo)
            }
            $scope.abrirModalReporteRopaDeTrabajo = function (pasajero) {
                $scope.PopPdfRopaTrabajo = {
                    templateUrl: 'myPopPdfRopa.html',
                };
                $scope.dynamicPopoverRopaTrabajo.close();
                $scope.abrirPopup($scope.idModalReporteRopaDeTrabajo)
            }
            $scope.cerrarModalReporteRopaDeTrabajo = function () {
                $scope.cerrarPopup($scope.idModalReporteRopaDeTrabajo)
            }
            $scope.abrirModalDesabilitarPasajero = function (pasajero) {
                $scope.empleado = pasajero
                if (pasajero.estado.nombre == "HABILITADO") {
                    $scope.abrirPopup($scope.idModalDesabilitarPasajero)
                } else {
                    pasajero.habilitado = false
                }
            }
            $scope.cerrarModalDesabilitarPasajero = function () {
                $scope.cerrarPopup($scope.idModalDesabilitarPasajero)
            }
            $scope.abrirModalRopaTrabajo = function (empleado) {
                $scope.filtroropa = {}
                if (empleado.activo) {
                    $scope.empleado = empleado
                    $scope.dynamicPopoverCargosRopaTrabajo = {
                        templateUrl: 'myPopoverCargosRopa.html',
                    };
                    $scope.dynamicPopoverRopasRopaTrabajo = {
                        templateUrl: 'myPopoverRopasRopa.html',
                    };
                    $scope.ObtenerDotacionesRopa(empleado)
                    $scope.abrirPopup($scope.idModalRopaTrabajo)
                }
            }
            $scope.cerrarModalRopaTrabajo = function () {
                $scope.cerrarPopup($scope.idModalRopaTrabajo)
            }
            $scope.abrirModalNuevaRopaTrabajo = async ( empleado ) => {
                try {
                    $scope.empleado = empleado
                    $scope.dotacionRopa = { id_usuario: $scope.usuario.id, fecha: fechaATexto( new Date()) }
                    if(!$scope.cumplimientoDotacion) await $scope.obtenerCumplimientoDotacion();
                    await $scope.obtenerPeriodosDotacion();
                    if(!$scope.dotacionRopa.sucursal){
                        $scope.sucursales.forEach(function (su, index, array) {
                            if (su.numero == 0) {
                                $scope.dotacionRopa.sucursal = su
                            }
                            if (index === (array.length - 1)) {
                                $scope.obtenerAlmacenes($scope.dotacionRopa.sucursal.id)
                            }
                        })
                    }
                    if(!$scope.dotacionRopa.almacen && $scope.listaDotaciones && $scope.listaDotaciones.length>0) $scope.dotacionRopa.almacen = $scope.listaDotaciones[$scope.listaDotaciones.length - 1].almacen
                    let id_almacen = $scope.dotacionRopa?.almacen?.id
                    if(!(empleado.id && id_almacen )) {
                        $scope.abrirPopup($scope.idModalNuevaRopaTrabajo)
                        return;
                    }
                    $scope.cargosEmpleado = await $scope.getCargosEmpleado(empleado.id_ficha, id_almacen)
                    if(!$scope.cargosEmpleado) return SweetAlert.swal("","El trabajador no tiene cargos y/o ropa de trabajo asignados.", "warning")
                    if($scope.cumplimientoDotacion && $scope.cumplimientoDotacion.clases.length > 0) {
                        $scope.dotacionRopa.cumplimiento =  $scope.cumplimientoDotacion.clases[0]
                    }
                    $scope.abrirPopup($scope.idModalNuevaRopaTrabajo)
                } catch (e) {
                    console.error(e);
                }
            }

            $scope.getCargosEmpleado = (idFicha, idAlmacen) => {
                return new Promise( async ( resolve, reject ) => {
                    $scope.dotacionRopa.dotacionItems = []
                    $scope.cargos = await ListaCargosEmpleado( idFicha, idAlmacen );
                    if($scope.cargos.cargosEmpleado && $scope.cargos.cargosEmpleado.length > 0) {
                        if( $scope.cargos.cargosEmpleado.length === 1 ){
                            $scope.dotacionRopa.dotacionItems = $scope.cargos.cargosEmpleado[0].cargo.ConfiguracionesCargo
                            .map( (e) => {
                                    e.producto = e.ropaTrabajo ? e.ropaTrabajo.productosSubGrupo && e.ropaTrabajo.productosSubGrupo.length>0 ? e.ropaTrabajo.productosSubGrupo[0] : null : null
                                    e.cantidad_disponible = e.ropaTrabajo ? e.ropaTrabajo.productosSubGrupo && e.ropaTrabajo.productosSubGrupo.length>0 ? e.ropaTrabajo.productosSubGrupo[0].inventarios.reduce(( acc, curr) => acc + curr.cantidad, 0 ) : 0 : 0
                                return e
                            })
                        }else{
                            $scope.dotacionRopa.dotacionItems = Object.values( $scope.cargos.cargosEmpleado.reduce(( acc, cur ) => {
                                if( cur.cargo && cur.cargo.ConfiguracionesCargo && cur.cargo.ConfiguracionesCargo.length > 0 ){
                                    for (let i = 0; i < cur.cargo.ConfiguracionesCargo.length; i++) {
                                        const config = cur.cargo.ConfiguracionesCargo[i];
                                        if(config.ropaTrabajo){
                                            if(!acc[config.ropaTrabajo.id]){
                                                acc[config.ropaTrabajo.id] = config
                                            }else{
                                                if(cur.principal) acc[config.ropaTrabajo.id] = config
                                            }
                                        }
                                    }
                                }
                                return acc;
                            }, {}) )
                            .map( (e) => {
                                e.producto = e.ropaTrabajo ? e.ropaTrabajo.productosSubGrupo && e.ropaTrabajo.productosSubGrupo.length>0 ? e.ropaTrabajo.productosSubGrupo[0] : null : null
                                e.cantidad_disponible = e.ropaTrabajo ? e.ropaTrabajo.productosSubGrupo && e.ropaTrabajo.productosSubGrupo.length>0 ? e.ropaTrabajo.productosSubGrupo[0].inventarios.reduce(( acc, curr) => acc + curr.cantidad, 0 ) : 0 : 0
                            return e
                        })
                        }
                    }                        
                    resolve($scope.dotacionRopa.dotacionItems)
                })
            }
            $scope.abrirModalEdicionRopaTrabajo = (id, almacen, ver ) => {
                $scope.dotacionRopa = {}
                $scope.ver = ver;
                if(id && almacen && almacen.id){
                    ObtenerDatosEdicionDotacionRopa(id, almacen.id)
                    .then( async({ error, data, message, messageType }) => {
                        if(error) {
                            SweetAlert.swal("", message, messageType)
                        }else{
                            try {
                                await $scope.obtenerPeriodosDotacion();
                                await $scope.obtenerCumplimientoDotacion();
                                $scope.dotacionRopa = data
                                $scope.dotacionRopa.fecha = fechaATexto(data.fecha);
                                $scope.sucursales.forEach(function (su, index, array) {
                                    if (su.numero == 0) {
                                        $scope.dotacionRopa.sucursal = su
                                    }
                                    if (index === (array.length - 1)) {
                                        $scope.obtenerAlmacenes($scope.dotacionRopa.sucursal.id)
                                    }
                                })
                                if($scope.dotacionRopa && $scope.dotacionRopa.dotacionItems.length > 0){
                                    $scope.dotacionRopa.dotacionItems = await $scope.orderDotacionItems($scope.dotacionRopa.dotacionItems)
                                }
                                $scope.abrirPopup($scope.idModalEdicionRopaTrabajo)
                            } catch (e) {
                                console.log(e);
                            }
                        }
                    })
                }else{
                    SweetAlert.swal("","Parámetros incorrectos", "error")
                }
            }
            $scope.orderDotacionItems = (elements) => {
                return new Promise((resolve, reject) => {
                    let orderData = elements.map( e => {
                        if(e.producto && e.producto.subgrupo && e.producto.subgrupo.productosSubGrupo ){
                            e.productos = e.producto.subgrupo.productosSubGrupo
                            for (let i = 0; i < e.productos.length; i++) {
                                const p = e.productos[i];
                                let disp = p.inventarios.reduce( (ac, val) => ac+=val.cantidad , 0)
                                e.productos[i].cantidad_disponible = disp
                                if(e.id_producto === p.id){
                                    e.producto = { ...e.productos[i] }
                                }
                            }
                        }
                        return e
                    })
                    resolve(orderData);
                }) 
            }
            $scope.cerrarModalNuevaRopaTrabajo = function () {
                $scope.cerrarPopup($scope.idModalNuevaRopaTrabajo)
            }
            $scope.cerrarModalEdicionRopaTrabajo = function () {
                $scope.cerrarPopup($scope.idModalEdicionRopaTrabajo)
            }
            $scope.cargarItemsNuevaRopaTrabajo = function () {
                if ($scope.dotacionRopa.almacen) {
                    if ($scope.dotacionItems.length > 0) {
                        $scope.obtenerListaRopaTrabajoProductos()
                        $scope.abrirPopup($scope.idModalItemsNuevaRopaTrabajo)
                    } else {
                        toastr.warning("Asignar ropas al cargo para poder generar registro.");
                    }
                } else {
                    toastr.warning("Seleccionar un almacen para poder filtrar los items correspondientes.");
                }
            }
            $scope.cerrarModalItemsNuevaRopaTrabajo = function () {
                $scope.cerrarPopup($scope.idModalItemsNuevaRopaTrabajo)
            }

            $scope.abrirModalTr3BancoMsc = function () {
                $scope.abrirPopup($scope.idModalTr3BancoMsc)
            }
            $scope.cerrarModalTr3BancoMsc = function () {
                $scope.cerrarPopup($scope.idModalTr3BancoMsc)
            }
            $scope.abrirModalTr3BancoUnion = function () {
                $scope.abrirPopup($scope.idModalTr3BancoUnion)
            }
            $scope.cerrarModalTr3BancoUnion = function () {
                $scope.cerrarPopup($scope.idModalTr3BancoUnion)
            }
            $scope.abrirModalbanco = async function (banco) {
                try {
                    $scope.tr3 = { anticipos: $scope.anticiposTr3, tipo: "" }
                    $scope.datosBanco = banco;
                    const nombre = banco.nombre.split(' ').map(word => word.trim().toUpperCase()).join(' ');
                    if (nombre === "BANCO MERCANTIL SANTA CRUZ") {                        
                        let res = await UltimoRegistroTr3Empresa($scope.usuario.id_empresa, nombre);
                        $scope.tr3 = res.ultimoRegistro;
                        delete $scope.tr3.id;
                        delete $scope.tr3.nombre_planilla;
                        delete $scope.tr3.numero_planilla;
                        delete $scope.tr3.nombre_archivo;
                        $scope.tr3.anticipos=$scope.anticiposTr3;
                        $scope.tr3.tipo = "MSC";
                        $scope.tr3.planilla=parseInt(res.ultimoRegistro.planilla);
                        $scope.tr3.fecha_anticipo=$scope.fechaATexto(new Date());
                        $scope.tr3.fecha_elaboracion=$scope.fechaATexto(new Date());
                        $scope.generarNombrePlanillaTr3();
                        $scope.abrirModalTr3BancoMsc();
                    }
                    if (nombre === "BANCO UNIÓN") {
                        $scope.tr3.tipo = "BU"
                        $scope.abrirModalTr3BancoUnion()
                    }
                    $scope.$evalAsync()
                } catch (err) {
                    console.log(err)
                }

            }
            $scope.generarNombrePlanillaTr3 = function () {
                $scope.tr3.nombre_planilla = ($scope.tr3.planilla ? $scope.tr3.planilla : "") + "" + ($scope.tr3.fecha_elaboracion ? $scope.tr3.fecha_elaboracion.replaceAll('/', "") : $scope.tr3.fecha_elaboracion) + "" + ($scope.tr3.numero_planilla ? $scope.tr3.numero_planilla : '')
            }
            $scope.abrirModalImprimirHojaVida = function () {
                $scope.filtroCap = { inicio: "", fin: "", capacidadInterna: "" }
                $scope.abrirPopup($scope.idModalImpresionHojaVida)
            }
            $scope.cerrarModalImprimirHojaVida = function () {
                $scope.cerrarPopup($scope.idModalImpresionHojaVida)
            }

            $scope.cerrarDialogEditarPreRequisito = function () {
                $scope.cerrarPopup($scope.idModalEditarPrerequisito);
            }
            $scope.abrirDialogEditarDocPreRequisito = function (preReq) {
                $scope.edicionDocPreRequisito = preReq
                $scope.abrirPopup($scope.dialogEditarDocPreRequisito);
            }
            $scope.cerrarDialogEditarDocPreRequisito = function () {
                $scope.cerrarPopup($scope.dialogEditarDocPreRequisito);
            }
            $scope.abrirDialogAsignarDocumentoPrerequisito = function (preReq) {
                $scope.asigDocPreRequisito = preReq
                $scope.abrirPopup($scope.idModalAsignarDocumentoPrerequisito);
            }
            $scope.cerrarDialogAsignarDocumentoPrerequisito = function () {
                $scope.cerrarPopup($scope.idModalAsignarDocumentoPrerequisito);
            }
            $scope.asignarDocumentoPrerequisito = function (eliminar) {
                var promesa = AsignarDocumentoPrerequisito($scope.asigDocPreRequisito)
                promesa.then(function (data) {
                    $scope.mostrarMensaje(data.mensaje)
                    $scope.cerrarDialogAsignarDocumentoPrerequisito()
                    if (eliminar) {
                        $scope.asigDocPreRequisito.preRequisito.asignado = false
                        $scope.asignarPrerequisito($scope.asigDocPreRequisito.preRequisito, $scope.empleado)
                    }
                })
            }
            /*  $scope.abrirDialogPrerequisitoNuevo = function () {
                 $scope.empleado = undefined
                 $scope.cargosPre = []
                 $scope.NuevoP = new Prerequisito({ puede_modificar_rrhh: false, cargos: [] });
                 $scope.obtenerCargos()
                 $scope.obtenertodoslosPrerequisitos()
                 $scope.abrirPopup($scope.idModalDialogPrerequisitoNuevo);
             } */

            $scope.abrirDialogHistoricoPreRequisito = function (pre, pac) {
                $scope.obtenerDatosHistorialPreRequisito(pre, pac)
                $scope.abrirPopup($scope.idModalHistorialPrerequisito);
            }
            $scope.abrirDialogHistoricoPreRequisitoInactivos = function (pre, pac) {
                $scope.obtenerDatosHistorialPreRequisito(pre, pac)
                $scope.abrirPopup($scope.idModalHistorialPrerequisitoInactivos);
            }
            $scope.cerrarDialogHistoricoPreRequisitoInactivo = function () {
                $scope.cerrarPopup($scope.idModalHistorialPrerequisitoInactivos);
            }
            $scope.obtenerDatosHistorialPreRequisito = function (pre, pac) {
                var filtro = { inicio: 0, fin: 0 }
                $scope.preRequisito = pre
                $scope.paciente = pac
                var promesa = PrerequisitosHistorial({ id_pre: $scope.preRequisito.preRequisito.id, id_pac: $scope.paciente.id, inicio: filtro.inicio, fin: filtro.fin });
                promesa.then(function (preRequisitos) {
                    $scope.historialPrerequisitosPaciente = preRequisitos.historial;
                    blockUI.stop();
                    $scope.filtro.inicio = ($scope.filtro.inicio instanceof Date) ? $scope.filtro.inicio.getDate() + '/' + ($scope.filtro.inicio.getMonth() + 1) + '/' + $scope.filtro.inicio.getFullYear() : ""
                    $scope.filtro.fin = ($scope.filtro.fin instanceof Date) ? $scope.filtro.fin.getDate() + '/' + ($scope.filtro.fin.getMonth() + 1) + '/' + $scope.filtro.fin.getFullYear() : ""
                });
            }
            $scope.cerrarConfirmacionEntragaAdelantadaPrerequisito = function () {
                $scope.cerrarPopup($scope.idModalDialogConfirmacionEntregaAdelantado);
            }
            $scope.filtrarHistorialPrerequisito = function (filtro) {
                if (filtro != undefined) {
                    var fecha_inicio = (filtro.inicio === null || filtro.inicio === "" || filtro.inicio === undefined) ? 0 : new Date(filtro.inicio)
                    var fecha_fin = (filtro.fin === null || filtro.fin === "" || filtro.fin === undefined) ? 0 : new Date(filtro.fin)
                    var tipo_opcion = (filtro.opcion === null || filtro.opcion === undefined) ? 0 : filtro.opcion
                    filtro = { inicio: fecha_inicio, fin: fecha_fin, opcion: tipo_opcion }
                } else {
                    var filtro = { inicio: 0, fin: 0 }
                }

                var promesa = PrerequisitosHistorial({ id_pre: $scope.preRequisito.preRequisito.id, id_pac: $scope.paciente.id, inicio: filtro.inicio, fin: filtro.fin });
                promesa.then(function (preRequisitos) {
                    $scope.historialPrerequisitosPaciente = preRequisitos.historial;
                    blockUI.stop();
                    filtro.inicio = ($scope.filtro.inicio instanceof Date) ? $scope.filtro.inicio.getDate() + '/' + ($scope.filtro.inicio.getMonth() + 1) + '/' + $scope.filtro.inicio.getFullYear() : ""
                    filtro.fin = ($scope.filtro.fin instanceof Date) ? $scope.filtro.fin.getDate() + '/' + ($scope.filtro.fin.getMonth() + 1) + '/' + $scope.filtro.fin.getFullYear() : ""
                });
            }

            $scope.cerrarDialogHistoricoPreRequisito = function () {
                $scope.cerrarPopup($scope.idModalHistorialPrerequisito);
            }
            $scope.abrirDialogVerEmpleado = function (elpaciente) {
                promesaPaciente = obtenerEmpleadoRh(elpaciente.id)
                promesaPaciente.then(function (dato) {
                    if (dato.clase != undefined) {
                        dato.medicoPaciente.tipo_contrato = dato.clase
                    }
                    $scope.paciente = dato.medicoPaciente
                    $scope.paciente.fecha_nacimiento_texto = $scope.fechaATexto($scope.paciente.persona.fecha_nacimiento)
                    $scope.seleccionarCargos(paciente.cargos)
                    $scope.paciente.ver = true

                })
                $scope.abrirPopup($scope.idModalWizardRhVista);
            }

            $scope.cerrarDialogVerEmpleado = function () {
                $scope.cerrarPopup($scope.idModalWizardRhVista);
            }
            $scope.abrirDialogRhNuevo = function () {
                $scope.steps = [{ cabeza: "cabeza-nuevo-datos-personales", cuerpo: "cuerpo-nuevo-datos-personales" },
                { cabeza: "cabeza-nuevo-datos-comple", cuerpo: "cuerpo-nuevo-datos-comple" },
                { cabeza: "cabeza-nuevo-datos-laborales", cuerpo: "cuerpo-nuevo-datos-laborales" }

                ]
                $scope.nuevoRH = new NuevoRecursoHumano({ persona: { imagen: "img/icon-user-default.png" }, id_empresa: $scope.usuario.id_empresa, es_empleado: true, activoCopiaCodigo: true });
                $scope.abrirPopup($scope.idModalRhNuevo);
            }
            $scope.cerrarDialogRhNuevo = function () {
                $scope.cargadorCI = false;
                $scope.mensajeCI = "";
                $scope.cerrarPopup($scope.idModalRhNuevo);
            }
            $scope.cerrarDialogEliminarUsuarioRh = function () {
                $scope.cerrarPopup($scope.idEliminarUsuarioRh);
            }
            $scope.abrirDialogEliminarUsuarioRh = function (empleado) {
                $scope.empleado = empleado
                if (empleado.activo) {
                    $scope.abrirPopup($scope.idEliminarUsuarioRh);
                }

            }
            $scope.cerrarDialogEliminarSeguroEmpleado = function () {

                $scope.cerrarPopup($scope.idEliminarSeguroEmpleado);
            }
            $scope.abrirDialogEliminarSeguroEmpleado = function (dato, index) {
                $scope.otroSeguro = dato
                $scope.otroSeguro.index = index
                $scope.abrirPopup($scope.idEliminarSeguroEmpleado);
            }
            $scope.cerrarDialogEliminarFamiliarEmpleado = function () {

                $scope.cerrarPopup($scope.idEliminarFamiliarEmpleado);
            }
            $scope.abrirDialogEliminarFamiliarEmpleado = function (dato, index) {
                $scope.familiar = dato
                $scope.familiar.index = index
                $scope.abrirPopup($scope.idEliminarFamiliarEmpleado);
            }

            /* $scope.abrirIdModalDialogPreRequisitos = function (empleado) {
                if (empleado.activo) {
                    $scope.empleado = empleado;
                    $scope.verificarAsignacionPrerequisitos(empleado)
                    $scope.obtenertodoslosPrerequisitos()
                    $scope.abrirPopup($scope.idModalPrerequisitos);
                }
            } */
            $scope.abrirIdModalDialogPreRequisitosInactivo = function (empleado) {

                // if (empleado.activo) {
                // $scope.empleado = empleado;
                $scope.verificarAsignacionPrerequisitos(empleado)
                $scope.obtenertodoslosPrerequisitos()
                $scope.abrirPopup($scope.idModalPrerequisitos);
                // }
            }
            $scope.abrirIdModalDialogPreRequisitosInactivos = function (empleado) {

                // if (empleado.activo) {
                // $scope.empleado = empleado;
                $scope.verificarAsignacionPrerequisitos(empleado)
                $scope.obtenertodoslosPrerequisitos()
                $scope.abrirPopup($scope.idModalPrerequisitosInactivos);
                // }
            }
            $scope.cerrarIdModalDialogPreRequisitos = function () {
                $scope.cerrarPopup($scope.idModalPrerequisitos);
            }
            $scope.cerrarIdModalDialogPreRequisitosInactivos = function () {
                $scope.cerrarPopup($scope.idModalPrerequisitosInactivos);
            }
            $scope.abrirDialogEmpleado = function (empleado, nuevaficha) {
                $scope.btnGuardar = false;
                $scope.seCambio = false;
                if ($scope.primeroGuardarParaCerrar == undefined) {
                    $scope.primeroGuardarParaCerrar = false
                }
                $scope.steps = [{ cabeza: "stepDatosPersonales", cuerpo: "datos-personales" },
                { cabeza: "stepDatosLaborales", cuerpo: "ficha-datos-laborales" },
                { cabeza: "stepdatosAfiliacion", cuerpo: "ficha-seguros" },
                { cabeza: "stepDatosFamiliares", cuerpo: "ficha-familia" }]
                $scope.obtenerDiscapacidades();
                $scope.obtenerDatosFichaUsuario(empleado, nuevaficha);
                $scope.empleado = empleado
                if (empleado.reactivado) {

                }

                if (empleado.activo) { $scope.nopuedoModificarFicha = false } else {
                    $scope.nopuedoModificarFicha = true
                }
                $scope.obtenerNacionalidades();
                $scope.obtenerBancos();
                $scope.obtenerEstadoCivil();
                $scope.obtenerTiposPersonales();
                $scope.obtenerCargasHorarios();
                $scope.obtenerSegurosSalud();
                $scope.obtenerLugarSegurosSalud();
                $scope.obtenerAporteSeguroLargoPlazo();
                $scope.obtenerTipoOtrosSeguros();
                $scope.obtenerTipoLicenciaVehiculo();
                $scope.abrirPopup($scope.idModalEmpleado);
                $("#" + $scope.idModalEmpleado).dialog("option", "closeOnEscape", false);
                setTimeout(function () {
                    aplicarDatePickers();
                }, 400);
            }
            $scope.cerrarDialogEmpleado = async function (form) {
                if ($scope.primeroGuardarParaCerrar == false) {
                    $scope.departamentos = []
                    $scope.provincias = []
                    $scope.localidades = []
                    await $scope.obtenerCargos()
                    await $scope.obtenerDiscapacidades()
                    $scope.ficha.editDatosLaboralesSueldo = false;
                    $scope.editDatosLaboralesFecha = false;
                    if (form.$setPristine) await form.$setPristine();
                    await $scope.cerrarPopup($scope.idModalEmpleado);

                } else {
                    $scope.mostrarMensaje("guardar nuevo reingreso para salir!")
                }
            }

            $scope.abrirDialogDepartamentoEstado = function () {
                $scope.clase = { pais: $scope.ficha.empleado.persona.pais }
                var promesa = ClasesTipo("DEP");
                promesa.then(function (entidad) {
                    $scope.tipo_edicion2 = entidad
                    $scope.obtenerNacionalidades();
                    $scope.abrirPopup($scope.idModalDepartamentoEstado);
                })

            }
            $scope.cerrarDialogDepartamentoEstado = function () {
                $scope.cerrarPopup($scope.idModalDepartamentoEstado);
            }
            $scope.abrirDialogProvincia = function () {
                $scope.clase = { departamento: $scope.ficha.empleado.persona.ciudad }

                var promesa = ClasesTipo("MUN");
                promesa.then(function (entidad) {
                    $scope.tipo_edicion2 = entidad
                    $scope.abrirPopup($scope.idModalProvincia);
                })

            }
            $scope.cerrarDialogProvincia = function () {
                $scope.cerrarPopup($scope.idModalProvincia);
            }
            $scope.abrirDialogLocalidad = function () {
                $scope.clase = { provincia: $scope.ficha.empleado.persona.provincia }

                var promesa = ClasesTipo("LOC");
                promesa.then(function (entidad) {
                    $scope.tipo_edicion2 = entidad
                    $scope.abrirPopup($scope.idModalLocalidad);
                })

            }
            $scope.cerrarDialogLocalidad = function () {
                $scope.cerrarPopup($scope.idModalLocalidad);
            }

            //$scope.cargos = [{ 'name': 'Chofer' }, { 'name': 'Ayudante de Of.' }, { 'name': 'Mecanico' }];
            // $scope.discapacidades = [{ 'name': 'Fisica' }, { 'name': 'Sensorial' }, { 'name': 'Psiquica' }, { 'name': 'Intelectual o Mental' }];
            $scope.fechacontratos = [{ 'name': '10/01/2000 - 01/01/2002' }, { 'name': '10/01/2000 - 01/01/2002' }, { 'name': '10/01/2000 - 01/01/2002' }];
            // === traductor select multiple ==========


            $scope.abrirDialogHojaVida = function (empleado) {
                $scope.obtenerDatosFichaUsuario(empleado, false);
                $scope.empleado = empleado
                $scope.empleado.activo = (empleado.eliminado) ? false : true
                if (!$scope.empleado.persona) {
                    $scope.empleado.persona = { nombre_completo: "" }
                    $scope.empleado.persona.nombre_completo = empleado.nombre_completo
                }
                $scope.obtenerGrados();
                $scope.obtenerInstituciones();
                $scope.obtenerTitulos();
                $scope.obtenerLogrosIE();
                $('#id-doc-formacion').ace_file_input('reset_input');
                $('#id-doc-experiencia').ace_file_input('reset_input');
                $('#id-doc-capacitacion').ace_file_input('reset_input');
                $('#id-doc-logro').ace_file_input('reset_input');
                var promesa = ObtenerEmpleadoHojaVida(empleado.id)
                promesa.then(function (datos) {
                    if (datos.hojaVida) {
                        if (datos.hojaVida.capacidades.length > 0) {
                            datos.hojaVida.capacidades.forEach(function (capacidad, index, array) {
                                capacidad.fechaTexto = $scope.fechaATexto(capacidad.fecha)
                            });
                        }
                        if (datos.hojaVida.logros.length > 0) {
                            datos.hojaVida.logros.forEach(function (logro, index, array) {
                                logro.fechaTexto = $scope.fechaATexto(logro.fecha)
                            });
                        }
                        if (datos.hojaVida.experienciasLaborales.length > 0) {
                            datos.hojaVida.experienciasLaborales.forEach(function (experiencia, index, array) {
                                experiencia.fecha_inicioTexto = $scope.fechaATexto(experiencia.fecha_inicio)
                                experiencia.fecha_finTexto = $scope.fechaATexto(experiencia.fecha_fin)
                            });
                        }
                        $scope.hojaVida = datos.hojaVida
                    } else {
                        $scope.hojaVida = { capacidades: [], logros: [], formacionesAcademicas: [], experienciasLaborales: [] }
                        SweetAlert.swal("", $scope.empleado.persona.nombre_completo + ' no cuenta con registro de hoja de vida.',"info")
                    }
                })
                $scope.formacionAcademica = { edit: false, eliminado: false }
                $scope.capacidad = { edit: false, eliminado: false }
                $scope.logros = { edit: false, eliminado: false }
                $scope.experienciaLaboral = { edit: false, eliminado: false }
                $scope.abrirPopup($scope.idModalHojaVida);
            }
            $scope.cerrarDialogHojaVida = function () {
                $scope.cerrarPopup($scope.idModalHojaVida);
            }

            $scope.abrirDialogNuevoFamiliar = function () {
                $scope.obtenerFamiliaRelacion();
                $scope.abrirPopup($scope.idModalNuevoFamiliar);
            }
            $scope.cerrarDialogNuevoFamiliar = function () {
                if ($scope.familiar) {

                    $scope.familiar = { edit: false }
                }
                $scope.cerrarPopup($scope.idModalNuevoFamiliar);
            }

            $scope.abrirDialogHistorialContrato = function () {
                $scope.obtenerHistorialContratos($scope.empleado)
                $scope.abrirPopup($scope.idModalHistorialContrato);
            }
            $scope.cerrarDialogHistorialContrato = function () {
                $scope.cerrarPopup($scope.idModalHistorialContrato);
            }
            $scope.seleccionarMes = function (fechaParaMes) {
                mes = $scope.meses.find(function (x) {
                    return x.id === fechaParaMes.getMonth()
                })
                return mes
            }
            $scope.generarSueldosMes = async function (mes1, mes2, mes3) {
                $scope.beneficio.primer_mes = await $scope.obtenerSueldoMesEmpleado($scope.beneficio.mes_uno, mes1._d.getFullYear())
                $scope.beneficio.segundo_mes = await $scope.obtenerSueldoMesEmpleado($scope.beneficio.mes_dos, mes2._d.getFullYear())
                $scope.beneficio.tercer_mes = await $scope.obtenerSueldoMesEmpleado($scope.beneficio.mes_tres, mes3._d.getFullYear())
                $scope.calcularPromedioFiniquito($scope.beneficio)
                $scope.$evalAsync()
            }
            $scope.abrirDialogBeneficiosSociales = async function (empleado, beneficio) {
                $scope.empleado = empleado
                let mes1, mes2, mes3;
                if (empleado.fecha_inicio) {
                    if (beneficio) {
                        $scope.beneficio = beneficio
                        let fecha = null
                        let fechaActual = new Date()
                        $scope.beneficio.fecha_elaboracion = ($scope.beneficio.fecha_elaboracion) ? $scope.fechaATexto($scope.beneficio.fecha_elaboracion) : $scope.fechaATexto(new Date())
                        if ($scope.beneficio.fecha_asistensia) $scope.beneficio.fecha_asistensia = $scope.fechaATexto($scope.beneficio.fecha_asistensia)
                        $scope.beneficio.fecha_ingreso = ($scope.beneficio.fecha_ingreso) ? $scope.fechaATexto($scope.beneficio.fecha_ingreso) : $scope.fechaATexto(empleado.fecha_inicio)
                        if ($scope.beneficio.fecha_retiro) {
                            if (!$scope.edicionFiniquito) {
                                let date = new Date($scope.beneficio.fecha_retiro), y = date.getFullYear(), m = date.getMonth();
                                let lastDay = new Date(y, m + 1, 0); 
                                if (date.getDate() === lastDay.getDate()) {
                                    // Restar 2 mes a la fecha actual 
                                    mes1 = moment(date).subtract(2, 'months');
                                    mes2 = moment(date).subtract(1, 'months');
                                    mes3 = moment(date).subtract(0, 'months');
                                } else {
                                    // Restar 3 mes a la fecha actual 
                                    mes1 = moment(date).subtract(3, 'months');
                                    mes2 = moment(date).subtract(2, 'months');
                                    mes3 = moment(date).subtract(1, 'months');
                                }
                                $scope.beneficio.mes_uno = $scope.seleccionarMes(mes1._d)
                                $scope.seleccionarMesesFiniquito($scope.beneficio)
                                $scope.beneficio.mes_uno = $scope.beneficio.mes_uno.id
                                $scope.beneficio.mes_dos = $scope.beneficio.mes_dos.id
                                $scope.beneficio.mes_tres = $scope.beneficio.mes_tres.id
                            }
                            $scope.beneficio.fecha_retiro = $scope.fechaATexto($scope.beneficio.fecha_retiro)

                        }
                        var tipo = false
                        if (empleado.fecha_expiracion) {
                            fecha = $scope.fechaATexto(empleado.fecha_expiracion)
                            fechaActual = new Date(empleado.fecha_expiracion)
                            tipo = true
                        }
                        if ($scope.beneficio.cuenta) {
                            $scope.beneficio.tipo_pago = true
                        }
                        $scope.beneficio.mes_uno = $scope.meses[$scope.beneficio.mes_uno]
                        $scope.beneficio.mes_dos = $scope.meses[$scope.beneficio.mes_dos]
                        $scope.beneficio.mes_tres = $scope.meses[$scope.beneficio.mes_tres]

                        $scope.beneficio.totalAguinaldo = $scope.CalcularAguinaldoNavidad2($scope.beneficio)
                        let fechaAnterior = new Date(empleado.fecha_inicio)
                        $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual, 1)
                        $scope.tiempoTrabajado.dias
                        let fechaElaboracion = $scope.fechaATexto(new Date())
                        //$scope.beneficio = { fecha_elaboracion: fechaElaboracion, tipo_beneficio: tipo, anios: 0, meses: 0, dias: 0, fecha_elaboracion: $scope.fechaATexto(new Date()), fecha_ingreso: $scope.fechaATexto(empleado.fecha_inicio), fecha_retiro: fecha, ingresos: [], deducciones: [] }
                        $scope.obtenerbeneficiosSociales($scope.tiempoTrabajado)
                        $scope.deduccion = {}
                        $scope.ingreso = {}
                        $scope.vacacion = {
                            sabado: false,
                            inicio_tipo: false,
                            fin_tipo: false,
                            aniosDisponibles: 0,
                            historial: null
                        }
                        $scope.beneficio.anios = 0
                        $scope.beneficio.meses = 0
                        $scope.beneficio.dias = 0
                        $scope.beneficio.ingresos = []
                        $scope.beneficio.deducciones = []
                        $scope.beneficio.promedio = (($scope.beneficio.usar_primer_mes ? $scope.beneficio.primer_mes : 0) + ($scope.beneficio.usar_segundo_mes ? $scope.beneficio.segundo_mes : 0) + $scope.beneficio.tercer_mes) /
                            (!$scope.beneficio.usar_primer_mes ? !$scope.beneficio.usar_segundo_mes ? 1 : 2 : 3)
                        $scope.beneficio.deduccionEingresos.forEach(function (deduccionEIngreso, index, array) {
                            if (deduccionEIngreso.tipo.nombre_corto == "OTRING") {
                                $scope.beneficio.ingresos.push(deduccionEIngreso)
                            } else {
                                $scope.beneficio.deducciones.push(deduccionEIngreso)
                            }
                            if (index === (array.length - 1)) {
                                $scope.beneficio = $scope.calcularDesaucio($scope.beneficio, true)
                                $scope.sumarTotalDeducciones($scope.beneficio)
                            }
                        });
                        if (!$scope.edicionFiniquito) {
                            $scope.generarSueldosMes(mes1, mes2, mes3)
                        }
                    } else {
                        let fecha = null
                        let fechaActual = new Date()
                        let tipo = false
                        let mes1, mes2, mes3;
                        if (empleado.fecha_expiracion) {
                            fecha = $scope.fechaATexto(empleado.fecha_expiracion)
                            fechaActual = new Date(empleado.fecha_expiracion)
                            tipo = true
                        }
                        let fechaAnterior = new Date(empleado.fecha_inicio)
                        $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual, 1)
                        $scope.tiempoTrabajado.dias
                        let fechaElaboracion = $scope.fechaATexto(new Date())
                        $scope.beneficio = { fecha_elaboracion: fechaElaboracion, tipo_beneficio: tipo, anios: 0, meses: 0, dias: 0, fecha_elaboracion: $scope.fechaATexto(new Date()), fecha_ingreso: $scope.fechaATexto(empleado.fecha_inicio), fecha_retiro: fecha, ingresos: [], deducciones: [], cargo_imprecion: $scope.diccionario.CARGO_FINIQUITO, empleado_cargo_impresion: $scope.diccionario.NOMBRE_FINIQUITO }
                        $scope.obtenerbeneficiosSociales($scope.tiempoTrabajado)
                        $scope.deduccion = {}
                        $scope.ingreso = {}

                        $scope.vacacion = {
                            sabado: false,
                            inicio_tipo: false,
                            fin_tipo: false,
                            aniosDisponibles: 0,
                            historial: null
                        }
                        let date = new Date(), y = date.getFullYear(), m = date.getMonth();
                        let lastDay = new Date(y, m + 1, 0);

                        if (date.getDate() === lastDay.getDate()) {
                            // Restar 3 mes a la fecha actual 
                            mes1 = moment(date).subtract(2, 'months');
                            mes2 = moment(date).subtract(1, 'months');
                            mes3 = moment(date).subtract(0, 'months');
                        } else {
                            // Restar 4 mes a la fecha actual 
                            mes1 = moment(date).subtract(3, 'months');
                            mes2 = moment(date).subtract(2, 'months');
                            mes3 = moment(date).subtract(1, 'months');
                        }
                        $scope.beneficio.mes_uno = $scope.seleccionarMes(mes1._d)
                        $scope.seleccionarMesesFiniquito($scope.beneficio)
                        $scope.generarSueldosMes(mes1, mes2, mes3)
                    }
                    $scope.obtenerMotivosRetiro();
                    $scope.abrirPopup($scope.idModalBeneficiosSociales);
                }
                else {
                    $timeout(function () {
                        $scope.$apply(function () {
                            $scope.mostrarMensaje("No cuenta con ficha actualmente, crear ficha empleado!")
                        });
                    }, 200);

                }
            }
            $scope.verVacaciones = function () {
                $scope.verVacacion = ($scope.verVacacion) ? false : true
            }
            $scope.generarHistorialVacacionFIniquito = function (empleado, inf) {
                var promesa = HistorialGestionesVacacion(empleado.id_ficha)
                promesa.then(function (dato) {
                    if (dato.length > 0) {
                        let historialVacacion = [];
                        let b = dato[(dato.length - 1)].gestion
                        let anioConfiguracion = dato[(dato.length - 1)].anio
                        let anos = $scope.obtenerAnios(b)
                        anos.splice(0, 1)
                        if (anos.length > 0) {
                            anos.forEach(function (_, index, array) {
                                anioConfiguracion = anioConfiguracion + 1
                                let config = null
                                if (anioConfiguracion <= 5) {
                                    config = $scope.configuracionesVacacion[0].dias
                                } else if (anioConfiguracion <= 10) {
                                    config = $scope.configuracionesVacacion[1].dias
                                } else if (anioConfiguracion > 10) {
                                    config = $scope.configuracionesVacacion[2].dias
                                }
                                let datohistorialVacacion = {
                                    gestion: _,
                                    anio: anioConfiguracion,
                                    aplicadas: config,
                                    tomadas: 0
                                }
                                historialVacacion.push(datohistorialVacacion)
                            });
                        }
                        if (historialVacacion.length > 0) {
                            let promesa = GuardarHistorialVacacion(empleado.id_ficha, historialVacacion)
                            promesa.then(function (datos) {
                                $scope.mostrarMensaje(datos.mensaje)
                                $scope.obtenerHistorialGestionesVacacion(empleado, false, true)
                                $scope.abrirDialogBeneficiosSociales(empleado, inf.beneficio)
                            })
                        } else {
                            $scope.obtenerHistorialGestionesVacacion(empleado, false, true)
                            $scope.abrirDialogBeneficiosSociales(empleado, inf.beneficio)
                        }
                    } else {
                        $scope.mostrarMensaje("No cuenta con ficha del empleado actualizada, actualizar ficha empleado")
                    }
                })
            }
            $scope.abrirDialogBeneficiosSociales2 = function (empleado, edit) {
                if (!empleado.regularizado) {
                    return SweetAlert.swal("", 'El personal no regularizado no se considera para planilla de sueldos, finiquitos y quinquenios.', "warning");
                }
                $scope.edicionFiniquito = false
                $scope.verVacacion = false
                var promesa2 = ObtenerFiniquitoEmpleado(empleado.id_ficha)
                promesa2.then(function (dato) {
                    if (dato.beneficio) {
                        if (dato.beneficio.fecha_ingreso) {
                            if (edit != true) {
                                $scope.abrirModalVerificarCuenta(empleado, 'finiquito')
                            } else {
                                $scope.edicionFiniquito = true
                                $scope.generarHistorialVacacionFIniquito(empleado, dato)
                            }
                        } else {
                            $scope.generarHistorialVacacionFIniquito(empleado, dato)
                        }
                    } else {
                        $scope.generarHistorialVacacionFIniquito(empleado, dato)
                    }
                })

            }
            $scope.obtenerSueldoMesEmpleado = async function (mes, anio) {
                try {
                    let res = await ObtenerSueldoMesEmpleado(mes, anio, $scope.empleado.id_ficha)
                    return res.sueldo
                } catch (error) {
                    console.log(error)
                }
            }
            $scope.cerrarDialogBeneficiosSociales = function () {
                $scope.cerrarPopup($scope.idModalBeneficiosSociales);
            }

            $scope.abrirDialogDetalleVacaciones = function () {
                $scope.abrirPopup($scope.idModalDetalleVacaciones);
            }
            $scope.cerrarDialogDetalleVacaciones = function () {
                $scope.prorrateo = false;
                $scope.obtenerHistorialGestionesVacacion($scope.empleado, false);
                $scope.cerrarPopup($scope.idModalDetalleVacaciones);
            }

            $scope.reporteDetallesVacaciones = function (historial, empleado) {
                var destalleVacaciones = historial;
                var empleado = empleado;

                var doc = new PDFDocument({ size: [612, 792], compress: false, margin: 10 });
                var stream = doc.pipe(blobStream());

                var y = 120, itemsPorPagina = 32, items = 0, pagina = 1, totalPaginas = Math.ceil(destalleVacaciones.length / itemsPorPagina);

                $scope.dibujarCabeceraImpresionPDFDetalleVacaciones(doc, destalleVacaciones, empleado, pagina, totalPaginas);
                var index = 0;
                for (var i = 0; i < destalleVacaciones.length; i++) {

                    doc.font("Helvetica", 8);
                    doc.text(destalleVacaciones[i].gestion, 40, y);
                    doc.text(destalleVacaciones[i].anio, 105, y);
                    doc.text(destalleVacaciones[i].aplicadas, 137, y);
                    doc.text(destalleVacaciones[i].tomadas, 190, y);
                    doc.text(destalleVacaciones[i].aplicadas - destalleVacaciones[i].tomadas, 240, y);

                    y = y + 20;

                    items = items + 1;

                    if (items == itemsPorPagina) {
                        doc.addPage({ size: [612, 792], margin: 10 });
                        y = 120;
                        items = 0;
                        pagina = pagina + 1;
                        $scope.dibujarCabeceraImpresionPDFDetalleVacaciones(doc, destalleVacaciones, empleado, pagina, totalPaginas);
                    }
                }

                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
                blockUI.stop();
            }

            $scope.dibujarCabeceraImpresionPDFDetalleVacaciones = function (doc, destalleVacaciones, empleado, pagina, totalPaginas) {

                doc.font("Helvetica-Bold", 17);
                doc.text("VACACIONES", 0, 55, { align: 'center' });
                doc.font("Helvetica-Bold", 13);
                doc.text(empleado.nombre_completo, 0, 75, { align: 'center' });
                doc.font("Helvetica-Bold", 10);
                doc.text("Fecha de Ingreso: " + $scope.fechaATexto(empleado.fecha_inicio), 40, 90);
                doc.font("Helvetica-Bold", 8);
                doc.text("Gestion", 40, 110);
                doc.text("Año", 100, 110);
                doc.text("Aplicadas", 130, 110);
                doc.text("Tomadas", 180, 110);
                doc.text("Restante", 230, 110);

            }

            $scope.reporteExcelDetallesVacaciones = function (destalleVacaciones, empleado) {
                blockUI.start();
                var data = [["N°", "NOMBRE", "FECHA", "GESTION", "AÑO", "DIAS APLICADOS",
                    "DIAS TOMADOS", "DIAS RESTANTES"]];
                var index = 0;
                for (var i = 0; i < destalleVacaciones.length; i++) {
                    var columns = [];
                    index = index + 1
                    columns.push(index);
                    columns.push(empleado.nombre_completo);
                    columns.push(empleado.fecha_inicio)
                    columns.push(destalleVacaciones[i].gestion);
                    columns.push(destalleVacaciones[i].anio);
                    columns.push(destalleVacaciones[i].aplicadas);
                    columns.push(destalleVacaciones[i].tomadas);
                    columns.push(destalleVacaciones[i].aplicadas - destalleVacaciones[i].tomadas);


                    data.push(columns);

                }
                var ws_name = "SheetJS";
                var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-DETALLES-VACACIONES.xlsx");
                blockUI.stop();
            }

            $scope.abrirDialogBitacoraFicha = function () {
                var promesa = VerBitacoraFicha($scope.ficha.id_empleado)
                promesa.then(function (dato) {
                    $scope.bitacoras_fichas = dato[0]
                    $scope.bitacora_ficha = $scope.bitacoras_fichas[0]
                    $scope.bitacoraCambios = Object.assign([], dato[1])
                    $scope.bitacoraCambiosFiltrado = $scope.bitacoraCambios.filter(a => a.id_ficha === $scope.bitacora_ficha.id)
                    $scope.abrirPopup($scope.idModalBitacoraFicha);
                })
            }
            $scope.seleccionBitacora = function () {
                $scope.bitacoraCambiosFiltrado = $scope.bitacoraCambios.filter(a => a.id_ficha === $scope.bitacora_ficha.id)
            }

            $scope.cerrarDialogBitacoraFicha = function () {
                $scope.cerrarPopup($scope.idModalBitacoraFicha);
            }
            $scope.abrirDialogAnticipoExtraordinario = function (empleado) {
                if (empleado.activo) {
                    $scope.empleado = empleado
                    if (empleado.haber_basico) {

                        $scope.obtenerAnticiposExtra(empleado)
                        $scope.abrirPopup($scope.idModalAnticipoExtraordinario);
                    }
                    else {
                        $timeout(function () {
                            $scope.$apply(function () {
                                $scope.mostrarMensaje("No cuenta con haber basico actualizar ficha empleado!")
                            });
                        }, 200);
                    }
                }
            }
            $scope.obtenerAnticiposExtra = function (empleado) {
                // var mes = new Date().getMonth()
                // $scope.mesActual = mes
                // var gestion = String(new Date().getFullYear())
                // var ultimodia = new Date()
                // $scope.listaAnticipos = []
                // $scope.filtroAnticipo = { mes: { id: mes }, gestion: gestion }
                // var date = new Date();
                // var primerDia = new Date(date.getFullYear(), date.getMonth(), 1);
                // var ultimoDia = new Date(date.getFullYear(), date.getMonth() + 1, 0);
                // var filtro = { inicio: primerDia, fin: ultimoDia, nombre: 'ORDI', id_empresa: 0 }
                // $scope.anticipo_ordinaroOextra = 0;
                // $scope.obtenerListaAnticipos(filtro, empleado.id)
                let datosFiltro = {}
                if (datosFiltro.fecha_final === "" || datosFiltro.fecha_final === null || datosFiltro.fecha_final === undefined) {
                    datosFiltro.fecha_final = new Date()
                    if (datosFiltro.fecha_inicial == "" || datosFiltro.fecha_inicial === null || datosFiltro.fecha_inicial === undefined) {
                        datosFiltro.fecha_inicial = new Date(datosFiltro.fecha_final.getFullYear(), datosFiltro.fecha_final.getMonth() - 1, datosFiltro.fecha_final.getDate())
                    } else {
                        datosFiltro.fecha_inicial = new Date(datosFiltro.fecha_inicial.split('/').reverse())
                    }
                } else {
                    datosFiltro.fecha_final = new Date(datosFiltro.fecha_final.split('/').reverse())
                    if (datosFiltro.fecha_inicial == "" || datosFiltro.fecha_inicial === null || datosFiltro.fecha_inicial === undefined) {
                        datosFiltro.fecha_inicial = new Date(datosFiltro.fecha_final.getFullYear(), datosFiltro.fecha_final.getMonth() - 1, datosFiltro.fecha_final.getDate())
                    } else {
                        datosFiltro.fecha_inicial = new Date(datosFiltro.fecha_inicial.split('/').reverse())
                    }
                }
                $scope.anticipo_extraordinaro = 0;

                var filtro = { inicio: datosFiltro.fecha_inicial, fin: datosFiltro.fecha_final, nombre: "EXTRAORDI", id_empresa: $scope.usuario.id_empresa }
                $scope.obtenerListaAnticipos(filtro, $scope.empleado.id_ficha)
            }
            $scope.cerrarDialogAnticipoExtraordinario = function () {
                $scope.cerrarPopup($scope.idModalAnticipoExtraordinario);
            }
            $scope.abrirDialogNuevoPrestamo = function (empleado) {
                $scope.obtenerTiposPrestamos();
                if (empleado.activo) {
                    $scope.dynamicPopoverHijos = {
                        templateUrl: 'myPopoverHijosTemplate.html',
                    };

                    var promesa = ListaHijosEmpleado(empleado.id)
                    promesa.then(function (hijos) {
                        var fechaActual = new Date()
                        hijos.forEach(function (hijo, index, array) {
                            hijo.edad = $scope.obtenerEdad(hijo.persona.fecha_nacimiento);
                            if (hijo.afiliado) {
                                hijo.afiliado = "SI";
                            } else {
                                hijo.afiliado = "NO";
                            }
                        });
                        $scope.hijosEmpleado = hijos;
                    });

                    $scope.empleado = empleado
                    $scope.prestamo = {}
                    $scope.prestamo.descuento_planilla = true;
                    if (empleado.haber_basico) {
                        $scope.abrirPopup($scope.idModalNuevoPrestamo);
                    } else {
                        $timeout(function () {
                            $scope.$apply(function () {
                                $scope.mostrarMensaje("No cuenta con haber basico actualizar ficha empleado!")
                            });
                        }, 200);

                    }
                }
            }
            $scope.cerrarDialogNuevoPrestamo = function () {
                $scope.cerrarPopup($scope.idModalNuevoPrestamo);
            }
            $scope.fechaIngresoEmpleadoTexto = "";
            $scope.abrirDialogAusenciasVacaciones = function (empleado) {
                $scope.fechaIngresoEmpleadoTexto = $scope.fechaATexto(empleado.fecha_inicio);
                $scope.empleado = empleado
                $scope.ausencia = { primera_baja: false }
                var inicioTime = new Date(); inicioTime.setHours(0, 0, 0, 0);
                var finTime = new Date(); finTime.setHours(23, 59, 0, 0);
                $scope.otraAusencia = { fecha_inicio_hora: inicioTime, fecha_fin_hora: finTime }
                $scope.vacacion = {
                    sabado: false,
                    inicio_tipo: true,
                    fin_tipo: true,
                    aniosDisponibles: 0,
                    historial: null
                }

                if (empleado.genero == "MASCULINO") {
                    $scope.vacacion.sabado = true;
                } else {
                    $scope.vacacion.sabado = false;
                }
                $scope.feriados = []
                $scope.listaFeriado()
                $scope.obtenerHistorialGestionesVacacion(empleado, true)


            }
            $scope.abriirmodelAusenciasVacas = function (empleado) {
                $scope.previewGestiones = [];
                let historialVacacion = []
                if (empleado.activo) {
                    if (empleado.fecha_inicio) {
                        $scope.ObtenerEstadosAusencias();
                        let promesa = HistorialGestionesVacacion(empleado.id_ficha)
                        promesa.then(function (dato) {
                            let b = dato[(dato.length - 1)].gestion
                            let anos = $scope.obtenerAnios(b)
                            anos.splice(0, 1);
                            if (anos.length > 0) {
                                anos.forEach(function (_, index, array) {
                                    let anioConfiguracion = index + 1
                                    let config = null
                                    if (anioConfiguracion <= 5) {
                                        config = $scope.configuracionesVacacion[0].dias
                                    } else if (anioConfiguracion <= 10) {
                                        config = $scope.configuracionesVacacion[1].dias
                                    } else if (anioConfiguracion > 10) {
                                        config = $scope.configuracionesVacacion[2].dias
                                    }
                                    let datohistorialVacacion = {
                                        gestion: _,
                                        anio: index + 1,
                                        aplicadas: config,
                                        tomadas: 0
                                    }
                                    historialVacacion.push(datohistorialVacacion)
                                });
                            }
                            if (historialVacacion.length > 0) {
                                let promesa = GuardarHistorialVacacion(empleado.id_ficha, historialVacacion)
                                promesa.then(function (datos) {
                                    $scope.mostrarMensaje(datos.mensaje)
                                    $scope.abrirDialogAusenciasVacaciones(empleado)
                                })
                            } else {
                                $scope.abrirDialogAusenciasVacaciones(empleado)
                            }

                        })
                    }
                    else {
                        $timeout(function () {
                            $scope.$apply(function () {
                                $scope.mostrarMensaje("No cuenta con ficha actualmente, crear ficha empleado!")
                            });
                        }, 200);
                    }
                }
            }

            $scope.cerrarDialogAusenciasVacaciones = function () {
                $scope.prorrateo = false;
                $scope.cerrarPopup($scope.idModalAusenciasVacaciones);
            }

            $scope.abrirDialogTipoBaja = function (tiposAusenciasMedicas) {
                $scope.obtenertiposAusenciaMedica();
                $scope.clase = {}
                if (tiposAusenciasMedicas.ausencias) {
                    $scope.tiposAusencia = tiposAusenciasMedicas.ausencias
                } else {
                    $scope.tiposAusencia = []
                }
                $scope.abrirPopup($scope.idModalTipoBaja);
            }
            $scope.cerrarDialogTipoBaja = function () {
                $scope.cerrarPopup($scope.idModalTipoBaja);
            }

            /* initialize the full calendar
            -----------------------------------------------------------------*/
            $scope.GuardarFeriadosCalendario = function () {
                var datos = $scope.calendar.fullCalendar('clientEvents');
                var feriados = []
                if (datos.length > 0) {
                    datos.forEach(function (feriado, index, array) {
                        if (feriado.id == undefined) {
                            var dstart = feriado.start._d;
                            dstart.setDate(dstart.getDate() + 1);
                            var feriado = {
                                start: dstart,
                                end: feriado.end._d
                            }
                            feriados.push(feriado)
                        }

                        if (index === (array.length - 1)) {
                            var promesa = NuevoFeriado($scope.usuario.id_empresa, feriados, $scope.feriadosEliminados)
                            promesa.then(function (dato) {
                                $scope.listaFeriado()
                                $scope.feriadosEliminados = []
                                $scope.cerrarDialogFeriados()
                                $scope.mostrarMensaje(dato.mensaje)
                            })
                        }
                    });
                } else {
                    var promesa = NuevoFeriado($scope.usuario.id_empresa, feriados, $scope.feriadosEliminados)
                    promesa.then(function (dato) {
                        $scope.listaFeriado()
                        $scope.feriadosEliminados = []
                        $scope.cerrarDialogFeriados()
                        $scope.mostrarMensaje(dato.mensaje)
                    })
                }

            }
            $scope.agregarFeriado = function (start, end, allDay) {
                $scope.calendar.fullCalendar('renderEvent',
                    {
                        /* identificador: 0, */
                        title: 'Feriado',
                        start: start,
                        end: end,
                        allDay: allDay,
                        className: 'label-info'
                    },
                    true // make the event "stick"
                );
                $scope.calendar.fullCalendar('unselect');
            }

            $scope.obtenerFechasCalendarioFeriado = function () {
                $('#calendar').fullCalendar('removeEvents');
                var datos = []
                $scope.FeriadosCalendario.forEach(function (element, index, array) {
                    var a = { id: element.id, title: 'Feriado', start: new Date(element.fecha_inicio), end: new Date(element.fecha_fin), className: 'label-info' }
                    datos.push(a)
                    if (index === (array.length - 1)) {
                        $scope.addEvents(datos);
                    }
                }, this);
            }

            $scope.listaFeriado = function () {
                $scope.ListaDiasFeriado = []
                promesa = ListaFeriados($scope.usuario.id_empresa)

                promesa.then(function (dato) {
                    dato.forEach(function (feriado, index, array) {
                        var rango = getDates(new Date(feriado.fecha_inicio), new Date(feriado.fecha_fin));
                        /*          $scope.ListaDiasFeriado.concat(rango) */
                        $scope.ListaDiasFeriado.push.apply($scope.ListaDiasFeriado, rango)


                    });
                    $scope.FeriadosCalendario = dato;
                })
            }
            $scope.addEvents = function (datos) {
                $scope.calendar.fullCalendar('addEventSource', datos)
            }

            $scope.calendar = $('#calendar').fullCalendar({
                buttonHtml: {
                    prev: '<i class="ace-icon fa fa-chevron-left"></i>',
                    next: '<i class="ace-icon fa fa-chevron-right"></i>'
                },
                height: 400,
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek, agendaDay'
                },
                events: [
                    /*  {
                         title: 'Feriado',
                         start: new Date(y, m, 1),
                         className: 'label-important'
                     } */

                ],
                monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
                dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
                dayNamesShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'],
                buttonText: {
                    today: 'hoy',
                    month: 'mes',
                    week: 'semana',
                    day: 'día',
                    list: 'lista'
                },
                editable: true,
                selectable: true,

                select: function (start, end, allDay) {
                    var datos = $scope.calendar.fullCalendar('clientEvents');
                    var bandera = true
                    if (datos.length > 0) {
                        datos.forEach(function (feriado, index, array) {
                            var inicio = $scope.fechaATexto(feriado.start._d)
                            var inicio2 = $scope.fechaATexto(start._d)
                            if (inicio == inicio2) {
                                bandera = false
                            }
                            if (index === (array.length - 1)) {
                                if (bandera) {
                                    $scope.agregarFeriado(start, end, allDay)
                                }
                            }
                        });
                    } else {
                        $scope.agregarFeriado(start, end, allDay)
                    }
                },
                eventClick: function (calEvent, jsEvent, view) {
                    if (calEvent.id != undefined) {
                        var feriado = {
                            id: calEvent.id

                        }
                        $scope.feriadosEliminados.push(feriado)
                        $scope.calendar.fullCalendar('removeEvents', function (ev) {
                            return (ev._id == calEvent._id);
                        })

                    } else {
                        $scope.calendar.fullCalendar('removeEvents', function (ev) {
                            return (ev._id == calEvent._id);
                        })
                    }
                }
            });

            $scope.abrirDialogFeriados = function () {
                $scope.abrirPopup($scope.idModalFeriados);
                $scope.feriadosEliminados = []
                $('#calendar').fullCalendar('render');
                $scope.obtenerFechasCalendarioFeriado()
            }
            $scope.cerrarDialogFeriados = function () {
                $scope.cerrarPopup($scope.idModalFeriados);
            }
            $scope.abrirDialogHitorialVacaciones = function () {
                $scope.filtroVacacion = {}
                $scope.obtenerHistorialEmpleadVacacion($scope.filtroVacacion)
                $scope.obtenerHistorialGestionesVacacion($scope.empleado, false, false)
                $scope.abrirPopup($scope.idModalHitorialVacaciones);
            }
            $scope.cerrarDialogHitorialVacaciones = function () {
                $scope.cerrarPopup($scope.idModalHitorialVacaciones);
            }
            var date = new Date();
            var d = date.getDate();
            var m = date.getMonth();
            var y = date.getFullYear();
            $scope.selectionday = [];
            $scope.totalHoras = moment("00:00", "HH:mm");


            $scope.calendarCompensacion = $('#calendar-compensacion').fullCalendar({
                buttonHtml: {
                    prev: '<i class="ace-icon fa fa-chevron-left"></i>',
                    next: '<i class="ace-icon fa fa-chevron-right"></i>'
                },
                height: 400,
                defaultView: 'agendaWeek',
                allDaySlot: false,
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek, agendaDay'
                },
                events: [
                    {
                        title: 'Feriado',
                        start: new Date(y, m, 1),
                        className: 'label-important'
                    }

                ],
                monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
                dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
                dayNamesShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'],
                buttonText: {
                    today: 'hoy',
                    month: 'mes',
                    week: 'semana',
                    day: 'día',
                    list: 'lista'
                },
                editable: true,
                selectable: true,
                // slotMinutes: 15,
                // slotLabelInterval: 15,
                // slotDuration: '00:15:00',
                select: function (start, end) {
                    $scope.horas = moment.utc(moment(end, "DD/MM/YYYY HH:mm:ss").diff(moment(start, "DD/MM/YYYY HH:mm:ss"))).format("HH:mm:ss");
                    $scope.Event = $scope.calendarCompensacion.fullCalendar('renderEvent',
                        {
                            start: start,
                            end: end,
                            className: 'label-info'
                        },
                        true // make the event "stick"
                    );

                    $scope.selectionday.push({ '_id': $scope.Event[0]._id, 'fecha_real': start, 'fecha': start.format("DD-MM-YYYY"), 'hora_inicio': start.format("HH:mm:ss"), 'hora_fin': end.format("HH:mm:ss"), 'total': $scope.horas });
                    $scope.sumarTotalHoras();
                    $scope.$apply();
                    $scope.calendarCompensacion.fullCalendar('unselect');
                },
                eventResize: function (event, delta, revertFunc) {
                    var end = event.end;
                    var start = event.start;
                    var idx = event._id;
                    $scope.horas = moment.utc(moment(end, "DD/MM/YYYY HH:mm:ss").diff(moment(start, "DD/MM/YYYY HH:mm:ss"))).format("HH:mm");
                    function Update(key, value) {
                        for (var i = 0; i < $scope.selectionday.length; i++) {
                            if ($scope.selectionday[i]._id == key) {
                                $scope.selectionday[i].hora_fin = value;
                                $scope.selectionday[i].total = $scope.horas;
                                break;
                            }
                        }
                    }
                    Update(idx, end.format("HH:mm"));
                    $scope.sumarTotalHoras();
                    $scope.$apply();
                },
                eventDrop: function (event, delta, revertFunc) {

                    var start = event.start;
                    var end = event.end;
                    $scope.horas = moment.utc(moment(end, "DD/MM/YYYY HH:mm:ss").diff(moment(start, "DD/MM/YYYY HH:mm:ss"))).format("HH:mm");

                    function Update(key, valueStart, valueEnd) {
                        for (var i = 0; i < $scope.selectionday.length; i++) {
                            if ($scope.selectionday[i]._id == key) {
                                $scope.selectionday[i].fecha = valueStart.format("DD-MM-YYYY");
                                $scope.selectionday[i].hora_inicio = valueStart.format("HH:mm");
                                $scope.selectionday[i].hora_fin = valueEnd.format("HH:mm");
                                $scope.selectionday[i].total = $scope.horas;
                                break;
                            }
                        }
                    }
                    Update(event._id, start, end);
                    $scope.sumarTotalHoras();
                    $scope.$apply();
                },
                eventClick: function (calEvent, jsEvent, view) {
                    //display a modal
                    var modal =
                        '<div class="modal fade modal-delete">\
			  <div class="modal-dialog">\
			   <div class="modal-content">\
				 <div class="modal-body">\
				   <button type="button" class="close" data-dismiss="modal" style="margin-top:-10px;">&times;</button>\
				   <form class="no-margin">\
					  <label> Eliminar ' + calEvent.title + ' &nbsp;</label>\
				   </form>\
				 </div>\
				 <div class="modal-footer">\
					<button type="button" class="btn btn-sm btn-danger" data-action="delete"><i class="ace-icon fa fa-trash-o"></i>Eliminar</button>\
					<button type="button" class="btn btn-sm" data-dismiss="modal"><i class="ace-icon fa fa-times"></i> Cancel</button>\
				 </div>\
			  </div>\
			 </div>\
			</div>';


                    var modal = $(modal).appendTo('body');
                    modal.find('button[data-action=delete]').on('click', function () {
                        $scope.calendarCompensacion.fullCalendar('removeEvents', function (ev) {
                            return (ev._id == calEvent._id);
                        });
                        $scope.selectionday.splice(calEvent._id, 1);
                        $scope.$apply();
                        modal.modal("hide");
                    });

                    modal.modal('show').on('hidden', function () {
                        modal.remove();
                    });

                }
            });

            $scope.sumarTotalHoras = function () {
                var totalHoras = "";
                var timeHoras = 0;
                var timeMinutos = 0;
                for (var i = 0; i < $scope.selectionday.length; i++) {
                    var minutos = $scope.selectionday[i].total.split(':')[1];
                    var horas = $scope.selectionday[i].total.split(':')[0];

                    timeHoras = timeHoras + parseInt(horas);
                    timeMinutos = timeMinutos + parseInt(minutos);
                    if (timeMinutos >= 60) {
                        timeMinutos = timeMinutos - 60;
                        timeHoras = timeHoras + 1;
                    }
                    totalHoras = String("0" + timeHoras).slice(-2) + ':' + String("0" + timeMinutos).slice(-2) + ":00";
                }
                $scope.SumaTotalHoras = totalHoras;
            }

            $scope.abrirDialogCompensacion = function () {
                $scope.abrirPopup($scope.idModalCompensacion);
                $('#calendar-compensacion').fullCalendar('render');
            }
            $scope.cerrarDialogCompensacion = function () {
                $scope.cerrarPopup($scope.idModalCompensacion);
            }
            $scope.abrirDialogHistorialAusencias = function () {
                var filtroAusencias = { inicio: 0, fin: 0, tipo_ausencia: 0 }
                $scope.filtroOtrasAusencias = {}
                $scope.obtenerHistorialEmpleadoOtrasAusencias(filtroAusencias)
                $scope.abrirPopup($scope.idModalHistorialAusencias);
            }
            $scope.cerrarDialogHistorialAusencias = function () {
                $scope.cerrarPopup($scope.idModalHistorialAusencias);
            }
            $scope.abrirDialogHistorialAusenciaMedica = function () {
                var filtroAusencias = { inicio: 0, fin: 0, tipo_ausencia: 0 }
                $scope.filtroAusencias = {}
                $scope.obtenertiposAusenciaMedica();
                $scope.obtenerHistorialEmpleadoAusenciasMedicas(filtroAusencias)
                $scope.abrirPopup($scope.idModalHistorialAusenciaMedica);
            }
            $scope.cerrarDialogHistorialAusenciaMedica = function () {
                $scope.cerrarPopup($scope.idModalHistorialAusenciaMedica);
            }
            $scope.abrirDialogTipoAusencia = function (tiposOtrasAusencias) {
                $scope.tiposOtras = tiposOtrasAusencias.ausencias
                $scope.clase = {}
                $scope.abrirPopup($scope.idModalTipoAusencia);
            }
            $scope.cerrarDialogTipoAusencia = function () {
                $scope.cerrarPopup($scope.idModalTipoAusencia);
            }
            $scope.abrirDialogRolTurnosDesteMatriz = function (ficha) {
                let empleado = ficha.empleado
                empleado.activo = !ficha.empleado.eliminado ? true : false
                empleado.fecha_inicio = ficha.fecha_inicio
                empleado.id_ficha = ficha.id
                $scope.abrirDialogRolTurnos(empleado)

            }
            $scope.abrirDialogRolTurnos = function (empleado) {

                if (empleado.activo) {
                    $scope.obtenerGruposRol();
                    $scope.obtenerClasificacionRol();
                    $scope.obtenerlistaRolTurno(empleado.id_ficha)
                    if (empleado.fecha_inicio) {


                        $scope.empleado = empleado
                        var campo = {}
                        $scope.centrosDeCostos.forEach(function (centro, index, array) {
                            if (centro.nombre == empleado.campamento) {
                                campo = centro
                            }
                            if (index === (array.length - 1)) {
                                $scope.rolTurno = { campo: campo, tipo: false, turno_dia: true, fecha_fin: "", dias_trabajo: null, dias_descanso: null, grupo: "", id_ficha: null }
                                $scope.abrirPopup($scope.idModalRolTurnos);
                            }

                        })

                    }
                    else {
                        $timeout(function () {
                            $scope.$apply(function () {
                                $scope.mostrarMensaje("No cuenta con ficha actualmente, crear ficha empleado!")
                            });
                        }, 200);
                    }
                }
            }
            $scope.cerrarDialogRolTurnos = function () {
                $scope.cerrarPopup($scope.idModalRolTurnos);
            }
            $scope.abrirDialogHistorialTurnos = function (empleado) {
                $scope.obtenerlistaRolTurno(empleado.id_ficha)
                $scope.edicionFichasInactivas = false
                $scope.abrirPopup($scope.idModalHistorialTurnos);
            }
            $scope.cerrarDialogHistorialTurnos = function () {
                $scope.cerrarPopup($scope.idModalHistorialTurnos);
            }
            $scope.abrirDialogHorasExtras = function (empleado) {
                if (empleado.activo) {
                    if (empleado.fecha_inicio) {

                        $scope.empleado = empleado
                        var fecha = new Date()
                        $scope.horaExtra = { fecha: $scope.fechaATexto(fecha) }
                        $scope.abrirPopup($scope.idModalHorasExtras);
                    }
                    else {
                        $timeout(function () {
                            $scope.$apply(function () {
                                $scope.mostrarMensaje("No cuenta con ficha actualmente, crear ficha empleado!")
                            });
                        }, 200);
                    }
                }
            }
            $scope.cerrarDialogHorasExtras = function () {
                $scope.cerrarPopup($scope.idModalHorasExtras);
            }
            $scope.abrirDialogHistorialHorasExtras = function () {
                var filtroHorasExtra = { inicio: "", fin: "" }
                $scope.obtenerHistorialHorasExtra(filtroHorasExtra)
                $scope.abrirPopup($scope.idModalHistorialHorasExtras);
            }
            $scope.cerrarDialogHistorialHorasExtras = function () {
                $scope.cerrarPopup($scope.idModalHistorialHorasExtras);
            }
            $scope.abrirDialogAnticipoRegular = function () {
                $scope.obtenerMatrizAnticipo()
                $scope.obteneranticiposOrdi()
                $scope.dynamicPopovertr3 = {
                    templateUrl: 'myPopoverTr3.html',
                };
                $scope.dynamicPopoverBancoComprobante = {
                    templateUrl: 'myPopoverBancoComprobante.html',
                };
                $scope.registroIndividual = true
                $scope.obtenerDepartamentos()
                $scope.abrirPopup($scope.idModalAnticipoRegular);
            }
            $scope.obteneranticiposOrdi = function () {
                var mes = new Date().getMonth()
                var gestion = String(new Date().getFullYear())
                var ultimodia = new Date()
                $scope.listaAnticipos = []
                $scope.meses.forEach(function (mese, index, array) {
                    if (mese.id == mes) {
                        mes = mese
                    }
                    if (index === (array.length - 1)) {
                        $scope.filtroAnticipo = { mes: mes, gestion: gestion }
                        var date = new Date();
                        var primerDia = new Date(date.getFullYear(), date.getMonth(), 1);
                        var ultimoDia = new Date(date.getFullYear(), date.getMonth() + 1, 0);
                        var filtro = { inicio: primerDia, fin: ultimoDia, nombre: 'EXTRAORDI', id_empresa: $scope.usuario.id_empresa }
                        $scope.anticipo_extraordinaro = 0;
                        $scope.obtenerListaAnticiposOrdi(filtro, 0)
                    }
                });

            }
            $scope.cerrarDialogAnticipoRegular = function () {
                $scope.listaAnticipos2 = []
                $scope.cerrarPopup($scope.idModalAnticipoRegular);
            }
            $scope.abrirDialogPrestamosPersonal = function () {
                shortcut.add("ESC", function () {
                    $scope.cerrarDialogPrestamosPersonal()
                })
                $scope.dynamicPopoverPrestamosPersonal = {
                    templateUrl: 'myPopoverPrestamosPersonal.html',
                };
                $scope.obtenerPrestamos()
                $scope.abrirPopup($scope.idModalPrestamosPersonal);
            }
            $scope.optenerListaPrestamos = function () {
                var promesa = ObtenerListaPrestamo($scope.paginator)
                promesa.then(function (datos) {
                    $scope.paginator.setPages(datos.paginas);
                    if (datos.prestamos.length > 0) {
                        datos.prestamos.forEach(function (prestamo, index, array) {
                            var fecha = $scope.fechaATexto(prestamo.fecha_inicial)
                            prestamo.fecha_vence = editar_fecha(fecha, prestamo.plazo, "m", "/")


                            prestamo.saldo = prestamo.monto
                            prestamo.pago = 0
                            $scope.prestamos = { total_montos: 0, pagos_acuenta: 0, saldo: 0 }
                            if (index === (array.length - 1)) {
                                datos.prestamos.forEach(function (prestamo, index, array) {
                                    if (prestamo.eliminado == false) {
                                        if (prestamo.prestamoPagos.length > 0) {
                                            if (prestamo.prestamoPagos[(prestamo.prestamoPagos.length - 1)].saldo_anterior == prestamo.total) {
                                                prestamo.pagadoTotal = true
                                            }
                                            prestamo.pagadoTotal = false
                                            $scope.prestamos.total_montos += prestamo.monto
                                            $scope.prestamos.pagos_acuenta += prestamo.prestamoPagos[(prestamo.prestamoPagos.length - 1)].a_cuenta_anterior
                                            $scope.prestamos.saldo += (prestamo.total - prestamo.prestamoPagos[(prestamo.prestamoPagos.length - 1)].a_cuenta_anterior)
                                        } else {
                                            prestamo.pagadoTotal = false
                                            $scope.prestamos.total_montos += prestamo.monto
                                            $scope.prestamos.pagos_acuenta += 0
                                            $scope.prestamos.saldo += prestamo.total
                                        }
                                        if (index === (array.length - 1)) {
                                            $scope.listaPrestamos = datos.prestamos
                                        }
                                    } else {
                                        if (index === (array.length - 1)) {
                                            $scope.listaPrestamos = datos.prestamos
                                        }
                                    }
                                });
                            }
                            prestamo.montoEdit = false
                        });
                    } else {
                        $scope.listaPrestamos = {}
                        $scope.prestamos = {}
                    }
                })
            }

            $scope.copiarCodigodeCi = function (empleado) {
                if (empleado.activoCopiaCodigo) {
                    empleado.codigo = empleado.persona.ci
                } else {
                    empleado.codigo = ""
                }

            }
            $scope.obtenerPrestamos = function () {
                blockUI.start();
                $scope.paginator = Paginator();
                $scope.paginator.column = "id";
                $scope.paginator.direccion = "asc";
                var date = new Date();
                var primerDia = new Date(date.getFullYear(), date.getMonth(), 1);
                var ultimoDia = new Date(date.getFullYear(), date.getMonth() + 1, 0);
                $scope.filtro = { empresa: $scope.usuario.id_empresa, plazo: "", inicio: $scope.fechaATexto(primerDia), fin: $scope.fechaATexto(ultimoDia), nombre: "", apellido: "", cuentas_liquidas: false };
                $scope.paginator.callBack = $scope.optenerListaPrestamos;
                $scope.paginator.getSearch("", $scope.filtro, null);
                blockUI.stop();

            }
            $scope.borrarFechas = function (filtro) {
                filtro.fin = ""
                filtro.inicio = ""
                $scope.paginator.getSearch("", $scope.filtro, null);
            }
            $scope.cerrarDialogPrestamosPersonal = function () {
                shortcut.remove("ESC", function () {
                })
                $scope.cerrarPopup($scope.idModalPrestamosPersonal);
                $scope.obtenerRecursosHumanos()
            }
            $scope.abrirDialogNuevoAnticipoRegularTodos = function () {
                $scope.listaAnticipos2 = []
                $scope.cerrarDialogAdvertencia();
                $scope.obtenerListaEmpleados()
                $scope.abrirPopup($scope.idModalNuevoAnticipoRegularTodos);
            }
            $scope.cerrarDialogNuevoAnticipoRegularTodos = function () {
                $scope.cerrarPopup($scope.idModalNuevoAnticipoRegularTodos);
            }

            $scope.abrirDialogAdvertencia = function (modal) {
                $scope.abrirModalAdvertencia = modal
                $scope.abrirPopup($scope.idModalAdvertencia);
            }

            $scope.abrirDialogAdvertenciaPrestamo = function () {
                $scope.mensajeAdvertencia = {
                    texto1: 'Los prestamos y las condiciones se realizarán para todos los trabajadores seleccionados.',
                    texto2: 'Para prestamos personalizados use la opción directamente en la fila del empleado.'
                }
                $scope.abrirDialogAdvertencia($scope.abrirDialogPretamosNuevoTodos)
            }
            $scope.abrirDialogAdvertenciaAnticipo = function () {
                $scope.matrizEdicion = false
                $scope.anticipo = { tipo: false, tope: null, monto: null }
                $scope.mensajeAdvertencia = {
                    texto1: 'Los anticipos y las condiciones se realizarán para todos los trabajadores seleccionados.',
                    texto2: 'Para anticipos personalizados use la opción directamente en la fila del empleado.'
                }
                $scope.obteneranticiposOrdi()
                $scope.abrirDialogAdvertencia($scope.abrirDialogNuevoAnticipoRegularTodos)
            }
            $scope.cerrarDialogAdvertencia = function () {
                $scope.cerrarPopup($scope.idModalAdvertencia);
            }
            $scope.abrirDialogPretamosNuevoTodos = function () {
                $scope.cerrarDialogAdvertencia();
                $scope.obtenerListaEmpleados()
                $scope.abrirPopup($scope.idModalPretamosNuevoTodos);
            }
            $scope.cerrarDialogPretamosNuevoTodos = function () {
                $scope.cerrarPopup($scope.idModalPretamosNuevoTodos);
            }
            $scope.abrirDialogReporteHijos = function () {
                $scope.abrirPopup($scope.idModalReporteHijos);
            }
            $scope.cerrarDialogReporteHijos = function () {
                $scope.cerrarPopup($scope.idModalReporteHijos);
            }
            $scope.abrirReportePDFHijos = function (desde, hasta, todos) {

                if (desde == null || hasta == null) {
                    $scope.mostrarMensaje("Ingrese los rangos!");
                }

                blockUI.start();
                var promesa = ListaHijosEmpleadosEmpresa($scope.usuario.id_empresa);
                promesa.then(function (datos) {
                    var fechaActual = new Date()
                    var hijosReporte = []
                    if (todos != true) {
                        todos = false;
                    }

                    var detalle = { "desde": desde, "hasta": hasta, "todos": todos };
                    datos.forEach(function (hijo, index, array) {
                        hijo.edad = $scope.obtenerEdad(hijo.persona.fecha_nacimiento);
                        if (index === (array.length - 1)) {
                            datos.forEach(function (hijo, index, array) {
                                if (todos) {
                                    if (hijo.edad >= desde && hijo.edad <= hasta) {
                                        hijosReporte.push(hijo)
                                        if (index === (array.length - 1)) {
                                            $scope.generarReprotePDFHijos(hijosReporte, detalle)
                                        }
                                    } else {
                                        if (index === (array.length - 1)) {
                                            $scope.generarReprotePDFHijos(hijosReporte, detalle)
                                        }
                                    }
                                } else if (hijo.empleado.eliminado == false && hijo.empleado.regularizado == true) {
                                    if (hijo.edad >= desde && hijo.edad <= hasta) {
                                        hijosReporte.push(hijo)
                                        if (index === (array.length - 1)) {
                                            $scope.generarReprotePDFHijos(hijosReporte, detalle)
                                        }
                                    } else {
                                        if (index === (array.length - 1)) {
                                            $scope.generarReprotePDFHijos(hijosReporte, detalle)
                                        }
                                    }
                                } else {
                                    if (index === (array.length - 1)) {
                                        $scope.generarReprotePDFHijos(hijosReporte, detalle)
                                    }
                                }

                            })
                        }
                    })
                    blockUI.stop();
                });
            }

            $scope.generarReprotePDFHijos = function (reporteHijos, detalle) {

                convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {

                    var detallesHijos = reporteHijos;
                    var doc = new PDFDocument({ compress: false, margin: 10 });
                    var stream = doc.pipe(blobStream());

                    doc.font('Helvetica', 8);
                    var y = 185, itemsPorPagina = 15, items = 0, pagina = 1;
                    $scope.dibujarCabeceraPDFReporteHijos(doc, detallesHijos, detalle, pagina, imagenEmpresa);

                    for (var i = 0; i < detallesHijos.length && items <= itemsPorPagina; i++) {

                        doc.font('Helvetica', 8);
                        doc.rect(40, y - 5, 60, 20).stroke();
                        doc.text(detallesHijos[i].empleado.codigo, 45, y);
                        doc.rect(100, y - 5, 150, 20).stroke();
                        var nombreTrabajador = $scope.capitalizar(detallesHijos[i].empleado.persona.nombre_completo.toLowerCase());
                        doc.text(nombreTrabajador, 105, y, { width: 200 });

                        doc.rect(250, y - 5, 150, 20).stroke();
                        var apellido_materno = detallesHijos[i].persona.apellido_materno;
                        var apellido_paterno = detallesHijos[i].persona.apellido_paterno;
                        var nombre = detallesHijos[i].persona.nombres;
                        var nombre_completo = apellido_paterno + " " + apellido_materno + " " + nombre;
                        var nombreHijo = $scope.capitalizar(nombre_completo.toLowerCase());
                        doc.text(nombreHijo, 255, y, { width: 200 });

                        doc.rect(400, y - 5, 60, 20).stroke();
                        var fecha = new Date(detallesHijos[i].persona.fecha_nacimiento);
                        var año = fecha.getFullYear();
                        var mes = fecha.getMonth() + 1;
                        var dia = fecha.getDate();
                        var fecha_completa = dia + "/" + mes + "/" + año;
                        doc.text(fecha_completa, 410, y);

                        doc.rect(460, y - 5, 40, 20).stroke();
                        doc.text(detallesHijos[i].persona.genero.nombre.toLowerCase(), 462, y);

                        doc.rect(500, y - 5, 27, 20).stroke();
                        doc.text(detallesHijos[i].edad, 510, y);

                        doc.rect(527, y - 5, 48, 20).stroke();
                        doc.text(detallesHijos[i].relacion.nombre.toLowerCase(), 535, y);

                        y = y + 20;
                        items++;

                        if (items == itemsPorPagina || i + 1 == detallesHijos.length) {
                            if (i + 1 == detallesHijos.length) {

                            } else {
                                doc.addPage({ margin: 0, bufferPages: true });
                                y = 185;
                                items = 0;
                                pagina = pagina + 1;
                                $scope.dibujarCabeceraPDFReporteHijos(doc, detallesHijos, detalle, pagina, imagenEmpresa);
                                doc.font('Helvetica', 8);
                            }
                        }
                    }
                    /*var fechaActual = new Date();
                    var min = fechaActual.getMinutes();
                    if (min < 10) {
                        min = "0" + min;
                    }
                    doc.text("USUARIO: " + $scope.usuario.nombre_usuario, 45, y);
                    doc.text("IMPRESION : " + fechaActual.getDate() + "/" + (fechaActual.getMonth() + 1) + "/" + fechaActual.getFullYear() + " Hr. " + fechaActual.getHours() + ":" + min, 175, y);*/
                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                });
            }

            $scope.dibujarCabeceraPDFReporteHijos = function (doc, datos, detalle, pagina, imagenEmpresa) {
                doc.font('Helvetica-Bold', 12);

                doc.image(imagenEmpresa, 60, 50, { fit: [75, 75] });

                doc.text("REPORTE DE HIJOS", 0, 100, { align: "center" });
                var tipo;
                if (detalle.todos == true) {
                    tipo = "ACTIVO";
                } else {
                    tipo = "TODOS";
                }
                doc.font('Helvetica-Bold', 8);
                doc.text("TIPO " + tipo, 0, 115, { align: "center" });
                doc.text("EDAD  " + detalle.desde + " A " + detalle.hasta + " AÑOS", 0, 130, { align: "center" });

                doc.rect(40, 150, 210, 15).stroke();
                doc.text("EMPLEADOS", 120, 155);
                doc.rect(250, 150, 325, 15).stroke();
                doc.text("HIJOS", 400, 155);

                doc.rect(40, 165, 60, 15).stroke();
                doc.text("CODIGO", 50, 170);
                doc.rect(100, 165, 150, 15).stroke();
                doc.text("NOMBRE", 150, 170);

                doc.rect(250, 165, 150, 15).stroke();
                doc.text("NOMBRE", 300, 170);
                doc.rect(400, 165, 60, 15).stroke();
                doc.text("FECHA_NAC", 405, 170);
                doc.rect(460, 165, 40, 15).stroke();
                doc.text("SEXO", 470, 170);
                doc.rect(500, 165, 27, 15).stroke();
                doc.text("EDAD", 502, 170);
                doc.rect(527, 165, 48, 15).stroke();
                doc.text("RELACION", 531, 170);
            }


            $scope.abrirDialogReporteVeneficios = function () {
                $scope.obtenerbeneficiosSocialesEmpresa()
                $scope.obtenerMotivosRetiro();
                $scope.empleado = undefined
                $scope.abrirPopup($scope.idModalReporteVeneficios);
            }
            $scope.cerrarDialogReporteVeneficios = function () {
                $scope.obtenerRecursosHumanos()
                $scope.cerrarPopup($scope.idModalReporteVeneficios);
            }
            $scope.abrirDialogPagoPrestamo = function (prestamo) {
                $scope.prestamo = prestamo
                var fechaActual = new Date()
                if ($scope.prestamo.prestamoPagos.length > 0) {
                    prestamo.saldo = $scope.prestamo.prestamoPagos[(prestamo.prestamoPagos.length - 1)].saldo_anterior
                    prestamo.total = ((prestamo.monto * prestamo.interes_pactado) / 100) + prestamo.monto
                }
                var fechaVence = new Date($scope.convertirFecha(prestamo.fecha_vence))
                var fechaInicioTexto = moment(fechaActual).format('YYYY-MM-DD HH:mm:ss');
                var fechaFinTexto = moment(fechaVence).format('YYYY-MM-DD HH:mm:ss');
                var fecha1 = moment(fechaInicioTexto, "YYYY-MM-DD HH:mm:ss");
                var fecha2 = moment(fechaFinTexto, "YYYY-MM-DD HH:mm:ss");
                $scope.prestamo.plazo_restante = Math.round(fecha2.diff(fecha1, 'months', true))
                $scope.abrirPopup($scope.idModalPagoPrestamo);
            }
            $scope.cerrarDialogPagoPrestamo = function () {
                $scope.cerrarPopup($scope.idModalPagoPrestamo);
            }

            $scope.estadosVacacionesR = [
                { 'id': 2, 'label': 'Todos' },
                { 'id': 1, 'label': 'Activo' },
                { 'id': 0, 'label': 'Inactivo' },
            ];

            $scope.abrirDialogReporteVacaciones = function () {
                var fechaActual = new Date()
                var ultimoDia = new Date(fechaActual.getFullYear(), fechaActual.getMonth() + 1, 0);
                var primerDia = new Date(fechaActual.getFullYear(), fechaActual.getMonth(), 1);

                $scope.filtroVacacion = { inicio: $scope.fechaATexto(primerDia), fin: $scope.fechaATexto(ultimoDia), estado: 1 }
                $scope.obtenerHistorialEmpresaVacacion($scope.filtroVacacion)
                $scope.abrirPopup($scope.idModalReporteVacaciones);
            }

            $scope.cerrarDialogReporteVacaciones = function () {
                $scope.cerrarPopup($scope.idModalReporteVacaciones);
            }

            $scope.abrirDialogReporteBajasMedicas = function () {
                var filtroAusencias = { inicio: 0, fin: 0, tipo_ausencia: 0 }
                $scope.filtroAusencias = {}
                $scope.obtenertiposAusenciaMedica();
                $scope.obtenerHistorialEmpresaAusenciasMedicas()
                $scope.abrirPopup($scope.idModalReporteBajasMedicas);
            }

            $scope.cerrarDialogReporteBajasMedicas = function () {
                $scope.cerrarPopup($scope.idModalReporteBajasMedicas);
            }
            // INICIO REPORTE DE ALTAS Y BAJAS           
            $scope.abrirDialogReporteAltasBajas = function () {
                $scope.abrirPopup($scope.idModalReporteAltasBajas);

            }
            $scope.cerrarDialogReporteAltasBajas = function () {
                $scope.cerrarPopup($scope.idModalReporteAltasBajas);
            }
            $scope.abrirDialogReporteRolTurnos = function () {
                shortcut.add("ESC", function () {
                    $scope.cerrarDialogReporteRolTurnos()
                })
                $scope.obtenerGruposRol();
                /*     $scope.filtroRol = { inicio: 0, fin: 0, grupo: 0 } */
                let fechaInicioMesActual = new Date();
                fechaInicioMesActual.setDate(1)
                let fechaFinalMesActual = new Date(fechaInicioMesActual.getFullYear(), fechaInicioMesActual.getMonth() + 1, 0);
                $scope.paginatorRolTurnos = Paginator();
                $scope.paginatorRolTurnos.column = "id";
                $scope.paginatorRolTurnos.direccion = "asc";
                var anio = new Date().getFullYear()
                $scope.filtroRolCal = {
                    empresa: $scope.usuario.id_empresa,
                    inicio: $scope.fechaATexto(fechaInicioMesActual),
                    fin: $scope.fechaATexto(fechaFinalMesActual),
                    grupo: "",
                    nombre: "",
                    campo: "",
                    inicio2: $scope.fechaATexto(fechaInicioMesActual),
                    fin2: $scope.fechaATexto(fechaFinalMesActual)
                }
                $scope.filtroRol = {
                    empresa: $scope.usuario.id_empresa,
                    inicio: $scope.fechaATexto(fechaInicioMesActual),
                    fin: $scope.fechaATexto(fechaFinalMesActual),
                    grupo: "",
                    campo: "",
                    alerta: ""
                }
                $scope.paginatorRolTurnos.callBack = $scope.obtenerlistaRolTurnoEmpresa;
                $scope.paginatorRolTurnos.getSearch("", $scope.filtroRol, null);
                $scope.abrirPopup($scope.idModalReporteRolTurnos);
            }
            $scope.buscarRolesTurno = function () {
                $scope.paginatorRolTurnos.callBack = $scope.obtenerlistaRolTurnoEmpresa;
                $scope.paginatorRolTurnos.getSearch("", $scope.filtroRol, null);
            }
            $scope.cerrarDialogReporteRolTurnos = function () {
                shortcut.remove("ESC", function () {
                })
                $scope.obtenerRecursosHumanos()
                $scope.cerrarPopup($scope.idModalReporteRolTurnos);
            }
            $scope.abrirDialogReporteTurnosDetallado = function (filtro) {
                $scope.obtenerlistaRolTurnoCal(filtro)
                $scope.abrirPopup($scope.idModalReporteTurnosDetallado);
            }
            $scope.cambiarFecha = function (filtro) {
                /*  if (filtro.inicio.length > 9) {
                     var fecha = new Date($scope.convertirFecha(filtro.inicio))
                     fecha.setFullYear(parseInt($scope.filtroRolCal.gestion.nombre))
                     filtro.inicio = $scope.fechaATexto(fecha)
                 }
                 if (filtro.fin.length > 9) {
                     fecha = new Date($scope.convertirFecha(filtro.fin))
                     if (fecha.getFullYear() == $scope.filtroRolCal.gestion.nombre) {
                         filtro.fin = $scope.fechaATexto(fecha)
                     } else {
                         fecha.setFullYear(parseInt($scope.filtroRolCal.gestion.nombre))
                         fecha = new Date(fecha.getFullYear(), 12, 0);
                         filtro.fin = $scope.fechaATexto(fecha)
                     }
            
                 } */
            }
            $scope.formatofecha = function (fecha) {
                var datos = fecha.split("/")
                return datos[2] + "/" + datos[1] + "/" + datos[0]
            }
            $scope.cerrarDialogReporteTurnosDetallado = function () {
                $scope.obtenerRecursosHumanos()
                $scope.cerrarPopup($scope.idModalReporteTurnosDetallado);
            }
            $scope.abrirDialogViajes = function () {
                $scope.viaje = { empleadosEntrada: [], empleadosSalida: [], destinos: [] }
                // $scope.obtenerlistaRolTurno(0)
                $scope.obtenerVehiculosViaje()
                $scope.llenarCampamentos($scope.campamento)
                $scope.obtenerChoferesViaje()
                $scope.abrirPopup($scope.idModalViajes);
            }
            $scope.cerrarDialogViajes = function () {
                $scope.cerrarPopup($scope.idModalViajes);
            }
            $scope.abrirDialogVisita = function () {

                $scope.visita = { persona: { nombres: "", apellido_paterno: "", apellido_materno: "", ci: null, expedido: null }, visita: true, estado: {} }
                for (var g = 0; g < $scope.tiposPasajerosViaje.length; g++) {
                    var tipo = $scope.tiposPasajerosViaje[g];
                    if (tipo.nombre == "VISITA") {
                        $scope.visita.estado = tipo
                    }
                }
                $scope.abrirPopup($scope.idModalVisita);
            }
            $scope.cerrarDialogVisita = function () {
                $scope.cerrarPopup($scope.idModalVisita);
            }
            $scope.abrirDialogVisitaSalida = function () {
                $scope.visita = { persona: { nombres: "", apellido_paterno: "", apellido_materno: "", ci: null, expedido: null }, visita: true, estado: {} }
                for (var g = 0; g < $scope.tiposPasajerosViaje.length; g++) {
                    var tipo = $scope.tiposPasajerosViaje[g];
                    if (tipo.nombre == "VISITA") {
                        $scope.visita.estado = tipo
                    }
                }
                $scope.abrirPopup($scope.idModalVisitaSalida);
            }
            $scope.cerrarDialogVisitaSalida = function () {
                $scope.cerrarPopup($scope.idModalVisitaSalida);
            }
            $scope.eliminarPopup
            $scope.agregarvisitaEntrada = function (visita) {
                $scope.tiposViaje.clases.forEach(function (tipo, index, array) {
                    if (tipo.nombre == "INGRESO") {
                        visita.tipoViaje = tipo
                    }
                    if (index == (array.length - 1)) {
                        visita.persona.nombre_completo = visita.persona.nombres
                        if (visita.persona.apellido_paterno != "") {
                            visita.persona.nombre_completo += " " + visita.persona.nombre_completo
                        }
                        if (visita.persona.apellido_materno != "") {
                            visita.persona.nombre_completo += " " + visita.persona.apellido_materno
                        }
                        visita.habilitado = true
                        visita.esVisita = true
                        $scope.viaje.empleadosEntrada.push(visita)
                    }

                })
                scope.cerrarDialogVisita()
            }

            $scope.agregarvisitaSalida = function (visita) {
                $scope.tiposViaje.clases.forEach(function (tipo, index, array) {
                    if (tipo.nombre == "SALIDA") {
                        visita.tipoViaje = tipo
                    }
                    if (index == (array.length - 1)) {
                        visita.persona.nombre_completo = visita.persona.nombres
                        if (visita.persona.apellido_paterno != "") {
                            visita.persona.nombre_completo += " " + visita.persona.nombre_completo
                        }
                        if (visita.persona.apellido_materno != "") {
                            visita.persona.nombre_completo += " " + visita.persona.apellido_materno
                        }
                        visita.habilitado = true
                        visita.esVisita = true
                        $scope.viaje.empleadosSalida.push(visita)
                    }

                })
                $scope.cerrarDialogVisitaSalida()
            }
            $scope.abrirDialogVehiculosViaje = function (tipo) {
                $scope.clase = { habilitado: true }
                $scope.tipo_edicion = tipo;
                $scope.abrirPopup($scope.idModalVehiculosViaje);
            }
            $scope.agregarVehiculo = function (clase) {
                clase.nombre = clase.vehiculo + "-" + clase.placa
                if (clase.nombre && clase.nombre_corto) {
                    if ($scope.tipo_edicion.clases.indexOf(clase) == -1) {
                        $scope.tipo_edicion.clases.push(clase);
                    }
                    $scope.clase = { habilitado: true }
                }

            }
            $scope.cerrarDialogVehiculosViaje = function () {
                $scope.cerrarPopup($scope.idModalVehiculosViaje);
            }

            $scope.abrirDialogHistorialViajes = function () {
                $scope.obtenerVehiculosViaje();
                $scope.obtenerViajesPasajeros()
                $scope.VerViajes = false
                $scope.abrirPopup($scope.idModalHistorialViajes);
            }
            $scope.verBusesViaje = function () {

                $scope.obtenerViajes()
                $scope.VerViajes = true
                setTimeout(function () {
                    aplicarDatePickers();
                }, 400);
            }
            $scope.verPasajerosViajes = function () {
                $scope.obtenerViajesPasajeros()
                $scope.VerViajes = false
                setTimeout(function () {
                    aplicarDatePickers();
                }, 400);
            }
            $scope.cerrarDialogHistorialViajes = function () {
                $scope.obtenerRecursosHumanos();
                $scope.cerrarPopup($scope.idModalHistorialViajes);
            }
            $scope.abrirDialogReporteAusencias = function () {
                $scope.ObtenerEstadosAusencias();
                $scope.obtenerHistorialEmpresaOtrasAusencias();
                $scope.obtenerTiposOtrasAusencias();
                $scope.abrirPopup($scope.idModalReporteAusencias);
            }
            $scope.cerrarDialogReporteAusencias = function () {
                $scope.cerrarPopup($scope.idModalReporteAusencias);
            }
            $scope.abrirDialogCertificado = function () {
                $scope.obtenerHistorialContratos($scope.empleado)
                $scope.abrirPopup($scope.idModalCertificado);
            }
            $scope.cerrarDialogCertificado = function () {
                $scope.cerrarPopup($scope.idModalCertificado);
            }

            $scope.button_clicked = false;
            $scope.disableImput = function ($event) {
                if ($event) {
                    $scope.button_clicked = false;

                } else {
                    $scope.button_clicked = true;
                }
            }
            //nuevo RH
            $scope.obtenerGenero = function () {
                blockUI.start();
                $scope.generos = []
                var promesa = ListaDatosGenero();
                promesa.then(function (entidad) {
                    entidad.forEach(function (genero) {
                        $scope.generos.push(genero)

                    }, this);

                    // $scope.generos = entidad.generos;
                    blockUI.stop();
                });
            }
            $scope.abrirDialogPrerequisitoEditar = function (prerequisito) {
                $scope.seleccionarCargosPrerequisito(prerequisito.prerequisitoCargos)

                $scope.NuevoP = new Prerequisito({ id: prerequisito.id, nombre: prerequisito.nombre, observacion: prerequisito.observacion, vencimiento_mes: prerequisito.vencimiento_mes, dias_activacion: prerequisito.dias_activacion, puede_modificar_rrhh: prerequisito.puede_modificar_rrhh, cargos: [] })
                $scope.abrirPopup($scope.idModalDialogPrerequisitoNuevo);
            }



            $scope.saveForm = function () {
                //$scope.paciente = paciente;

                var imagenPaciente = $scope.nuevoRH.imagen;
                $scope.nuevoRH.fechaFicha = new Date()
                var button = $('#siguiente').text().trim()
                if (button != "Siguiente") {
                    blockUI.start();
                    $scope.nuevoRH.usuario_en_uso = $scope.usuario.id
                    if ($scope.nuevoRH.id) {
                        $scope.nuevoRH.persona.fecha_nacimiento = new Date($scope.convertirFecha($scope.nuevoRH.persona.fecha_nacimiento));
                        NuevoRecursoHumano.update({ id_usuario: $scope.nuevoRH.id }, $scope.nuevoRH, function (res) {
                            blockUI.stop();
                            $scope.cerrarDialogRhNuevo();
                            SweetAlert.swal("",'Actualizado Exitosamente!',"success");
                            $scope.recargarItemsTabla()
                        });
                    } else {
                        $scope.nuevoRH.persona.fecha_nacimiento = new Date($scope.convertirFecha($scope.nuevoRH.persona.fecha_nacimiento));
                        $scope.nuevoRH.$save({ id_usuario: 0 }, function (res) {
                            blockUI.stop();
                            $scope.cerrarDialogRhNuevo();
                            SweetAlert.swal("",'Guardado Exitosamente!',"success");
                            $scope.recargarItemsTabla()
                        }, function (error) {
                            blockUI.stop();
                            $scope.cerrarDialogRhNuevo();

                            $scope.mostrarMensaje('Ocurrio un problema al momento de guardar!');
                            $scope.recargarItemsTabla()
                        });
                    }
                }
            }
            //fun nuevo

            // recuperar lista principal
            $scope.obtenerRecursosHumanos = function (filter) {
                // blockUI.start();
                $scope.paginator = Paginator();
                $scope.paginator.column = "nombre_completo";
                $scope.paginator.direccion = "asc";
                $scope.dynamicPopoverCargos = {
                    templateUrl: 'myPopoverTemplate.html',
                };
                $scope.dynamicPopoverCargosRolTurno = {
                    templateUrl: 'myPopoverTemplateCargosRolTurno.html',
                };

                if (filter) {
                    $scope.filtro = filter
                    $scope.filtro.cargo = filter.cargo_clase ? filter.cargo_clase.id : ""
                } else {
                    $scope.filtro = { empresa: $scope.usuario.id_empresa, codigo: "", nombres: "", ci: "", campo: "", cargo: "", busquedaEmpresa: "", estado: "Inactivo", grupo_sanguineo: "", area: "" };
                }
                $scope.paginator.callBack = $scope.buscarRecursosHumanos;
                $scope.paginator.getSearch("", $scope.filtro, null);
                // blockUI.stop();

            }
            $scope.obtenerDatosFiniquito = function (ben, segundo_formato) {
                var promesa = ObtenerDatosFiniquito(ben.id)
                promesa.then(function (data) {
                    if (segundo_formato) {
                        $scope.imprimirFiniquitoSegundoFormato(data.beneficio, false, true, true)
                    } else {
                        $scope.imprimirFiniquito(data.beneficio, false, true, true)
                    }

                })
            }

            $scope.buscarRecursosHumanos = function (seleccionar, empleado, todos, model) {
                blockUI.start();
                var promesa = RecursosHumanosPaginador($scope.paginator);
                promesa.then(function (dato) {
                    $scope.paginator.setPages(dato.paginas);
                    $scope.RecursosHumanosEmpleados = dato.pacientes;
                    $scope.RecursosHumanosEmpleados.forEach(function (empleado) {
                        empleado.activo = (empleado.activo == 0) ? true : false
                        if (empleado.activo) {
                            empleado.msg = empleado.fecha_inicio ? ('Fecha de Ingreso: ' + $scope.fechaATexto(new Date(empleado.fecha_inicio))) : 'Sin Registro de Ingreso'
                        } else {
                            empleado.msg = (empleado.campoBit == 'Inactivar Empleado') ? ('Fecha de retiro:  ' + $scope.fechaATexto(new Date(empleado.fecha_expiracion)) + '\nMotivo: ' + empleado.valorActual) : 'Sin Registro de Retiro'
                        }
                        if (empleado.cargos) {
                            empleado.cargos = empleado.cargos.split(",")
                        }
                    });
                    if (seleccionar) {
                        if (todos) {
                            $scope.RecursosHumanosEmpleados.forEach(function (empleado, index, array) {
                                if (model == false) {
                                    empleado.select = false
                                    $scope.empleadosSeleccionados = []
                                } else {
                                    empleado.select = true
                                    $scope.empleadosSeleccionados.push(empleado)
                                }

                            });
                        }
                    }

                    blockUI.stop();
                });
            }
            $scope.subirExcelPacientes = function (event) {
                blockUI.start();
                var files = event.target.files;
                var i, f;
                for (i = 0, f = files[i]; i != files.length; ++i) {
                    var reader = new FileReader();
                    var name = f.name;
                    reader.onload = function (e) {
                        // blockUI.start();
                        var data = e.target.result;

                        var workbook = XLSX.read(data, { type: 'binary' });
                        var first_sheet_name = workbook.SheetNames[0];
                        var row = 2, i = 0;
                        var worksheet = workbook.Sheets[first_sheet_name];
                        var pacientes = [];
                        do {
                            var paciente = { personaReferencia: {} };
                            paciente.codigo = worksheet['A' + row] != undefined && worksheet['A' + row] != "" ? worksheet['A' + row].v.toString() : null;
                            paciente.apellido_paterno = worksheet['B' + row] != undefined && worksheet['B' + row] != "" ? worksheet['B' + row].v.toString() : null;
                            paciente.apellido_materno = worksheet['C' + row] != undefined && worksheet['C' + row] != "" ? worksheet['C' + row].v.toString() : null;
                            paciente.nombres = worksheet['D' + row] != undefined && worksheet['D' + row] != "" ? worksheet['D' + row].v.toString() : null;
                            paciente.segundo_nombre = worksheet['E' + row] != undefined && worksheet['E' + row] != "" ? worksheet['E' + row].v.toString() : null;
                            paciente.ci = worksheet['F' + row] != undefined && worksheet['F' + row] != "" ? worksheet['F' + row].v.toString() : null;
                            paciente.extension = worksheet['G' + row] != undefined && worksheet['G' + row] != "" ? worksheet['G' + row].v.toString() : null;
                            paciente.contrato = worksheet['H' + row] != undefined && worksheet['H' + row] != "" ? worksheet['H' + row].v.toString() : null;
                            paciente.fecha_nacimiento = worksheet['I' + row] != undefined && worksheet['I' + row] != "" ? $scope.fecha_excel_angular(worksheet['I' + row].v.toString()) : null;
                            paciente.genero = worksheet['J' + row] != undefined && worksheet['J' + row] != "" ? worksheet['J' + row].v.toString() : null;
                            paciente.telefono = worksheet['K' + row] != undefined && worksheet['K' + row] != "" ? worksheet['K' + row].v.toString() : null;
                            paciente.telefono2 = worksheet['L' + row] != undefined && worksheet['L' + row] != "" ? worksheet['L' + row].v.toString() : null;
                            paciente.telefono_movil = worksheet['M' + row] != undefined && worksheet['M' + row] != "" ? worksheet['M' + row].v.toString() : null;
                            paciente.estilo_de_vida = worksheet['N' + row] != undefined && worksheet['N' + row] != "" ? worksheet['N' + row].v.toString() : null;
                            paciente.cargo = worksheet['O' + row] != undefined && worksheet['O' + row] != "" ? worksheet['O' + row].v.toString() : null;
                            paciente.designacion_empresa = worksheet['P' + row] != undefined && worksheet['P' + row] != "" ? worksheet['P' + row].v.toString() : null;
                            paciente.telefono_empresa = worksheet['Q' + row] != undefined && worksheet['Q' + row] != "" ? worksheet['Q' + row].v.toString() : null;
                            paciente.campamento = worksheet['R' + row] != undefined && worksheet['R' + row] != "" ? worksheet['R' + row].v.toString() : null;
                            paciente.riesgos_procesos_trabajo = worksheet['S' + row] != undefined && worksheet['S' + row] != "" ? worksheet['S' + row].v.toString() : null;
                            paciente.personaReferencia.ciudad_referencia = worksheet['T' + row] != undefined && worksheet['T' + row] != "" ? worksheet['T' + row].v.toString() : null;
                            paciente.personaReferencia.zona_referencia = worksheet['U' + row] != undefined && worksheet['U' + row] != "" ? worksheet['U' + row].v.toString() : null;
                            paciente.personaReferencia.calle_av_referencia = worksheet['V' + row] != undefined && worksheet['V' + row] != "" ? worksheet['V' + row].v.toString() : null;
                            paciente.personaReferencia.nro_referencia = worksheet['W' + row] != undefined && worksheet['W' + row] != "" ? worksheet['W' + row].v.toString() : null;
                            paciente.personaReferencia.telefonos_referencia = worksheet['X' + row] != undefined && worksheet['X' + row] != "" ? worksheet['X' + row].v.toString() : null;
                            paciente.personaReferencia.celular_referencia = worksheet['Y' + row] != undefined && worksheet['Y' + row] != "" ? worksheet['Y' + row].v.toString() : null;
                            paciente.personaReferencia.nombre_referencia = worksheet['Z' + row] != undefined && worksheet['Z' + row] != "" ? worksheet['Z' + row].v.toString() : null;
                            paciente.fecha_inicio = worksheet['AA' + row] != undefined && worksheet['AA' + row] != "" ? $scope.fecha_excel_angular(worksheet['AA' + row].v.toString()) : null;
                            paciente.haber_basico = worksheet['AB' + row] != undefined && worksheet['AB' + row] != "" ? parseFloat(worksheet['AB' + row].v.toString()) : null;
                            paciente.matricula_seguro = worksheet['AC' + row] != undefined && worksheet['AC' + row] != "" ? worksheet['AC' + row].v.toString() : null;
                            paciente.seguro_salud = worksheet['AD' + row] != undefined && worksheet['AD' + row] != "" ? worksheet['AD' + row].v.toString() : null;
                            paciente.estadoTexto = worksheet['AE' + row] != undefined && worksheet['AE' + row] != "" ? worksheet['AE' + row].v.toString() : null;
                            paciente.estado = (paciente.estadoTexto.toUpperCase() == "ACTIVO") ? false : true;
                            paciente.fecha_expiracion = worksheet['AF' + row] != undefined && worksheet['AF' + row] != "" ? $scope.fecha_excel_angular(worksheet['AF' + row].v.toString()) : null;
                            paciente.imagen = "img/icon-user-default.png"
                            paciente.es_empleado = true
                            var a = new Date(paciente.fecha_inicio)
                            paciente.historialVacacion = []
                            var b = a.getFullYear()
                            var anos = $scope.obtenerAnios(b)
                            anos.forEach(function (_, index, array) {
                                var anioConfiguracion = index + 1
                                var config = null
                                if (anioConfiguracion <= 5) {
                                    config = $scope.configuracionesVacacion[0].dias
                                } else if (anioConfiguracion <= 10) {
                                    config = $scope.configuracionesVacacion[1].dias
                                } else if (anioConfiguracion > 10) {
                                    config = $scope.configuracionesVacacion[2].dias
                                }
                                var historialVacacion = {
                                    gestion: _,
                                    anio: index + 1,
                                    aplicadas: config,
                                    tomadas: 0
                                }
                                paciente.historialVacacion.push(historialVacacion)
                            });
                            pacientes.push(paciente);

                            row++;
                            i++;

                        } while (worksheet['A' + row] != undefined);
                        $scope.GuardarEmpleadosRh(pacientes);
                        $scope.limpiarArchivoImportacion()
                    };
                    reader.readAsBinaryString(f);
                    //console.log('pacientes obtenidos')
                }
            }
            $scope.subirExcelFichaEmpleados = function (event) {
                blockUI.start();
                //console.log('iniciando carga de pacientes')
                var files = event.target.files;
                var i, f;
                for (i = 0, f = files[i]; i != files.length; ++i) {
                    //console.log('iniciando lectura de excel(s)')
                    var reader = new FileReader();
                    var name = f.name;
                    reader.onload = function (e) {
                        // blockUI.start();
                        var data = e.target.result;

                        var workbook = XLSX.read(data, { type: 'binary' });
                        var first_sheet_name = workbook.SheetNames[0];
                        var row = 2, i = 0;
                        var worksheet = workbook.Sheets[first_sheet_name];
                        var fichas = [];
                        do {
                            var ficha = { seguros: [] };
                            ficha.codigo = worksheet['A' + row] != undefined && worksheet['A' + row] != "" ? worksheet['A' + row].v.toString() : null;
                            ficha.apellido_paterno = worksheet['B' + row] != undefined && worksheet['B' + row] != "" ? worksheet['B' + row].v.toString() : null;
                            ficha.apellido_materno = worksheet['C' + row] != undefined && worksheet['C' + row] != "" ? worksheet['C' + row].v.toString() : null;
                            ficha.nombres = worksheet['D' + row] != undefined && worksheet['D' + row] != "" ? worksheet['D' + row].v.toString() : null;
                            ficha.segundo_nombre = worksheet['E' + row] != undefined && worksheet['E' + row] != "" ? worksheet['E' + row].v.toString() : null;
                            ficha.estado_civil = worksheet['F' + row] != undefined && worksheet['F' + row] != "" ? worksheet['F' + row].v.toString() : null;
                            ficha.nacionalidad = worksheet['G' + row] != undefined && worksheet['G' + row] != "" ? worksheet['G' + row].v.toString() : null;
                            ficha.departamento = worksheet['H' + row] != undefined && worksheet['H' + row] != "" ? worksheet['H' + row].v.toString() : null;
                            ficha.provincia = worksheet['I' + row] != undefined && worksheet['I' + row] != "" ? worksheet['I' + row].v.toString() : null;
                            ficha.localidad = worksheet['J' + row] != undefined && worksheet['J' + row] != "" ? worksheet['J' + row].v.toString() : null;
                            ficha.tipo_personal = worksheet['K' + row] != undefined && worksheet['K' + row] != "" ? worksheet['K' + row].v.toString() : null;
                            ficha.carga_horario = worksheet['L' + row] != undefined && worksheet['L' + row] != "" ? worksheet['L' + row].v.toString() : null;
                            ficha.area = worksheet['M' + row] != undefined && worksheet['M' + row] != "" ? worksheet['M' + row].v.toString() : null;
                            ficha.ubicacion = worksheet['N' + row] != undefined && worksheet['N' + row] != "" ? worksheet['N' + row].v.toString() : null;
                            ficha.lugar_seguro = worksheet['O' + row] != undefined && worksheet['O' + row] != "" ? worksheet['O' + row].v.toString() : null;
                            ficha.nua_cua = worksheet['P' + row] != undefined && worksheet['P' + row] != "" ? worksheet['P' + row].v.toString() : null;
                            ficha.afp_aporte = worksheet['Q' + row] != undefined && worksheet['Q' + row] != "" ? worksheet['Q' + row].v.toString() : null;
                            ficha.lugar_afp = worksheet['R' + row] != undefined && worksheet['R' + row] != "" ? worksheet['R' + row].v.toString() : null;
                            ficha.seguro1 = worksheet['S' + row] != undefined && worksheet['S' + row] != "" ? worksheet['S' + row].v.toString() : null;
                            ficha.monto1 = worksheet['T' + row] != undefined && worksheet['T' + row] != "" ? parseFloat(worksheet['T' + row].v.toString()) : null;
                            ficha.observacion1 = worksheet['U' + row] != undefined && worksheet['U' + row] != "" ? worksheet['U' + row].v.toString() : null;
                            ficha.seguro2 = worksheet['V' + row] != undefined && worksheet['V' + row] != "" ? worksheet['V' + row].v.toString() : null;
                            ficha.monto2 = worksheet['W' + row] != undefined && worksheet['W' + row] != "" ? parseFloat(worksheet['W' + row].v.toString()) : null;
                            ficha.observacion2 = worksheet['X' + row] != undefined && worksheet['X' + row] != "" ? worksheet['X' + row].v.toString() : null;
                            ficha.direccion_zona = worksheet['Y' + row] != undefined && worksheet['Y' + row] != "" ? worksheet['Y' + row].v.toString() : null;
                            ficha.direccion_numero = worksheet['Z' + row] != undefined && worksheet['Z' + row] != "" ? worksheet['Z' + row].v.toString() : null;
                            ficha.correo_electronico = worksheet['AA' + row] != undefined && worksheet['AA' + row] != "" ? worksheet['AA' + row].v.toString() : null;
                            fichas.push(ficha);

                            row++;
                            i++;

                        } while (worksheet['A' + row] != undefined);

                        $scope.guardarFichasEmpleados(fichas)
                        $scope.limpiarArchivoImportacion()
                    };
                    reader.readAsBinaryString(f);
                    //console.log('pacientes obtenidos')
                }
            }
            $scope.guardarFichasEmpleados = function (fichas) {
                $scope.empleadosParaGuardar = fichas
                var empleadosArray = []
                if ($scope.empleadosParaGuardar.length > 0) {
                    if ($scope.empleadosParaGuardar.length > 100) {
                        empleadosArray = $scope.empleadosParaGuardar.slice(0, 100)
                        $scope.empleadosParaGuardar = $scope.empleadosParaGuardar.slice(100, $scope.empleadosParaGuardar.length)
                    } else {
                        empleadosArray = $scope.empleadosParaGuardar
                        $scope.empleadosParaGuardar = []
                    }
                    var arregloAporteAfp = []
                    var arregloLugarAfp = []
                    var arregloLugarSeguroSalud = []
                    var arregloTipoPersona = []
                    var arregloCargaHorario = []
                    var arregloArega = []
                    var arregloUbicacion = []
                    var arregloEstadoCivil = []
                    var arregloOtrosSeguros1 = []
                    var arregloOtrosSeguros2 = []
                    empleadosArray.forEach(function (ficha, index, array) {
                        var bandera = false
                        if (arregloAporteAfp.length > 0) {
                            for (var i = 0; i < arregloAporteAfp.length; i++) {
                                var element = arregloAporteAfp[i];
                                if (ficha.afp_aporte != null) {
                                    if (element == ficha.afp_aporte) {
                                        bandera = true
                                    }
                                }
                            }
                            if (!bandera) {

                                arregloAporteAfp.push(ficha.afp_aporte)

                            }
                        } else {
                            arregloAporteAfp.push(ficha.afp_aporte)

                        }
                        var bandera2 = false
                        if (arregloLugarAfp.length > 0) {
                            for (var i = 0; i < arregloLugarAfp.length; i++) {
                                var element = arregloLugarAfp[i];
                                if (ficha.lugar_afp != null) {
                                    if (element == ficha.lugar_afp) {
                                        bandera2 = true
                                    }
                                }
                            }
                            if (!bandera2) {

                                arregloLugarAfp.push(ficha.lugar_afp)

                            }
                        } else {
                            arregloLugarAfp.push(ficha.lugar_afp)

                        }
                        var bandera3 = false
                        if (arregloLugarSeguroSalud.length > 0) {
                            for (var i = 0; i < arregloLugarSeguroSalud.length; i++) {
                                var element = arregloLugarSeguroSalud[i];
                                if (ficha.lugar_seguro != null) {
                                    if (element == ficha.lugar_seguro) {
                                        bandera3 = true
                                    }
                                }
                            }
                            if (!bandera3) {

                                arregloLugarSeguroSalud.push(ficha.lugar_seguro)

                            }
                        } else {
                            arregloLugarSeguroSalud.push(ficha.lugar_seguro)

                        }
                        var bandera4 = false
                        if (arregloTipoPersona.length > 0) {
                            for (var i = 0; i < arregloTipoPersona.length; i++) {
                                var element = arregloTipoPersona[i];
                                if (ficha.tipo_personal != null) {
                                    if (element == ficha.tipo_personal) {
                                        bandera4 = true
                                    }
                                }
                            }
                            if (!bandera4) {

                                arregloTipoPersona.push(ficha.tipo_personal)

                            }
                        } else {
                            arregloTipoPersona.push(ficha.tipo_personal)

                        }
                        var bandera5 = false
                        if (arregloCargaHorario.length > 0) {
                            for (var i = 0; i < arregloCargaHorario.length; i++) {
                                var element = arregloCargaHorario[i];
                                if (ficha.carga_horario != null) {
                                    if (element == ficha.carga_horario) {
                                        bandera5 = true
                                    }
                                }
                            }
                            if (!bandera5) {

                                arregloCargaHorario.push(ficha.carga_horario)

                            }
                        } else {
                            arregloCargaHorario.push(ficha.carga_horario)

                        }
                        var bandera6 = false
                        if (arregloArega.length > 0) {
                            for (var i = 0; i < arregloArega.length; i++) {
                                var element = arregloArega[i];
                                if (ficha.area != null) {
                                    if (element == ficha.area) {
                                        bandera6 = true
                                    }
                                }
                            }
                            if (!bandera6) {

                                arregloArega.push(ficha.area)

                            }
                        } else {
                            arregloArega.push(ficha.area)

                        }
                        var bandera7 = false
                        if (arregloUbicacion.length > 0) {
                            for (var i = 0; i < arregloUbicacion.length; i++) {
                                var element = arregloUbicacion[i];
                                if (ficha.ubicacion != null) {
                                    if (element == ficha.ubicacion) {
                                        bandera7 = true
                                    }
                                }
                            }
                            if (!bandera7) {

                                arregloUbicacion.push(ficha.ubicacion)

                            }
                        } else {
                            arregloUbicacion.push(ficha.ubicacion)

                        }
                        var bandera8 = false
                        if (arregloEstadoCivil.length > 0) {
                            for (var i = 0; i < arregloEstadoCivil.length; i++) {
                                var element = arregloEstadoCivil[i];
                                if (ficha.estado_civil != null) {
                                    if (element == ficha.estado_civil) {
                                        bandera8 = true
                                    }
                                }
                            }
                            if (!bandera8) {

                                arregloEstadoCivil.push(ficha.estado_civil)

                            }
                        } else {
                            arregloEstadoCivil.push(ficha.estado_civil)

                        }
                        var bandera9 = false
                        if (arregloOtrosSeguros1.length > 0) {
                            for (var i = 0; i < arregloOtrosSeguros1.length; i++) {
                                var element = arregloOtrosSeguros1[i];
                                if (ficha.seguro1 != null) {
                                    if (element == ficha.seguro1) {
                                        bandera9 = true
                                    }
                                }
                            }
                            if (!bandera9) {

                                arregloOtrosSeguros1.push(ficha.seguro1)

                            }
                        } else {
                            arregloOtrosSeguros1.push(ficha.seguro1)

                        }
                        var bandera10 = false
                        if (arregloOtrosSeguros2.length > 0) {
                            for (var i = 0; i < arregloOtrosSeguros2.length; i++) {
                                var element = arregloOtrosSeguros2[i];
                                if (ficha.seguro2 != null) {
                                    if (element == ficha.seguro2) {
                                        bandera10 = true
                                    }
                                }
                            }
                            if (!bandera10) {

                                arregloOtrosSeguros2.push(ficha.seguro2)

                            }
                        } else {
                            arregloOtrosSeguros2.push(ficha.seguro2)

                        }
                        if (index === (array.length - 1)) {
                            var promesa = GuardarImportacionFichaEmpleados(empleadosArray, $scope.usuario.id_empresa, arregloAporteAfp,
                                arregloLugarAfp,
                                arregloLugarSeguroSalud,
                                arregloTipoPersona,
                                arregloCargaHorario,
                                arregloArega,
                                arregloUbicacion,
                                arregloEstadoCivil,
                                arregloOtrosSeguros1,
                                arregloOtrosSeguros2)
                            promesa.then(function (dato) {
                                //$scope.recargarItemsTabla();
                                if (res.hasError) {
                                    $scope.mostrarMensaje(res.mensaje);
                                    blockUI.stop();
                                } else {
                                    $scope.mostrarMensaje("del codigo " + empleadosArray[0].codigo + " hasta el codigo " + empleadosArray[empleadosArray.length - 1].codigo + " ingresados satisfactoriamente, faltan procesar " + $scope.empleadosParaGuardar.length + " fichas de empleados")
                                    $scope.guardarFichasEmpleados($scope.empleadosParaGuardar)
                                }
                            })
                        }
                    })
                } else {
                    $scope.recargarItemsTabla();
                    blockUI.stop();
                }

            }
            $scope.subirExcelRTurnoEmpleados = function (event) {
                blockUI.start();
                //console.log('iniciando carga de pacientes')
                var files = event.target.files;
                var i, f;
                for (i = 0, f = files[i]; i != files.length; ++i) {
                    //console.log('iniciando lectura de excel(s)')
                    var reader = new FileReader();
                    var name = f.name;
                    reader.onload = function (e) {
                        // blockUI.start();
                        var data = e.target.result;

                        var workbook = XLSX.read(data, { type: 'binary' });
                        var first_sheet_name = workbook.SheetNames[0];
                        var row = 2, i = 0;
                        var worksheet = workbook.Sheets[first_sheet_name];
                        var rolturnos = [];
                        do {
                            var rolturno = {};
                            rolturno.codigo = worksheet['A' + row] != undefined && worksheet['A' + row] != "" ? worksheet['A' + row].v.toString() : null;
                            rolturno.tipo = worksheet['F' + row] != undefined && worksheet['F' + row] != "" ? (worksheet['F' + row].v.toString().toUpperCase() == "FIJO") ? true : false : null;
                            rolturno.campo = worksheet['G' + row] != undefined && worksheet['G' + row] != "" ? worksheet['G' + row].v.toString() : null;
                            rolturno.fecha_inicio = worksheet['H' + row] != undefined && worksheet['H' + row] != "" ? $scope.fecha_excel_angular(worksheet['H' + row].v.toString()) : null;
                            rolturno.fecha_fin = worksheet['I' + row] != undefined && worksheet['I' + row] != "" ? $scope.fecha_excel_angular(worksheet['I' + row].v.toString()) : null;
                            rolturno.grupo = worksheet['J' + row] != undefined && worksheet['J' + row] != "" ? worksheet['J' + row].v.toString() : null;
                            rolturno.dias_trabajo = worksheet['K' + row] != undefined && worksheet['K' + row] != "" ? worksheet['K' + row].v.toString() : null;
                            rolturno.dias_descanso = worksheet['L' + row] != undefined && worksheet['L' + row] != "" ? worksheet['L' + row].v.toString() : null;

                            rolturnos.push(rolturno);
                            row++;
                            i++;

                        } while (worksheet['A' + row] != undefined);
                        $scope.guardarRolTurnoEmpleados(rolturnos, $scope.tipoImportacionRol);
                        $scope.limpiarArchivoImportacion()
                    };
                    reader.readAsBinaryString(f);
                    //console.log('pacientes obtenidos')
                }
            }
            $scope.actualizarImportacionRoles = function () {
                $scope.tipoImportacionRol = true
            }
            $scope.importarNuevosRoles = function () {
                $scope.tipoImportacionRol = false
            }
            $scope.guardarRolTurnoEmpleados = function (rolturnos, actualizacion) {
                $scope.rolturnosParaGuardar = rolturnos
                var rolturnosArray = []
                if ($scope.rolturnosParaGuardar.length > 0) {
                    if ($scope.rolturnosParaGuardar.length > 100) {
                        rolturnosArray = $scope.rolturnosParaGuardar.slice(0, 100)
                        $scope.rolturnosParaGuardar = $scope.rolturnosParaGuardar.slice(100, $scope.rolturnosParaGuardar.length)
                    } else {
                        rolturnosArray = $scope.rolturnosParaGuardar
                        $scope.rolturnosParaGuardar = []
                    }
                    var promesa = GuardarImportacionRolTurnoEmpleados(rolturnosArray, $scope.usuario.id_empresa, actualizacion)
                    promesa.then(function (dato) {
                        $scope.mostrarMensaje("faltan procesar " + $scope.rolturnosParaGuardar.length + "roles")
                        $scope.guardarRolTurnoEmpleados($scope.rolturnosParaGuardar, actualizacion)


                        blockUI.stop();
                    })
                } else {
                    $scope.cerrarDialogTipoImportacionRol()
                    $scope.obtenerRecursosHumanos();
                    blockUI.stop();
                }
            }
            $scope.subirExcelFichaEmpleadoFamiliares = function (event) {
                blockUI.start();
                //console.log('iniciando carga de pacientes')
                var files = event.target.files;
                var i, f;
                for (i = 0, f = files[i]; i != files.length; ++i) {
                    //console.log('iniciando lectura de excel(s)')
                    var reader = new FileReader();
                    var name = f.name;
                    reader.onload = function (e) {
                        // blockUI.start();
                        var data = e.target.result;

                        var workbook = XLSX.read(data, { type: 'binary' });
                        var first_sheet_name = workbook.SheetNames[0];
                        var row = 2, i = 0;
                        var worksheet = workbook.Sheets[first_sheet_name];
                        var familiares = [];
                        do {
                            var familiar = {};
                            familiar.codigoEmpleado = worksheet['A' + row] != undefined && worksheet['A' + row] != "" ? worksheet['A' + row].v.toString() : null;
                            //familiar.apellido_paterno = worksheet['B' + row] != undefined && worksheet['B' + row] != "" ? worksheet['B' + row].v.toString() : null;
                            familiar.genero = worksheet['C' + row] != undefined && worksheet['C' + row] != "" ? worksheet['C' + row].v.toString() : null;
                            familiar.nombres = worksheet['D' + row] != undefined && worksheet['D' + row] != "" ? worksheet['D' + row].v.toString() : null;
                            familiar.apellido_paterno = worksheet['E' + row] != undefined && worksheet['E' + row] != "" ? worksheet['E' + row].v.toString() : null;
                            familiar.apellido_materno = worksheet['F' + row] != undefined && worksheet['F' + row] != "" ? worksheet['F' + row].v.toString() : null;
                            familiar.fecha_nacimiento = worksheet['G' + row] != undefined && worksheet['G' + row] != "" ? new Date($scope.fecha_excel_angular(worksheet['G' + row].v.toString())) : null;
                            familiar.relacion = worksheet['H' + row] != undefined && worksheet['H' + row] != "" ? worksheet['H' + row].v.toString() : null;
                            familiar.referencia = worksheet['I' + row] != undefined && worksheet['I' + row] != "" ? worksheet['I' + row].v.toString() : null;
                            familiares.push(familiar);
                            row++;
                            i++;

                        } while (worksheet['A' + row] != undefined);
                        $scope.GuardarFichasEmpleadosFamiliares(familiares);
                        $scope.limpiarArchivoImportacion()
                    };
                    reader.readAsBinaryString(f);
                    //console.log('pacientes obtenidos')
                }
            }
            $scope.GuardarFichasEmpleadosFamiliares = function (familiares) {
                var relaciones = []
                familiares.forEach(function (familiar, index, array) {

                    if (relaciones.length > 0) {
                        bandera = true
                        for (var i = 0; i < relaciones.length; i++) {
                            var element = relaciones[i];
                            if (element === familiar.relacion) {
                                bandera = false
                            }
                        }
                        if (bandera) {
                            relaciones.push(familiar.relacion)
                        }
                    } else {
                        relaciones.push(familiar.relacion)
                    }
                    if (index === (array.length - 1)) {
                        var familiaresEmpleadoEmpresa = new FamiliaresEmpleadoEmpresa({ id_empresa: $scope.usuario.id_empresa, familiares: familiares, relaciones: relaciones });
                        familiaresEmpleadoEmpresa.$save(function (res) {
                            $scope.mostrarMensaje(res.mensaje);
                            $scope.recargarItemsTabla();
                            blockUI.stop();
                        })
                    }
                })

            }
            $scope.subirExcelFicha = function (event) {
                blockUI.start();
                //console.log('iniciando carga de pacientes')
                var files = event.target.files;
                var i, f;
                for (i = 0, f = files[i]; i != files.length; ++i) {
                    //console.log('iniciando lectura de excel(s)')
                    var reader = new FileReader();
                    var name = f.name;
                    reader.onload = function (e) {
                        // blockUI.start();
                        var data = e.target.result;

                        var workbook = XLSX.read(data, { type: 'binary' });
                        var first_sheet_name = workbook.SheetNames[0];
                        var row = 2, i = 0;
                        var worksheet = workbook.Sheets[first_sheet_name];
                        var pacientes = [];
                        do {
                            var paciente = {};
                            paciente.codigo = worksheet['A' + row] != undefined && worksheet['A' + row] != "" ? worksheet['A' + row].v.toString() : null;
                            //paciente.apellido_paterno = worksheet['B' + row] != undefined && worksheet['B' + row] != "" ? worksheet['B' + row].v.toString() : null;
                            paciente.banco = worksheet['C' + row] != undefined && worksheet['C' + row] != "" ? worksheet['C' + row].v.toString() : null;
                            paciente.numero_cuenta = worksheet['D' + row] != undefined && worksheet['D' + row] != "" ? worksheet['D' + row].v.toString() : null;
                            pacientes.push(paciente);
                            row++;
                            i++;

                        } while (worksheet['A' + row] != undefined);
                        $scope.GuardarFichasEmpleadosRh(pacientes);
                        $scope.limpiarArchivoImportacion()
                    };
                    reader.readAsBinaryString(f);
                    //console.log('pacientes obtenidos')
                }
            }
            $scope.subirExcelFichaPre = function (event) {
                blockUI.start();
                //console.log('iniciando carga de pacientes')
                var files = event.target.files;
                var i, f;
                for (i = 0, f = files[i]; i != files.length; ++i) {
                    //console.log('iniciando lectura de excel(s)')
                    var reader = new FileReader();
                    var name = f.name;
                    reader.onload = function (e) {
                        // blockUI.start();
                        var data = e.target.result;

                        var workbook = XLSX.read(data, { type: 'binary' });
                        var first_sheet_name = workbook.SheetNames[0];
                        var row = 2, i = 0;
                        var worksheet = workbook.Sheets[first_sheet_name];
                        var preRequisitos = [];
                        do {
                            var preRequisito = {};
                            preRequisito.codigo = worksheet['A' + row] != undefined && worksheet['A' + row] != "" ? worksheet['A' + row].v.toString() : null;
                            preRequisito.nombre = worksheet['B' + row] != undefined && worksheet['B' + row] != "" ? worksheet['B' + row].v.toString() : null;
                            preRequisito.preRequisito = worksheet['C' + row] != undefined && worksheet['C' + row] != "" ? worksheet['C' + row].v.toString() : null;
                            preRequisito.observacion = worksheet['D' + row] != undefined && worksheet['D' + row] != "" ? worksheet['D' + row].v.toString() : null;
                            preRequisito.pruede_modificar_rrhh = worksheet['E' + row] != undefined && worksheet['E' + row] != "" ? (worksheet['E' + row].v.toString().toUpperCase() == "SI") ? true : false : null;
                            preRequisito.entragado = worksheet['F' + row] != undefined && worksheet['F' + row] != "" ? (worksheet['F' + row].v.toString().toUpperCase() == "SI") ? true : false : null;
                            preRequisito.fecha_entrega = worksheet['G' + row] != undefined && worksheet['G' + row] != "" ? $scope.fecha_excel_angular(worksheet['G' + row].v.toString()) : null;
                            //preRequisito.fecha_entrega = worksheet['H' + row] != undefined && worksheet['H' + row] != "" ? $scope.fecha_excel_angular(worksheet['H' + row].v.toString()) : null;
                            preRequisito.fecha_inicio = $scope.fechaATexto(new Date())
                            preRequisito.fecha_inicio2 = new Date()
                            // preRequisito.fecha_vencimiento = new Date(preRequisito.fecha_inicio.setTime(preRequisito.fecha_inicio.getTime() + (preRequisito.meses * 30) * 86400000))
                            if (preRequisito.entragado == false) {
                                preRequisito.fecha_entrega = null
                            }
                            preRequisitos.push(preRequisito);
                            row++;
                            i++;

                        } while (worksheet['A' + row] != undefined);
                        $scope.guardarImpPreRequisitos(preRequisitos);
                        $scope.limpiarArchivoImportacion()
                    };
                    reader.readAsBinaryString(f);
                    //console.log('pacientes obtenidos')
                }
            }
            $scope.guardarImpPreRequisitos = function (preRequisitos) {
                var promesa = GuardarImportacionPreRequisitos(preRequisitos, $scope.usuario.id_empresa)
                promesa.then(function (dato) {
                    blockUI.stop()
                    $scope.mostrarMensaje(dato.mensaje)
                })
            }

            $scope.subirExcelVacaciones = function (event) {
                $scope.mostrarMensaje('Leyendo archivo de datos...')
                blockUI.start();
                var files = event.target.files;
                var i, f;
                for (i = 0, f = files[i]; i != files.length; ++i) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var data = e.target.result;
                        var workbook = XLSX.read(data, { type: 'binary' });
                        var first_sheet_name = workbook.SheetNames[0];
                        var row = 2
                        var worksheet = workbook.Sheets[first_sheet_name];
                        var vacaciones = [];
                        do {
                            var vacacion = {};
                            vacacion.codigo_empleado = worksheet['A' + row] != undefined && worksheet['A' + row] != "" ? worksheet['A' + row].w.toString() : null;
                            vacacion.fecha_creacion = worksheet['B' + row] != undefined && worksheet['B' + row] != "" ? $scope.confirmDate(worksheet['B' + row].v.toString(), true) : null;
                            vacacion.sabado = worksheet['C' + row] != undefined && worksheet['C' + row] != "" ? worksheet['C' + row].w.toString() : null;
                            vacacion.fecha_inicio = worksheet['D' + row] != undefined && worksheet['D' + row] != "" ? $scope.confirmDate(worksheet['D' + row].v.toString(), true) : null;
                            vacacion.fecha_fin = worksheet['E' + row] != undefined && worksheet['E' + row] != "" ? $scope.confirmDate(worksheet['E' + row].v.toString(), true) : null;
                            vacacion.dias_previstos = worksheet['F' + row] != undefined && worksheet['F' + row] != "" ? worksheet['F' + row].w.toString() : null;
                            vacacion.observacion = worksheet['G' + row] != undefined && worksheet['G' + row] != "" ? worksheet['G' + row].w.toString() : null;
                            vacacion.row = row
                            vacaciones.push(vacacion);
                            row++;
                            i++;
                        } while (worksheet['A' + row] != undefined);
                        $scope.guardarImportacionVacaciones(vacaciones);
                        $scope.limpiarArchivoImportacion()
                    };
                    reader.readAsBinaryString(f);
                    reader.onerror = () => {
                        $scope.limpiarArchivoImportacion()
                        $scope.mostrarMensaje(this.error);
                        return
                    }
                }
                blockUI.stop();
            }
            $scope.guardarImportacionVacaciones = function (vacaciones) {
                $scope.mostrarMensaje('Esperando Respuesta...')
                blockUI.start();
                let promesa = GuardarExcelImportacionVacaciones($scope.usuario.id, vacaciones, $scope.usuario.id_empresa)
                promesa.then(function (dato) {
                    blockUI.stop();
                    if (dato.mensajes.length > 10) {
                        $scope.mostrarMensaje(dato.mensaje + ' <br /> SE GENERARÁ PDF DE LOS ERRORES ENCONTRADOS.');
                        $scope.imprimirPdfErrores(dato.mensajes);
                    } else {
                        $scope.mostrarMensaje(dato.mensaje + dato.mensajes);
                    }
                }).catch((err) => {
                    blockUI.stop();
                    let msg = (err.stack !== undefined && err.stack !== null) ? err.stack : (err.message !== undefined && err.message !== null) ? err.message : 'Se perdió la conexión.';
                    $scope.mostrarMensaje(msg);
                })
            }
            $scope.imprimirPdfErrores = function (lista) {
                if (lista) {
                    if (lista.length === 0) {
                        return
                    }
                }
                let doc = new PDFDocument({ size: 'letter', margin: 10, compress: false });//[612, 792] {compress: false},
                let stream = doc.pipe(blobStream());
                let y = 190
                let itemsPorPagina = 20
                let items = 0
                let pagina = 1
                let cubeX = 70
                let totalPaginas = Math.ceil(1 / itemsPorPagina);
                if ($scope.imagenEmpresa) {
                    doc.image($scope.imagenEmpresa, 40, 30, { fit: [100, 100] });
                }
                doc.font('Helvetica-Bold', 10);
                doc.text('Errores encontrados al importar vacaciones : ', cubeX + 150 + 29, 90 + 7, { width: 200 })
                for (var i = 0; i < lista.length; i++) {
                    doc.font('Helvetica', 8);
                    doc.font('Helvetica', 8).fill('black')
                    doc.text(lista[i], cubeX + 3, y + 7);
                    y = y + 20;
                    items++;
                    if (items > itemsPorPagina || (y > 700)) {
                        if (cubeX > 250) {
                            doc.addPage({ size: [612, 792], margin: 10 });
                            cubeX = 70
                        } else {
                            cubeX += 250
                        }
                        y = 190;
                        items = 0;
                        doc.font('Helvetica-Bold', 10);
                    }
                }
                y = y + 20;
                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
                stream.on('error', () => $scope.mostrarMensaje(this.error))
            }
            $scope.extraerFechaExcel = function (datoFecha) {
                var horas = datoFecha.split(' ')[datoFecha.split(' ').length - 1]
                var fecha = datoFecha.split(' ')[0].split('/').reverse()
                if (horas.indexOf('AM') > 0) {
                    horas = horas.split('A')[0].split(':')
                } else if (horas.indexOf('PM') > 0) {
                    horas = horas.split('P')[0].split(':')
                    if ((parseInt(horas[0])) < 12) {
                        horas[0] = (parseInt(horas[0]) + 12) + ''
                    }
                }
                var fecha_texto = fecha[0] + '-' + (fecha[2].length == 2 ? fecha[2] : '0' + fecha[2]) + '-' + (fecha[1].length == 2 ? fecha[1] : '0' + fecha[1]) + 'T' + (horas[0].length == 2 ? horas[0] : '0' + horas[0]) + ':' + (horas[1].length == 2 ? horas[1] : '0' + horas[1]) + ':' + (horas[2].length == 2 ? horas[2] : '0' + horas[2]) + '.000Z'
                var fechaCompleta = new Date(fecha[0], fecha[2] - 1, fecha[1], (horas[0].length == 2 ? horas[0] : '0' + horas[0]), (horas[1].length == 2 ? horas[1] : '0' + horas[1]), (horas[2].length == 2 ? horas[2] : '0' + horas[2]))
                return fechaCompleta, fecha_texto
            }
            // $scope.fecha_excel_angular = function (fecha_desde_excel) {
            //     var fecha_minima_angular_indice_excel_1970 = 25569 - 1 //fecha minima angular. el -1 es para ajustar que el resultado que daba 1 anterior a la fecha real.
            //     var fecha_excel = new Date(1 / 1 / 1970)
            //     var diferencia_de_fecha = fecha_desde_excel - fecha_minima_angular_indice_excel_1970
            //     return fecha_excel.setTime(fecha_excel.getTime() + diferencia_de_fecha * 86400000)
            // }
            $scope.confirmDate = (dateString) => {
                //retorna una fecha [Object Date] o NaN en caso de que falle.
                if (dateString.indexOf('-') > -1 || dateString.indexOf('/') > -1) { //si la fecha es obtenida desde un archivo excel, generalmente se toma un valor entero (651651) y no un formato fecha (dd/mm/yyyy)... por tanto no ingresaria aquí
                    let splitedDate = dateString.split(' ') // Si la fecha viene en formato Date time o ISO (yyyy-mm-dd HH:MM:SS o yyyy-mm-dd HH:MM:SS.zzz Z) 
                    let theActualDate = splitedDate[0]
                    if (theActualDate.indexOf('/') > -1) {
                        // verificar si tal vez esta en el formato dd/mm/yyyy hay que invertir el orden para generar una fecha.
                        let splitDate = theActualDate.split('/')
                        if (splitDate[0].length === 4) {
                            let dateToCheck2 = new Date(splitDate)
                            let dateIsoString = dateToCheck2.toISOString().split(' ')[0] // esto devuelve la fecha utc 0 en una cadena (yyyy-mm-dd HH:MM:SS.zzz Z), se la divide(split) y compara que el día, mes, año concuerden con la cadena recibida.
                            if (dateIsoString.split('-')[0] === reverseSplitDate[0] && dateIsoString.split('-')[1] === reverseSplitDate[1] && dateIsoString.split('-')[2] === reverseSplitDate[2]) { //se la divide(split) y compara que el día, mes, año concuerden con la cadena recibida.
                                //las cadenas concuerdan, se retorna la fecha.
                                return dateToCheck2
                            }
                        } else if (splitDate[2].length === 4) {
                            let dateToCheck2 = new Date(splitDate.reverse())
                            if (dateToCheck2 && Object.prototype.toString.call(dateToCheck2) === "[object Date]" && !isNaN(dateToCheck2)) {
                                let dateIsoString = dateToCheck2.toISOString().split(' ')[0] // esto devuelve la fecha utc 0 en una cadena (yyyy-mm-dd HH:MM:SS.zzz Z), se la divide(split) y compara que el día, mes, año concuerden con la cadena recibida.
                                if (dateIsoString.split('-')[0] === reverseSplitDate[0] && dateIsoString.split('-')[1] === reverseSplitDate[1] && dateIsoString.split('-')[2] === reverseSplitDate[2]) { //se la divide(split) y compara que el día, mes, año concuerden con la cadena recibida.
                                    //las cadenas concuerdan, se retorna la fecha.
                                    return dateToCheck2
                                }
                                return NaN
                            }
                            return NaN
                        } else {
                            return NaN
                        }
                    } else if (theActualDate.indexOf('-') > -1) {
                        // verificar si tal vez esta en el formato yyyy-mm-dd
                        let splitDate = theActualDate.split('-')
                        if (splitDate[0].length === 4) {
                            let dateToCheck2 = new Date(splitDate)
                            let dateIsoString = dateToCheck2.toISOString().split('T')[0] // esto devuelve la fecha utc 0 en una cadena (yyyy-mm-dd HH:MM:SS.zzz Z), se la divide(split) y compara que el día, mes, año concuerden con la cadena recibida.
                            if (dateIsoString.split('-')[0] === splitDate[0] && dateIsoString.split('-')[1] === splitDate[1] && dateIsoString.split('-')[2] === splitDate[2]) { //se la divide(split) y compara que el día, mes, año concuerden con la cadena recibida.
                                //las cadenas concuerdan, se retorna la fecha.
                                return dateToCheck2
                            }
                        } else if (splitDate[2].length === 4) {
                            let dateToCheck2 = new Date(splitDate.reverse())
                            if (dateToCheck2 && Object.prototype.toString.call(dateToCheck2) === "[object Date]" && !isNaN(dateToCheck2)) {
                                let dateIsoString = dateToCheck2.toISOString().split('T')[0] // esto devuelve la fecha utc 0 en una cadena (yyyy-mm-ddTHH:MM:SS.zzz Z), se la divide(split) y compara que el día, mes, año concuerden con la cadena recibida.
                                if (dateIsoString.split('-')[0] === splitDate[0] && dateIsoString.split('-')[1] === splitDate[1] && dateIsoString.split('-')[2] === splitDate[2]) { //se la divide(split) y compara que el día, mes, año concuerden con la cadena recibida.
                                    //las cadenas concuerdan, se retorna la fecha.
                                    return dateToCheck2
                                }
                                return NaN
                            }
                            return NaN
                        } else {
                            return NaN
                        }
                    } else {
                        return NaN
                    }
                } else {
                    //se espera un valor númerico entero
                    if (!isNaN(Number.isInteger(parseInt(dateString)))) {
                        let fechaDesdeExcel = $scope.fecha_excel_angular(parseInt(dateString))
                        return fechaDesdeExcel // Si es un número entero no hay mas comprobaciones por realizar luego de pasar el valor por la funcion fecha_excel_angular...
                    }
                    return NaN
                }
            }

            $scope.GuardarEmpleadosRh = function (lstpacientes) {
                $scope.empleadosParaGuardar = lstpacientes
                var empleadosArray = []
                if ($scope.empleadosParaGuardar.length > 0) {
                    if ($scope.empleadosParaGuardar.length > 100) {
                        empleadosArray = $scope.empleadosParaGuardar.slice(0, 100)
                        $scope.empleadosParaGuardar = $scope.empleadosParaGuardar.slice(100, $scope.empleadosParaGuardar.length)
                    } else {
                        empleadosArray = $scope.empleadosParaGuardar
                        $scope.empleadosParaGuardar = []
                    }

                    var arregloSucursales = []
                    var arregloCargo = []
                    var arregloContrato = []
                    var arregloExpedido = []
                    var arregloSegurosSalud = []
                    empleadosArray.forEach(function (pacienteActual, index3, array3) {
                        var bandera = false
                        if (arregloSucursales.length > 0) {
                            for (var i = 0; i < arregloSucursales.length; i++) {
                                var element = arregloSucursales[i];
                                if (pacienteActual.campamento != null) {
                                    if (element == pacienteActual.campamento) {
                                        bandera = true
                                    }
                                }
                            }
                            if (!bandera) {
                                if (pacienteActual.campamento != null) {
                                    arregloSucursales.push(pacienteActual.campamento)
                                }

                            }
                        } else {
                            if (pacienteActual.campamento != null) {
                                arregloSucursales.push(pacienteActual.campamento)
                            }
                        }
                        var bandera2 = false
                        if (arregloCargo.length > 0) {
                            for (var i = 0; i < arregloCargo.length; i++) {
                                var element = arregloCargo[i];
                                if (pacienteActual.cargo != null) {
                                    if (element == pacienteActual.cargo) {
                                        bandera2 = true
                                    }
                                }
                            }
                            if (!bandera2) {
                                if (pacienteActual.cargo != null) {
                                    arregloCargo.push(pacienteActual.cargo)
                                }
                            }
                        } else {
                            if (pacienteActual.cargo != null) {
                                arregloCargo.push(pacienteActual.cargo)
                            }
                        }
                        var bandera3 = false
                        if (arregloContrato.length > 0) {
                            for (var i = 0; i < arregloContrato.length; i++) {
                                var element = arregloContrato[i];
                                if (pacienteActual.contrato != null) {
                                    if (element == pacienteActual.contrato) {
                                        bandera3 = true
                                    }
                                }
                            }
                            if (!bandera3) {
                                if (pacienteActual.contrato != null) {
                                    arregloContrato.push(pacienteActual.contrato)
                                }
                            }
                        } else {
                            if (pacienteActual.contrato != null) {
                                arregloContrato.push(pacienteActual.contrato)
                            }
                        }
                        var bandera4 = false
                        if (arregloExpedido.length > 0) {
                            for (var i = 0; i < arregloExpedido.length; i++) {
                                var element = arregloExpedido[i];
                                if (pacienteActual.extension != null) {
                                    if (element == pacienteActual.extension) {
                                        bandera4 = true
                                    }
                                }
                            }
                            if (!bandera4) {
                                if (pacienteActual.extension != null) {
                                    arregloExpedido.push(pacienteActual.extension)
                                }
                            }
                        } else {
                            if (pacienteActual.extension != null) {
                                arregloExpedido.push(pacienteActual.extension)
                            }
                        }
                        var bandera5 = false
                        if (arregloSegurosSalud.length > 0) {
                            for (var i = 0; i < arregloSegurosSalud.length; i++) {
                                var element = arregloSegurosSalud[i];
                                if (pacienteActual.seguro_salud != null) {
                                    if (element == pacienteActual.seguro_salud) {
                                        bandera5 = true
                                    }
                                }
                            }
                            if (!bandera5) {
                                if (pacienteActual.seguro_salud != null) {
                                    arregloSegurosSalud.push(pacienteActual.seguro_salud)
                                }
                            }
                        } else {
                            if (pacienteActual.seguro_salud != null) {
                                arregloSegurosSalud.push(pacienteActual.seguro_salud)
                            }
                        }

                        if (index3 === (array3.length - 1)) {
                            var promesa = GuardarEmpleadoEmpresaI(empleadosArray, $scope.usuario.id_empresa, arregloSucursales,
                                arregloCargo,
                                arregloContrato,
                                arregloExpedido,
                                arregloSegurosSalud)
                            promesa.then(function (res) {
                                //$scope.mostrarMensaje(res.mensaje);
                                //$scope.recargarItemsTabla();
                                if (res.hasError) {
                                    $scope.mostrarMensaje(res.mensaje);
                                    blockUI.stop();
                                } else {
                                    $scope.mostrarMensaje("del codigo " + empleadosArray[0].codigo + " hasta el codigo " + empleadosArray[empleadosArray.length - 1].codigo + " ingresados satisfactoriamente, faltan procesar " + $scope.empleadosParaGuardar.length + " empleados")
                                    $scope.GuardarEmpleadosRh($scope.empleadosParaGuardar)
                                }


                            })
                            /* var empleadoEmpresa = new EmpleadoEmpresa({ pacientes: lstpacientes, id_empresa: $scope.usuario.id_empresa,
                                arregloSucursales:arregloSucursales,
                                arregloCargo:arregloCargo,
                                arregloContrato:arregloContrato,
                                arregloExpedido:arregloExpedido,
                                arregloSegurosSalud:arregloSegurosSalud });
                            empleadoEmpresa.$save(function (res) {
                                $scope.mostrarMensaje(res.mensaje);
                                $scope.recargarItemsTabla();
                                blockUI.stop();
                            }) */
                        }
                    })
                } else {
                    $scope.obtenerRecursosHumanos();
                    blockUI.stop();
                }
                // , function (error) {

                //     $scope.mostrarMensaje('Ocurrio un problema al momento de guardar!');
                //     $scope.recargarItemsTabla();
                // });

            }
            $scope.GuardarFichasEmpleadosRh = function (lstpacientes) {
                var arreglobancos = []
                lstpacientes.forEach(function (pacienteActual, index, array) {
                    var bandera = false
                    if (arreglobancos.length > 0) {
                        for (var i = 0; i < arreglobancos.length; i++) {
                            var element = arreglobancos[i];
                            if (element == pacienteActual.banco) {
                                bandera = true
                            }
                        }
                        if (!bandera) {
                            arreglobancos.push(pacienteActual.banco)
                        }
                    } else {
                        arreglobancos.push(pacienteActual.banco)
                    }
                    if (index === (array.length - 1)) {
                        var empleadoEmpresa = new FichasEmpleadoEmpresa({ pacientes: lstpacientes, id_empresa: $scope.usuario.id_empresa, bancos: arreglobancos });
                        empleadoEmpresa.$save(function (res) {
                            $scope.mostrarMensaje(res.mensaje);
                            $scope.recargarItemsTabla();
                            blockUI.stop();
                        })
                    }
                })

                // , function (error) {

                //     $scope.mostrarMensaje('Ocurrio un problema al momento de guardar!');
                //     $scope.recargarItemsTabla();
                // });

            }


            $scope.modificarEmpleado = function (elpaciente) {
                $scope.steps = [{ cabeza: "cabeza-nuevo-datos-personales", cuerpo: "cuerpo-nuevo-datos-personales" },
                { cabeza: "cabeza-nuevo-datos-comple", cuerpo: "cuerpo-nuevo-datos-comple" },
                { cabeza: "cabeza-nuevo-datos-laborales", cuerpo: "cuerpo-nuevo-datos-laborales" }

                ];
                $scope.CIanterior = elpaciente.ci;
                promesaPaciente = obtenerEmpleadoRh(elpaciente.id)
                promesaPaciente.then(function (dato) {

                    if (dato.clase != undefined) {
                        dato.medicoPaciente.tipo_contrato = dato.clase
                    }
                    $scope.nuevoRH = dato.medicoPaciente
                    $scope.nuevoRH.persona.fecha_nacimiento = $scope.fechaATexto($scope.nuevoRH.persona.fecha_nacimiento)
                    $scope.seleccionarCargos($scope.nuevoRH.empleadosFichas[($scope.nuevoRH.empleadosFichas.length - 1)].cargos)
                })
                $scope.abrirPopup($scope.idModalRhNuevo);
            }

            $scope.validarCodigoCuentaEmpleado = function (CodigoCuenta) {
                var codigo = CodigoCuenta;
                if (codigo != '') {
                    $timeout(function () {
                        $scope.validar = new ValidarCodigoCuentaEmpleado();

                        $scope.validar.codigo = CodigoCuenta;

                        $scope.validar.$save({ id_empresa: $scope.usuario.id_empresa }, function (data) {
                            $scope.data = data;
                        })
                    }, 1500);
                }
            };

            $scope.eliminarFamiliarRh = function () {
                var promesa = EliminarFamiliarRh($scope.familiar)
                promesa.then(function (dato) {
                    $scope.ficha.empleado.familiares.splice($scope.familiar.index, 1);
                    $scope.familiar = null
                    $scope.cerrarDialogEliminarFamiliarEmpleado()
                    $scope.mostrarMensaje(dato.mensaje)
                })
            }
            $scope.eliminarOtroSeguroRh = function (otroSeguro) {
                var promesa = EliminarOtroSeguroRh(otroSeguro)
                promesa.then(function (dato) {
                    $scope.ficha.otrosSeguros.splice(otroSeguro.index, 1);

                    // $scope.ficha.empleado.otrosSeguros.splice($scope.ficha.empleado.otrosSeguros.indexOf(otroSeguro.index), 1);
                    $scope.otroSeguro = null

                    $scope.cerrarDialogEliminarSeguroEmpleado()
                    $scope.mostrarMensaje(dato.mensaje)
                })
            }


            $scope.finVerEmpleado = function () {
                var button = $('#siguiente-v').text().trim()
                if (button != "Siguiente") {
                    $scope.cerrarDialogVerEmpleado()
                }

            }

            $scope.obtenerDatosFichaUsuario = function (empleado, nuevaFicha) {
                const promesa = UsuarioRecursosHumanosFicha(empleado.id);
                promesa.then(function (datos) {
                    if (datos.ficha) {
                        $scope.ficha = datos.ficha;
                        $scope.ficha.editDatosLaborales = false;
                        if (empleado.reactivado) {
                            $scope.ficha.haber_basico = null;
                        }
                        if ($scope.ficha.fecha_inicio) {
                            if (empleado.reactivado) {
                                $scope.ficha.fecha_inicio2 = $scope.fechaATexto(new Date());
                            } else {
                                $scope.ficha.fecha_inicio2 = $scope.fechaATexto($scope.ficha.fecha_inicio);
                            }
                        } else {
                            $scope.ficha.editDatosLaborales = true
                        }
                        if ($scope.ficha.fecha_fin) {
                            $scope.ficha.fecha_fin2 = $scope.fechaATexto($scope.ficha.fecha_fin)
                        }

                        $scope.ficha.cargo = []

                        /* $scope.empleado.otrosSeguros = datos.ficha */
                        $scope.ficha.fecha_jubilacion = new Date($scope.ficha.fecha_jubilacion)
                        $scope.ficha.empleado.fecha_vence_documento = new Date($scope.ficha.empleado.fecha_vence_documento)
                        $scope.ficha.fecha_jubilacion = $scope.fechaATexto($scope.ficha.fecha_jubilacion)
                        $scope.ficha.vencimiento_carnet_discapacidad = $scope.ficha.vencimiento_carnet_discapacidad ? $scope.ficha.vencimiento_carnet_discapacidad.split('T')[0].split('-').reverse().join('/') : ""
                        $scope.ficha.empleado.fecha_vence_documento = $scope.fechaATexto($scope.ficha.empleado.fecha_vence_documento)
                        $scope.buscarDepartamento(datos.ficha.empleado.persona.pais)
                        $scope.buscarMunicipios(datos.ficha.empleado.persona.ciudad)
                        $scope.buscarLocalidad(datos.ficha.empleado.persona.provincia)

                        var fechaActual = new Date();
                        var fechaNacimiento = new Date($scope.ficha.empleado.persona.fecha_nacimiento)
                        $scope.ficha.nac_anio = fechaNacimiento.getFullYear()
                        $scope.ficha.nac_dia = fechaNacimiento.getDate()
                        var mesNac = fechaNacimiento.getMonth()
                        $scope.meses.forEach(function (mes, index, array) {
                            if (mes.id == mesNac) {
                                $scope.ficha.nac_mes = mes
                                $scope.getDaysInMonth($scope.ficha.nac_mes.id, $scope.ficha.nac_anio)
                            }
                        });
                        if ($scope.ficha.fecha && !nuevaFicha) {
                            var fecha = new Date($scope.ficha.fecha)
                        } else {
                            var fecha = new Date()
                        }
                        $scope.ficha.fecha_elaboracion = fecha.getDate() + "/" + (fecha.getMonth() + 1) + "/" + fecha.getFullYear()
                        // var dato = $scope.diferenciaEntreDiasEnDias(fechaNacimiento, fechaActual)
                        // $scope.ficha.edad = Math.trunc(dato / 365);
                        $scope.ficha.edad = $scope.obtenerEdad($scope.ficha.empleado.persona.fecha_nacimiento)

                        $scope.ficha.empleado.familiares.forEach(function (familiar, index, array) {
                            var fechaActual = new Date()
                            familiar.persona.afiliado = familiar.afiliado
                            // var fechaNacimiento = new Date(familiar.persona.fecha_nacimiento)

                            // var dato = $scope.diferenciaEntreDiasEnDias(fechaNacimiento, fechaActual)
                            familiar.edad = $scope.obtenerEdad(familiar.persona.fecha_nacimiento);
                            familiar.eliminado = false
                        });
                        $scope.ficha.otrosSeguros.forEach(function (otroSeguro, index, array) {
                            otroSeguro.eliminado = false
                        })

                        if (empleado.cargos.length > 0 && empleado.reactivado) {
                            $scope.seleccionarCargosReactivado($scope.ficha.cargos, $scope.ficha.cargo);
                        } else {
                            $scope.seleccionarCargos($scope.ficha.cargos)
                        }

                        $scope.seleccionarDiscapacidades($scope.ficha.discapacidades)
                        if (nuevaFicha) {

                            setTimeout(function () {

                                $scope.ficha.editDatosLaborales = true
                                $scope.ficha.fecha_inicio2 = $scope.fechaATexto(new Date())
                                $("#siguiente-f").click()
                            }, 200);
                        }
                        //llenarCargos($scope.cargos)
                    }/*  else {

                    $scope.ficha = { empleado: datos.empleado, pacienteReferencia: {}, editDatosLaborales: false }
                    $scope.ficha.empleado.cargo = []
                    $scope.ficha.empleado.otrosSeguros = []
                    $scope.ficha.empleado.familiares = []
                    $scope.ficha.empleado.persona.correo_electronico = datos.empleado.persona.correo_electronico
                    $scope.seleccionarCargos($scope.ficha.empleado.cargos)
                    $scope.seleccionarDiscapacidades($scope.ficha.discapacidades)
                    var fechaActual = new Date();
                    $scope.ficha.fecha_elaboracion = fechaActual.getDate() + "/" + (fechaActual.getMonth() + 1) + "/" + fechaActual.getFullYear()
                    var fechaNacimiento = new Date($scope.ficha.empleado.persona.fecha_nacimiento)
                    $scope.ficha.nac_anio = fechaNacimiento.getFullYear()
                    $scope.ficha.nac_dia = fechaNacimiento.getDate()
                    var mesNac = fechaNacimiento.getMonth()
                    $scope.meses.forEach(function (mes, index,array) {
                        if (mes.id == mesNac) {
                            $scope.ficha.nac_mes = mes
                            $scope.getDaysInMonth($scope.ficha.nac_mes.id, $scope.ficha.nac_anio)
                        }
                    });
                    var dato = $scope.diferenciaEntreDiasEnDias(fechaNacimiento, fechaActual)
                    $scope.ficha.edad = Math.trunc(dato / 365)
                } */
                    blockUI.stop();
                });

            }

            $scope.seleccionarCargosReactivado = function (cargosEmpleado, cargoFicha) {
                for (var i = 0; i < $scope.cargos.length; i++) {
                    for (var j = 0; j < cargosEmpleado.length; j++) {
                        if ($scope.cargos[i].id == cargosEmpleado[j].id_cargo) {
                            $scope.cargos[i].ticked = true;
                            cargoFicha.push($scope.cargos[i]);
                            if (cargosEmpleado[j].principal) {
                                $scope.ficha.cargoPrincipal = $scope.cargos[i];
                            }
                        }
                    }
                }
            }

            $scope.seleccionarCargos = function (cargosEmpleado) {
                for (var i = 0; i < $scope.cargos.length; i++) {
                    for (var j = 0; j < cargosEmpleado.length; j++) {
                        if ($scope.cargos[i].id == cargosEmpleado[j].id_cargo) {
                            $scope.cargos[i].ticked = true;
                            if (cargosEmpleado[j].principal) {
                                $scope.ficha.cargoPrincipal = $scope.cargos[i];
                            }
                        }
                    }
                }
            }
            $scope.seleccionarCargosPrerequisito = function (cargosPrerequisito) {
                for (var i = 0; i < $scope.cargos.length; i++) {
                    for (var j = 0; j < cargosPrerequisito.length; j++) {
                        if ($scope.cargos[i].id == cargosPrerequisito[j].id_cargo) {
                            $scope.cargos[i].ticked = true;
                        }
                    }
                }
            }
            $scope.llenarCargos = function (cargos) {
                $scope.cargos = [];
                for (var i = 0; i < cargos.length; i++) {
                    if (cargos[i].habilitado) {
                        var cargo = {
                            nombre: cargos[i].nombre,
                            maker: "",
                            ticked: false,
                            id: cargos[i].id
                        }
                        $scope.cargos.push(cargo);
                    }
                }
            }
            $scope.seleccionarDiscapacidades = function (discapacidadesEmpleado) {
                if($scope.discapacidades){
                    for (var i = 0; i < $scope.discapacidades.length; i++) {
                        for (var j = 0; j < discapacidadesEmpleado.length; j++) {
                            if ($scope.discapacidades[i].id == discapacidadesEmpleado[j].id_discapacidad) {
                                $scope.discapacidades[i].ticked = true;
                            }
                        }
                    }
                }
            }

            $scope.llenarDiscapacidades = function (discapacidades) {
                $scope.discapacidades = [];

                for (var i = 0; i < discapacidades.length; i++) {
                    var discapacidade = {
                        nombre: discapacidades[i].nombre,
                        maker: "",
                        ticked: false,
                        id: discapacidades[i].id
                    }
                    $scope.discapacidades.push(discapacidade);
                }

            }
            $scope.diferenciaEntreDiasEnDias = function (a, b) {
                var MILISENGUNDOS_POR_DIA = 1000 * 60 * 60 * 24;
                var utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
                var utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());

                return Math.floor((utc2 - utc1) / MILISENGUNDOS_POR_DIA);
            }

            $scope.obtenerDatosPrerequisito = function (paciente, filtro) {
                blockUI.start();
                if (filtro.inicio != undefined) {
                    if (filtro.inicio != 0 && filtro.inicio != "") {
                        $scope.filtro.inicio = (filtro.inicio instanceof Date) ? filtro.inicio : new Date($scope.convertirFecha(filtro.inicio));
                    } else {
                        $scope.filtro.inicio = 0
                    }
                } else {
                    $scope.filtro.inicio = 0
                }
                if (filtro.fin != undefined) {
                    if (filtro.fin != 0 && filtro.fin != "") {
                        $scope.filtro.fin = (filtro.fin instanceof Date) ? filtro.fin : new Date($scope.convertirFecha(filtro.fin));
                    } else {
                        $scope.filtro.fin = 0
                    }
                } else {
                    $scope.filtro.fin = 0
                }
                var promesa = ListaPrerequisitosPaciente(paciente.id, $scope.filtro);
                promesa.then(function (preRequisitos) {
                    $scope.prerequisitosPaciente = preRequisitos.Prerequisitos;
                    $scope.prerequisitosPaciente.forEach(function (requisito) {
                        if (requisito.fecha_entrega != null) {
                            requisito.entregado = true
                        }
                    })

                    $scope.filtro.inicio = ($scope.filtro.inicio instanceof Date) ? $scope.filtro.inicio.getDate() + '/' + ($scope.filtro.inicio.getMonth() + 1) + '/' + $scope.filtro.inicio.getFullYear() : ""
                    $scope.filtro.fin = ($scope.filtro.fin instanceof Date) ? $scope.filtro.fin.getDate() + '/' + ($scope.filtro.fin.getMonth() + 1) + '/' + $scope.filtro.fin.getFullYear() : ""
                    blockUI.stop();
                }, function (error) {
                    $scope.mostrarMensaje('Se produjo un error al obtener datos de prerequisitos')
                    blockUI.stop();
                });
            }
            /* $scope.saveFormPrerequisito = function (nuevoPrerequisito, cargosPre) {
                blockUI.start();
                nuevoPrerequisito.cargos = cargosPre
                if (nuevoPrerequisito.nombre != undefined && nuevoPrerequisito.vencimiento_mes != undefined) {
                    var prom = PrerequisitosSave(nuevoPrerequisito, $scope.usuario.id_empresa)
                    prom.then(function (res) {
                        $scope.mostrarMensaje(res.mensaje);
                        $scope.cargosPre = []
                        $scope.cerrarDialogPrerequisitoNuevo();
                        $scope.obtenerCargos()
                        blockUI.stop();
                        $scope.verificarAsignacionPrerequisitos($scope.empleado)
                    }).catch(function (err) {
                        blockUI.stop()
                        var msg = (err.stack !== undefined && err.stack !== null) ? err.stack : (err.message !== undefined && err.message !== null) ? err.message : 'Se perdió la conexión.'
                        $scope.mostrarMensaje(msg)
                    })
                } else {
                    $scope.mostrarMensaje('Los campos Prerequisito Nombre y vencimiento mes son requeridos.')
                    blockUI.stop();
                }

            } */
            $scope.preRequisitosEmpresa = [];
            $scope.verificarAsignacionPrerequisitos = function (empleado) {
                if (empleado) {
                    blockUI.start();
                    var requisitos = ListaPrerequisitosEmpleado(empleado.cargos.map(cargo => cargo.id).join(','))
                    requisitos.then(function (prerequisitos) {
                        $scope.preRequisitos = prerequisitos.prerequisitos
                        filtro = { inicio: 0, fin: 0 }
                        var promesa = ListaPrerequisitosPaciente($scope.empleado.id, filtro);
                        promesa.then(function (preRequisitos) {
                            $scope.prerequisitosPaciente = preRequisitos.Prerequisitos;
                            if ($scope.preRequisitos.length > 0) {
                                var requisitosRestantes = []
                                $scope.preRequisitos.forEach(function (requisito, index, array) {
                                    if ($scope.prerequisitosPaciente.length > 0) {

                                        var requisitoFueAsignado = $scope.prerequisitosPaciente.find(function (dato, index, array) {
                                            return dato.id_prerequisito == requisito.id
                                        })
                                        if (!requisitoFueAsignado) {
                                            requisitosRestantes.push(requisito)
                                        }
                                        $scope.prerequisitosPaciente.forEach(function (preRe) {
                                            if (preRe.fecha_vencimiento) {
                                                var fechaInicio = new Date(preRe.fecha_vencimiento)
                                                var fechaFin = new Date()
                                                var fecha1 = moment('"' + fechaInicio.getFullYear() + '-' + fechaInicio.getMonth() + '-' + fechaInicio.getDate() + " " + fechaInicio.getHours() + ":" + fechaInicio.getMinutes() + ":00", "YYYY-MM-DD HH:mm:ss");
                                                var fecha2 = moment('"' + fechaFin.getFullYear() + '-' + fechaFin.getMonth() + '-' + fechaFin.getDate() + " " + fechaFin.getHours() + ":" + fechaFin.getMinutes() + ":00", "YYYY-MM-DD HH:mm:ss");

                                                var diff = fecha1.diff(fecha2, 'd');
                                                if (diff <= 0) {
                                                    preRe.verIconoEntregado = true
                                                } else {
                                                    preRe.verIconoEntregado = false
                                                }
                                            } else {
                                                preRe.verIconoEntregado = false
                                            }
                                            if (requisito.id == preRe.id_prerequisito) {
                                                if (preRe.eliminado) {
                                                    requisito.asignado = false
                                                } else {
                                                    requisito.asignado = true
                                                }
                                            }
                                            if (preRe.fecha_entrega != null) {
                                                preRe.entregado = true
                                            }
                                        });

                                    } else {
                                        requisito.asignado = true
                                        $scope.asignarPrerequisito(requisito, $scope.empleado)

                                    }
                                    if (index === (array.length - 1)) {
                                        if (requisitosRestantes.length > 0) {
                                            requisitosRestantes.forEach(function (requisito, index, array) {
                                                requisito.asignado = true
                                                $scope.asignarPrerequisito(requisito, $scope.empleado)
                                            })
                                        }
                                    }
                                });
                            }
                            blockUI.stop();
                        });
                    })
                }
            }
            $scope.diasVencidosPrerequisito = function (fechaVencimiento) {
                var MILISENGUNDOS_POR_DIA = 1000 * 60 * 60 * 24;
                var hoy = new Date().getTime()
                var vencimiento = fechaVencimiento.getTime()
                var calculo = hoy - vencimiento
                var dias = Math.floor(calculo / MILISENGUNDOS_POR_DIA)
                return dias
            }
            $scope.calcularFechaVencimientoRequisito = function (requisito) {
                var meses = (requisito.vencimiento_mes === undefined) ? requisito.preRequisito.vencimiento_mes : requisito.vencimiento_mes
                var fechaControl = new Date()
                var fecha_inicio = new Date($scope.convertirFecha(requisito.fecha_entrega_texto))
                /* if (requisito.fecha_inicio_texto === undefined) {
                    var otra_fecha = $scope.fechaATexto(requisito.fecha_inicio)
                } */
                /*                 var fecha_cortada = (requisito.fecha_inicio_texto === undefined) ? otra_fecha.split('/') : requisito.fecha_inicio_texto.split('/')
                                var dia = parseInt(fecha_cortada[0])
                                var mes = parseInt(fecha_cortada[1])
                                var anio = parseInt(fecha_cortada[2])
                                fecha_inicio.setFullYear(anio, mes - 1, dia) */
                // if($scope.fechaATexto(requisito.fecha_inicio) == requisito.fecha_inicio_texto){
                //     console.log('son iguales')
                // }else{
                //     console.log('no son iguales')
                // }
                var mesVence = new Date(fecha_inicio.getFullYear(), fecha_inicio.getMonth() + meses + 1, 0);
                /*  if ($scope.meses[fecha_inicio.getMonth() + meses].nombre == "Febrero") {
                     if (fecha_inicio.getDate() == "29" || fecha_inicio.getDate() == "30" || fecha_inicio.getDate() == "31") {
                         var fecha_vencimiento = new Date(fecha_inicio.getFullYear(), fecha_inicio.getMonth() + meses + 1, 0);
                     }
                 } else {
                     var fecha_vencimiento = new Date(fecha_inicio.setTime(fecha_inicio.getTime() + (meses * 30) * 86400000))
                 } */
                if (mesVence.getDate() < fecha_inicio.getDate()) {
                    var fecha_vencimiento = new Date(fecha_inicio.getFullYear(), fecha_inicio.getMonth() + meses, mesVence.getDate());
                } else {
                    var fecha_vencimiento = new Date(fecha_inicio.getFullYear(), fecha_inicio.getMonth() + meses, fecha_inicio.getDate());
                }


                return fecha_vencimiento
                // requisito.fechav_texto = $scope.fechaATexto(requisito.fechav)
            }

            $scope.actualizarPreRequisitoPaciente = function (prerequisito) {
                blockUI.start()
                var prerequisito_ = prerequisito
                prerequisito_.fecha_vencimiento = new Date($scope.convertirFecha(prerequisito.fecha_vencimiento_texto))
                var promesa = GuardarPrerequisitoPaciente(prerequisito_)
                promesa.then(function (res) {
                    $scope.mostrarMensaje(res.mensaje)
                    $scope.cerrarDialogEditarPreRequisito()
                    $scope.verificarAsignacionPrerequisitos($scope.empleado)
                    blockUI.stop()
                }, function (error) {
                    $scope.mostrarMensaje('Ocurrio un problema al asignar el prerequisito')
                    $scope.cerrarDialogEditarPreRequisito()
                    blockUI.stop()
                })
            }
            $scope.asignarPrerequisito = function (prerequisito, paciente) {
                blockUI.start();
                prerequisito.pacientePrerequisito = { id: paciente.id }
                prerequisito.preRequisito = { id: prerequisito.id }
                prerequisito.fecha_inicio = new Date()
                prerequisito.fecha_inicio_texto = $scope.fechaATexto(prerequisito.fecha_inicio)
                //prerequisito.fecha_vencimiento = $scope.calcularFechaVencimientoRequisito(prerequisito)
                prerequisito.paraAsignar = true
                var promesa = GuardarPrerequisitoPaciente(prerequisito)
                promesa.then(function (res) {
                    $scope.verificarAsignacionPrerequisitos(paciente)
                    $scope.mostrarMensaje(res.mensaje)
                    blockUI.stop()
                }, function (error) {
                    $scope.mostrarMensaje('Ocurrio un problema al asignar el prerequisito')
                    blockUI.stop()
                })
            }
            $scope.obtenerPrerequisito = function () {
                blockUI.start();
                var promesa = ListaDatosPrerequisito();
                promesa.then(function (entidad) {
                    $scope.prerequisitos = entidad;
                    blockUI.stop();
                });
            }
            $scope.agregarSeguro = function (seguro) {
                seguro.eliminado = false
                $scope.ficha.otrosSeguros.push(seguro)
                $scope.seguro = { edit: false }
            }

            $scope.calcularEdad = function (familiar) {
                var fechaActual = new Date();
                if (familiar.nac_mes && familiar.nac_anio && familiar.nac_dia) {
                    var anio = familiar.nac_anio
                    var mes = parseInt(familiar.nac_mes.id)
                    var dia = parseInt(familiar.nac_dia)
                    var fechaNacimiento = new Date()
                    fechaNacimiento.setFullYear(anio, mes, dia)
                    // var dato = $scope.diferenciaEntreDiasEnDias(fechaNacimiento, fechaActual)
                    familiar.edad = $scope.obtenerEdad(fechaNacimiento);
                }
            }
            function calculateAge(birthday) { // birthday is a date
                var ageDifMs = Date.now() - new Date(birthday).getTime();
                var ageDate = new Date(ageDifMs); // miliseconds from epoch
                return Math.abs(ageDate.getUTCFullYear() - 1970);
            }
            $scope.eliminarSeguro = function (seguro, index) {
                if (seguro.id) {
                    seguro.eliminado = true
                } else {
                    $scope.ficha.otrosSeguros.splice(index, 1);

                }
            }
            $scope.editarSeguro = function (dato, index) {
                $scope.seguro = dato
                $scope.seguro.edit = true
                $scope.seguro.index = index
            }
            $scope.agregarFamiliar = function (familiar) {
                familiar.eliminado = false
                if (parseInt(familiar.nac_mes.id) < 10) {
                    familiar.nac_mes.id = "0" + familiar.nac_mes.id
                }
                familiar.persona.fecha_nacimiento = new Date(familiar.nac_anio, parseInt(familiar.nac_mes.id), parseInt(familiar.nac_dia))
                $scope.ficha.empleado.familiares.push(familiar)
                $scope.familiar = { edit: false }
                $scope.seCambio = true;
            }
            $scope.eliminarFamiliar = function (familiar, index) {
                if (familiar.id) {
                    $scope.seCambio = true;
                    familiar.eliminado = true
                } else {
                    $scope.ficha.empleado.familiares.splice(index, 1);
                }
            }
            $scope.editarFamiliar = function (dato, index) {
                $scope.familiar = dato
                var fechaNacimiento = new Date(dato.persona.fecha_nacimiento)
                $scope.familiar.nac_anio = fechaNacimiento.getFullYear()
                $scope.familiar.nac_dia = fechaNacimiento.getDate()
                var mesNac = fechaNacimiento.getMonth()
                $scope.meses.forEach(function (mes, index, array) {
                    if (mes.id == mesNac) {
                        $scope.familiar.nac_mes = mes
                        //$scope.getDaysInMonth($scope.ficha.nac_mes.id,$scope.ficha.nac_anio)
                    }
                });
                $scope.familiar.edit = true
                $scope.familiar.index = index
                $scope.seCambio = true;
                $scope.abrirDialogNuevoFamiliar()
            }
            $scope.guardarSeguroEditado = function (dato) {
                $scope.ficha.otrosSeguros[dato.index] = dato
                $scope.seguro = { edit: false }
            }

            $scope.guardarFamiliarEditado = function (dato) {
                $scope.ficha.empleado.familiares[dato.index].persona.fecha_nacimiento = new Date(dato.nac_anio, parseInt(dato.nac_mes.id), parseInt(dato.nac_dia))
                $scope.ficha.empleado.familiares[dato.index] = dato
                $scope.familiar = { edit: false }
                $scope.cerrarDialogNuevoFamiliar()
            }
            //RECUPERAR TIPOS FICHA
            $scope.recuperarDatosTipo = function () {
                $scope.obtenerExpeditos()
                $scope.obtenerTipoExpeditos()
                // $scope.obtenerEstadoCivil()
                $scope.obtenerCaracteristicasDiscapacidad()
                $scope.obtenerTiposRolTurnoExtra()
                //$scope.obtenerDepartamentos()
                //$scope.obtenerProvicias()
                //$scope.obtenerLocalidades()
                $scope.obtenerTiposContratos()
                // $scope.obtenerTiposPersonales()
                // $scope.obtenerCargasHorarios()
                // $scope.obtenerMotivoLLamadasAtencion()
                $scope.obtenerAreas()
                $scope.obtenerUbicacion()
                // $scope.obtenerSegurosSalud()
                // $scope.obtenerLugarSegurosSalud()
                // $scope.obtenerAporteSeguroLargoPlazo()
                // $scope.obtenerTipoOtrosSeguros()
                // $scope.obtenerBancos()
                $scope.obtenerMeses()
                $scope.listYears = $scope.obtenerAnios(1930)

                $scope.obtenerCargos()
                // $scope.obtenerDiscapacidades()
                // $scope.obtenerTitulos()
                $scope.obtenerCapacidadesIE()
                // $scope.obtenerLogrosIE()
                // $scope.obtenertiposAusenciaMedica()
                // $scope.obtenerTiposOtrasAusencias()
                // $scope.obtenerTiposBaja()
                // $scope.obtenerEstadoDotacion()
                // $scope.obtenerGruposRol()
                // $scope.obtenerClasificacionRol()
                $scope.obtenerTipoViajeDetalle()
                $scope.obtenerTiposEstadosPasajeros()
                // $scope.obtenerTipoLicenciaVehiculo()
                // $scope.ObtenerEstadosAusencias()
            }
            $scope.ObtenerEstadosAusencias = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_EDA", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.estadosDeAusencias = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerTiposEstadosPasajeros = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_EPVIA", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tiposPasajerosViaje = entidad.clases

                    blockUI.stop();
                });
            }
            $scope.obtenerGruposRol = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_GROL", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.gruposRol = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerClasificacionRol = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_CLAROL", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.clasificacionesRol = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerTipoLicenciaVehiculo = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_TLVVIA", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.TiposLicenciasVehiculo = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerVehiculosViaje = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_VVIA", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.vehiculosViaje = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerTipoViajeDetalle = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_TVIA", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tiposViaje = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerGrados = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_GRA", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.grados = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerTitulos = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_TITL", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.titulos = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerInstituciones = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_INST", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.instituciones = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerCapacidadesIE = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_TCIE", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.capacidadesIE = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerLogrosIE = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_TLIE", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.logrosIE = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerHistorialContratos = function (empleado) {
                blockUI.start();
                var promesa = UsuarioRhHistorialFicha(empleado.id);
                promesa.then(function (entidad) {
                    $scope.historialFichaEmpleado = entidad
                    $scope.llenarHistoricoCertificado(entidad)
                    blockUI.stop();
                });
            }

            // $scope.fechacontratos = [{ 'name': '10/01/2000 - 01/01/2002' }, { 'name': '10/01/2000 - 01/01/2002' }, { 'name': '10/01/2000 - 01/01/2002' }];
            $scope.obtenerCargos = function () {
                blockUI.start();
                var promesa = CargosEmpresa($scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    var cargos = entidad.clases
                    $scope.listaCargos = entidad
                    $scope.llenarCargos(cargos)
                    blockUI.stop();
                });
            }
            $scope.obtenerDiscapacidades = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_DISC", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    var discapacidades = entidad.clases
                    $scope.llenarDiscapacidades(discapacidades)
                    blockUI.stop();
                });
            }
            $scope.obtenerExpeditos = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_EXP", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tipoExpedido = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerTipoExpeditos = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_TEXP", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tipoDocumento = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerEstadoCivil = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_EC", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.estadosCiviles = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerCaracteristicasDiscapacidad = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("CARDIS", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.caracteristicasDiscapacidades = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerNacionalidades = function () {
                blockUI.start();
                var promesa = ClasesTipo("NAC");
                promesa.then(function (entidad) {
                    $scope.nacionalidades = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerDepartamentos = function () {
                blockUI.start();
                var nombre_corto = '-BOL';
                var promesa = Paises(nombre_corto);
                promesa.then(function (entidades) {
                    $scope.departamentosBanco = entidades;

                    blockUI.stop();
                });

            }
            /*   $scope.obtenerProvicias = function () {
                  blockUI.start();
                  var promesa = ClasesTipo("MUN");
                  promesa.then(function (entidad) {
                      $scope.provincias = entidad.clases
                      blockUI.stop();
                  });
              } */
            $scope.obtenerTiposRolTurnoExtra = function () {
                blockUI.start();
                var promesa = ClasesTipo("ESTEXTROL");
                promesa.then(function (entidad) {
                    $scope.tiposRolTurnoExtra = entidad.clases;
                    blockUI.stop();
                });
            }
            $scope.buscarDepartamento = function (ciudad) {
                if (ciudad) {
                    var nombre_corto = '-' + ciudad.nombre_corto;
                    var promesa = Paises(nombre_corto);
                    promesa.then(function (entidades) {
                        $scope.departamentos = entidades;
                        if (entidades.length === 0) {
                            $scope.provincias = []
                            $scope.localidades = []
                        }
                    });
                }
            }
            $scope.buscarDepartamentoFiniquito = function () {

                var nombre_corto = '-BOL';
                var promesa = Paises(nombre_corto);
                promesa.then(function (entidades) {
                    $scope.departamentosFiniquito = entidades;
                });

            }
            $scope.buscarRopaTrabajo = function () {
                var nombre_corto = 'ROPA DE TRABAJO-G';
                var promesa = ClasesEmpresa(nombre_corto, $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.ropasDeTrabajo = entidad;
                });
            }
            $scope.buscarMunicipios = function (departamento) {
                if (departamento) {
                    var idDepartamento = departamento.id + '-' + departamento.nombre_corto
                    var nombre_corto = idDepartamento.split('-')[1];
                    var promesa = Paises(nombre_corto + "M");
                    promesa.then(function (entidades) {
                        $scope.provincias = entidades;
                        if (entidades.length === 0) {
                            $scope.localidades = []
                        }
                    });
                }
            }
            $scope.buscarLocalidad = function (provincia) {
                if (provincia) {
                    var nombre_corto = provincia.nombre_corto.split('-')[1];
                    var nombre_corto = '-' + nombre_corto
                    var promesa = Paises(nombre_corto + "L");
                    promesa.then(function (entidades) {
                        $scope.localidades = entidades;
                    });
                }
            }

            $scope.AgregarDepartamento = function (datos) {
                if (datos.edit) {
                    var bandera = true
                    $scope.clase = { pais: datos.pais }
                    $scope.departamentos.forEach(function (departamento, index, array) {
                        var nombre_corto = departamento.nombre_corto.split("-")[0]
                        if (departamento.id != datos.id) {
                            if (nombre_corto == datos.nombre_corto2) {
                                bandera = false
                            }
                        }
                        if (index === (array.length - 1)) {
                            if (bandera) {
                                datos.nombre_corto = datos.nombre_corto2 + "-" + datos.pais.nombre_corto
                                $scope.clase = { pais: datos.pais }
                            } else {
                                $scope.mostrarMensaje("El nombre corto tiene que ser unico por departamento")
                            }
                        }
                    });
                } else {
                    var bandera = true
                    if ($scope.departamentos.length > 0) {
                        $scope.departamentos.forEach(function (departamento, index, array) {
                            var nombre_corto = departamento.nombre_corto.split("-")[0]
                            if (nombre_corto == datos.nombre_corto2) {
                                bandera = false
                            }
                            if (index === (array.length - 1)) {
                                if (bandera) {
                                    datos.nombre_corto = datos.nombre_corto2 + "-" + datos.pais.nombre_corto
                                    $scope.departamentos.push(datos)
                                    $scope.clase = { pais: datos.pais }
                                } else {
                                    $scope.mostrarMensaje("El nombre corto tiene que ser unico por departamento")
                                }
                            }
                        });
                    } else {
                        datos.nombre_corto = datos.nombre_corto2 + "-" + datos.pais.nombre_corto
                        $scope.departamentos.push(datos)
                        $scope.clase = { pais: datos.pais }
                    }
                }

            }

            $scope.AgregarProvincia = function (datos) {
                if (datos.edit) {
                    var bandera = true
                    $scope.provincias.forEach(function (provincia, index, array) {
                        var nombre_corto = provincia.nombre_corto.split("-")[1]
                        if (provincia.id != datos.id) {
                            if (nombre_corto == datos.nombre_corto2) {
                                bandera = false
                            }
                        }
                        if (index === (array.length - 1)) {
                            if (bandera) {
                                var nombreCorto = datos.departamento.nombre_corto.split("-")[0]
                                datos.nombre_corto = nombreCorto + "M-" + datos.nombre_corto2
                            } else {
                                $scope.mostrarMensaje("El nombre corto tiene que ser unico por provincia")
                            }
                        }
                    });
                    $scope.clase = { departamento: datos.departamento }

                } else {
                    var bandera = true
                    if ($scope.provincias.length > 0) {
                        $scope.provincias.forEach(function (provincia, index, array) {
                            var nombre_corto = provincia.nombre_corto.split("-")[1]
                            if (nombre_corto == datos.nombre_corto2) {
                                bandera = false
                            }
                            if (index === (array.length - 1)) {
                                if (bandera) {
                                    var nombreCorto = datos.departamento.nombre_corto.split("-")[0]
                                    datos.nombre_corto = nombreCorto + "M-" + datos.nombre_corto2
                                    $scope.provincias.push(datos)
                                    $scope.clase = { departamento: datos.departamento }
                                } else {
                                    $scope.mostrarMensaje("El nombre corto tiene que ser unico por provincia")
                                }
                            }
                        });
                    } else {
                        var nombreCorto = datos.departamento.nombre_corto.split("-")[0]
                        datos.nombre_corto = nombreCorto + "M-" + datos.nombre_corto2
                        $scope.provincias.push(datos)
                        $scope.clase = { departamento: datos.departamento }
                    }
                }
            }
            $scope.AgregarLocalidad = function (datos) {
                if (datos.edit) {
                    var bandera = true
                    $scope.localidades.forEach(function (localidad, index, array) {
                        var nombre_corto = localidad.nombre_corto.split("-")[0]
                        var nombre_corto2 = datos.nombre_corto2
                        if (localidad.id != datos.id) {
                            if (nombre_corto == nombre_corto2) {
                                bandera = false
                            }
                        }
                        if (index === (array.length - 1)) {
                            if (bandera) {
                                var nombreCorto = datos.provincia.nombre_corto.split("-")[1]
                                datos.nombre_corto = datos.nombre_corto2 + "-" + nombreCorto + "L"
                            } else {
                                $scope.mostrarMensaje("El nombre corto tiene que ser unico por localidad")
                            }
                        }
                    })
                    $scope.clase = { provincia: datos.provincia }
                } else {
                    var bandera = true
                    if ($scope.localidades.length > 0) {
                        $scope.localidades.forEach(function (localidad, index, array) {
                            var nombre_corto = localidad.nombre_corto.split("-")[0]
                            var nombre_corto2 = datos.nombre_corto2
                            if (nombre_corto == nombre_corto2) {
                                bandera = false
                            }
                            if (index === (array.length - 1)) {
                                if (bandera) {
                                    var nombreCorto = datos.provincia.nombre_corto.split("-")[1]
                                    datos.nombre_corto = datos.nombre_corto2 + "-" + nombreCorto + "L"
                                    $scope.localidades.push(datos)
                                    $scope.clase = { provincia: datos.provincia }
                                } else {
                                    $scope.mostrarMensaje("El nombre corto tiene que ser unico por localidad")
                                }
                            }
                        });
                    } else {
                        var nombreCorto = datos.provincia.nombre_corto.split("-")[1]
                        datos.nombre_corto = datos.nombre_corto2 + "-" + nombreCorto + "L"
                        $scope.localidades.push(datos)
                        $scope.clase = { provincia: datos.provincia }
                    }
                }
            }
            $scope.guardarConceptoEdicionRrhh = function (datos, clase) {
                blockUI.start();
                $scope.tipo_edicion2.clases = datos
                var tipo = $scope.tipo_edicion2
                Tipos.update({ id_tipo: tipo.id }, tipo, function (res) {
                    var promesa = ClasesTipo(tipo.nombre_corto);
                    promesa.then(function (entidad) {
                        tipo = entidad
                        $scope.tipo_edicion2 = {}
                        blockUI.stop();
                        $scope.buscarDepartamento(clase.pais)
                        $scope.buscarMunicipios(clase.departamento)
                        $scope.buscarLocalidad(clase.provincia)
                        $scope.cerrarDialogDepartamentoEstado();
                        $scope.cerrarDialogProvincia();
                        $scope.cerrarDialogLocalidad();
                        $scope.mostrarMensaje('Guardado Exitosamente!');
                    });
                });
            }
            $scope.editarLocalidad = function (loc, clase) {
                var a = clase.provincia
                var nombre_corto = loc.nombre_corto.split("-")[0]
                $scope.clase = loc; $scope.clase.provincia = a; $scope.clase.nombre_corto2 = nombre_corto
                $scope.clase.edit = true
            }
            $scope.editarProvincia = function (pro, clase) {
                var a = clase.departamento
                var nombre_corto = pro.nombre_corto.split("-")[1]
                $scope.clase = pro; $scope.clase.departamento = a; $scope.clase.nombre_corto2 = nombre_corto
                $scope.clase.edit = true
            }
            $scope.editarDepartamento = function (pro, clase) {
                var a = clase.pais
                var nombre_corto = pro.nombre_corto.split("-")[0]
                $scope.clase = pro; $scope.clase.pais = a; $scope.clase.nombre_corto2 = nombre_corto
                $scope.clase.edit = true
            }
            $scope.cancelarEdicionLocalidad = function (clase) {
                $scope.clase = { provincia: clase.provincia }
            }
            $scope.cancelarEdicionProvincia = function (clase) {
                $scope.clase = { departamento: clase.departamento }
            }
            $scope.cancelarEdicionDepartamento = function (clase) {
                $scope.clase = { pais: clase.pais }
            }
            /*  $scope.obtenerLocalidades = function () {
                 blockUI.start();
                 var promesa = ClasesTipo("LOC");
                 promesa.then(function (entidad) {
                     $scope.localidades = entidad.clases
                     blockUI.stop();
                 });
             } */
            $scope.obtenerTiposContratos = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_TC", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tiposContratos = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerTiposPersonales = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_TP", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tiposPersonales = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerCargasHorarios = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_CH", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.cargasHorarios = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerAreas = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_AREA", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.listaAreas = entidad
                    blockUI.stop();
                });
            }

            $scope.obtenerUbicacion = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_UBI", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.ubicaciones = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerSegurosSalud = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_SS", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.segurosSalud = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerLugarSegurosSalud = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_LSS", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.LugaresSegurosSalud = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerAporteSeguroLargoPlazo = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_ASLP", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.aportesSeguroLargoPlazo = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerTipoOtrosSeguros = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_OST", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.OtrosSegurosTipos = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerBancos = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_BAN", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.bancosHdv = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerFamiliaRelacion = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_REL", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.relaciones = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerTiposHorasaExtraOrdinarias = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_THEO", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tipoHoraExtraOrdinaria = entidad
                    blockUI.stop();
                });
            }

            $scope.obtenerAnios = function (startYear) {
                var currentYear = new Date().getFullYear(), years = [];
                startYear = startYear || 1930;

                while (startYear <= currentYear) {
                    years.push(startYear++);
                }

                return years;
            }
            $scope.getDaysInMonth = function (month, year) {
                // Here January is 1 based
                //Day 0 is the last day in the previous month
                var dias = new Date(year, month + 1, 0).getDate();
                var listaDias = []
                for (var i = 1; i <= dias; i++) {
                    listaDias.push(i)
                    if (i == dias) {
                        $scope.listaDias = listaDias
                    }
                }
                // Here January is 0 based
                // return new Date(year, month+1, 0).getDate();

            };

            $scope.initialWizard = function () {
                $('[data-step=1]').trigger("click");
            }
            //FIN RECUPERAR TIPOS FICHA

            $scope.guardarFichaTecnica = function (form, ficha, save) {
                if (ficha.cargos && ficha.cargos.length === 0) {
                    SweetAlert.swal("", 'Debe asignar al menos un cargo para el empleado.', "error");
                    return;
                }
                if ($scope.opcionesAplicacion.RRHH_OPCION_DATOS_EMPLEADO.puede_crear) {
                    if ($scope.nopuedoModificarFicha == false && (form.$dirty || $scope.seCambio)) {
                        $scope.ficha.quienModifico = $scope.usuario.id
                        if ($scope.ficha.cargos.length === 0) {
                            SweetAlert.swal("", "Asigne un cargo al empleado antes de guardar la ficha.", "error");
                            return;
                        }
                        if ($scope.ultimaAccion) {
                            $scope.ficha.ultimaAccion = Object.assign({}, $scope.ultimaAccion)
                            $scope.ultimaAccion = undefined
                        }
                        var s = $scope.fechaATexto(ficha.fecha_inicio)
                        ficha.historialVacacion = []
                        if (s != ficha.fecha_inicio2) {
                            var a = ficha.fecha_inicio2
                            var b = new Date($scope.convertirFecha(a)).getFullYear()
                            var anos = $scope.obtenerAnios(b)
                            anos.forEach(function (_, index, array) {
                                var anioConfiguracion = index + 1
                                var config = null
                                if (anioConfiguracion <= 5) {
                                    config = $scope.configuracionesVacacion[0].dias
                                } else if (anioConfiguracion <= 10) {
                                    config = $scope.configuracionesVacacion[1].dias
                                } else if (anioConfiguracion > 10) {
                                    config = $scope.configuracionesVacacion[2].dias
                                }
                                var historialVacacion = {
                                    gestion: _,
                                    anio: index + 1,
                                    aplicadas: config,
                                    tomadas: 0
                                }
                                ficha.historialVacacion.push(historialVacacion)
                            });
                        }
                        if (save) {
                            if (!ficha.codigo_tributario || !ficha.personaReferencia.nombres || (!ficha.personaReferencia.telefono && !ficha.personaReferencia.telefono_movil)) {
                                SweetAlert.swal({
                                    title: 'Campos omitidos',
                                    html: `<div>
                                       ${!ficha.codigo_tributario ? "<li><small>No se estableció codigo tributario.</small></li>" : ""} 
                                       ${!ficha.personaReferencia.nombres ? "<li><small>No se asignó persona de referencia.</small></li>" : ""} 
                                       ${(!ficha.personaReferencia.telefono && !ficha.personaReferencia.telefono) ? "<li><small>No se estableció número de referencia.</small></li>" : ""} 
                                    <center><p><strong>¿Desea forzar guardado?</strong></p></center></div>`,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Si',
                                    cancelButtonText: 'No'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        $scope.primeroGuardarParaCerrar = false
                                        /*  if (ficha.empleado.persona.fecha_nacimiento) { */
                                        ficha.empleado.persona.fecha_nacimiento = new Date(ficha.nac_anio, parseInt(ficha.nac_mes.id), parseInt(ficha.nac_dia))
                                        /*  } */
                                        if (ficha.fecha_elaboracion) {
                                            ficha.fecha_elaboracion = new Date($scope.convertirFecha(ficha.fecha_elaboracion));
                                        }
                                        if (ficha.fecha_inicio2) {
                                            ficha.fecha_inicio2 = new Date($scope.convertirFecha(ficha.fecha_inicio2));
                                        }
                                        if (ficha.fecha_fin2) {
                                            ficha.fecha_fin2 = new Date($scope.convertirFecha(ficha.fecha_fin2));
                                        }
                                        if (ficha.fecha_jubilacion) {
                                            ficha.fecha_jubilacion = new Date($scope.convertirFecha(ficha.fecha_jubilacion));
                                        }
                                        if (ficha.empleado.fecha_vence_documento) { ficha.empleado.fecha_vence_documento = new Date($scope.convertirFecha(ficha.empleado.fecha_vence_documento)); }
                                        var f = document.getElementById('id-contrato').files[0],
                                            r = new FileReader();

                                        if (f) {
                                            r.onloadend = function (e) {
                                                ficha.contrato2 = { name: "", data: null }
                                                ficha.contrato2.name = ficha.contrato[0].name
                                                ficha.contrato2.data = e.target.result;

                                                $scope.guardarFicha(form, ficha)
                                                //send your binary data via $http or $resource or do anything else with it
                                            }

                                            r.readAsBinaryString(f);
                                        } else {
                                            $scope.guardarFicha(form, ficha)
                                        }
                                    } else { $scope.btnGuardar = false }
                                })
                            } else {
                                $scope.primeroGuardarParaCerrar = false
                                /*  if (ficha.empleado.persona.fecha_nacimiento) { */
                                ficha.empleado.persona.fecha_nacimiento = new Date(ficha.nac_anio, parseInt(ficha.nac_mes.id), parseInt(ficha.nac_dia))
                                /*  } */
                                if (ficha.fecha_elaboracion) {
                                    ficha.fecha_elaboracion = new Date($scope.convertirFecha(ficha.fecha_elaboracion));
                                }
                                if (ficha.fecha_inicio2) {
                                    ficha.fecha_inicio2 = new Date($scope.convertirFecha(ficha.fecha_inicio2));
                                }
                                if (ficha.fecha_fin2) {
                                    ficha.fecha_fin2 = new Date($scope.convertirFecha(ficha.fecha_fin2));
                                }
                                if (ficha.fecha_jubilacion) {
                                    ficha.fecha_jubilacion = new Date($scope.convertirFecha(ficha.fecha_jubilacion));
                                }
                                if (ficha.empleado.fecha_vence_documento) { ficha.empleado.fecha_vence_documento = new Date($scope.convertirFecha(ficha.empleado.fecha_vence_documento)); }
                                var f = document.getElementById('id-contrato').files[0],
                                    r = new FileReader();

                                if (f) {
                                    r.onloadend = function (e) {
                                        ficha.contrato2 = { name: "", data: null }
                                        ficha.contrato2.name = ficha.contrato[0].name
                                        ficha.contrato2.data = e.target.result;

                                        $scope.guardarFicha(form, ficha)
                                        //send your binary data via $http or $resource or do anything else with it
                                    }

                                    r.readAsBinaryString(f);
                                } else {
                                    $scope.guardarFicha(form, ficha)
                                }
                            }
                        } else {
                            var button = $('#siguiente-f').text().trim();
                            if (button != "Siguiente") {
                                if (!ficha.codigo_tributario || !ficha.personaReferencia.nombres || (!ficha.personaReferencia.telefono && !ficha.personaReferencia.telefono_movil)) {
                                    SweetAlert.swal({
                                        title: 'Campos omitidos',
                                        html: `<div>
                                           ${!ficha.codigo_tributario ? "<li><small>No se estableció codigo tributario.</small></li>" : ""} 
                                           ${!ficha.personaReferencia.nombres ? "<li><small>No se asignó persona de referencia.</small></li>" : ""} 
                                           ${(!ficha.personaReferencia.telefono && !ficha.personaReferencia.telefono) ? "<li><small>No se estableció número de referencia.</small></li>" : ""} 
                                        <center><p><strong>¿Desea forzar guardado?</strong></p></center></div>`,
                                        icon: 'warning',
                                        showCancelButton: true,
                                        confirmButtonColor: '#3085d6',
                                        cancelButtonColor: '#d33',
                                        confirmButtonText: 'Si',
                                        cancelButtonText: 'No'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            /*  if (ficha.empleado.persona.fecha_nacimiento) { */
                                            ficha.empleado.persona.fecha_nacimiento = new Date(ficha.nac_anio, parseInt(ficha.nac_mes.id), parseInt(ficha.nac_dia))
                                            /*    } */
                                            if (ficha.fecha_elaboracion) {
                                                ficha.fecha_elaboracion = new Date($scope.convertirFecha(ficha.fecha_elaboracion));
                                            }
                                            if (ficha.fecha_inicio2) {
                                                ficha.fecha_inicio2 = new Date($scope.convertirFecha(ficha.fecha_inicio2));
                                            }
                                            if (ficha.fecha_fin2) {
                                                ficha.fecha_fin2 = new Date($scope.convertirFecha(ficha.fecha_fin2));
                                            }
                                            if (ficha.fecha_jubilacion) {
                                                ficha.fecha_jubilacion = new Date($scope.convertirFecha(ficha.fecha_jubilacion));
                                            }
                                            if (ficha.empleado.fecha_vence_documento) {
                                                ficha.empleado.fecha_vence_documento = new Date($scope.convertirFecha(ficha.empleado.fecha_vence_documento));
                                            }

                                            $scope.guardarFicha(form, ficha)
                                        }
                                    })
                                } else {
                                    /*  if (ficha.empleado.persona.fecha_nacimiento) { */
                                    ficha.empleado.persona.fecha_nacimiento = new Date(ficha.nac_anio, parseInt(ficha.nac_mes.id), parseInt(ficha.nac_dia))
                                    /*    } */
                                    if (ficha.fecha_elaboracion) {
                                        ficha.fecha_elaboracion = new Date($scope.convertirFecha(ficha.fecha_elaboracion));
                                    }
                                    if (ficha.fecha_inicio2) {
                                        ficha.fecha_inicio2 = new Date($scope.convertirFecha(ficha.fecha_inicio2));
                                    }
                                    if (ficha.fecha_fin2) {
                                        ficha.fecha_fin2 = new Date($scope.convertirFecha(ficha.fecha_fin2));
                                    }
                                    if (ficha.fecha_jubilacion) {
                                        ficha.fecha_jubilacion = new Date($scope.convertirFecha(ficha.fecha_jubilacion));
                                    }
                                    if (ficha.empleado.fecha_vence_documento) {
                                        ficha.empleado.fecha_vence_documento = new Date($scope.convertirFecha(ficha.empleado.fecha_vence_documento));
                                    }
                                    $scope.guardarFicha(form, ficha)
                                }
                            }
                        }
                    } else {
                        var button = $('#siguiente-f').text().trim();
                        if (button != "Siguiente" || save) {
                            $scope.cerrarDialogEmpleado(form)
                            //$scope.recargarItemsTabla()
                        }
                    }
                } else {
                    var button = $('#siguiente-f').text().trim();
                    if (button != "Siguiente") {
                        $scope.cerrarDialogEmpleado(form)
                        //$scope.recargarItemsTabla()
                    }
                }
            }
            $scope.guardarFicha = function (form, ficha) {
                ficha.usuario_en_uso = $scope.usuario.id
                var promesa = CrearEmpleadoFicha(ficha);
                promesa.then(function (dato) {
                    if (dato.hasError) {
                        $scope.cerrarDialogEmpleado(form)
                        SweetAlert.swal("", dato.message, "error");
                    } else {
                        fecha1 = $scope.fechaATexto(dato.fichaActual.fecha_inicio)
                        fecha2 = $scope.fechaATexto(dato.fichaAnterior.fecha_inicio)
                        if (fecha1 == fecha2) {
                            var ArregloCambios = []
                            var arreglo = {}
                            var cant = 0
                            var tamaño = Object.keys(dato.fichaActual).length
                            for (var key in dato.fichaActual) {
                                var texto = key.substr(0, 3)
                                if (texto != "id_" && key != "updatedAt" && key != "createdAt" && key != "id" && key != "nombre_corto") {
                                    if (dato.fichaActual[key] instanceof Object) {
                                        if (dato.fichaActual[key] instanceof Array) {
                                            var bandera2 = false;
                                            var arregloPrueba = []
                                            var arregloAcual = ""
                                            var arregloAnterior = ""
                                            var arregloDiscapacidades = dato.fichaActual[key]
                                            dato.fichaActual[key].forEach(function (datoarreglo) {
                                                if (key == "cargos") {
                                                    arregloAcual += datoarreglo.cargo.nombre + ", "
                                                }
                                                if (key == "discapacidades") {
                                                    arregloAcual += datoarreglo.discapacidad.nombre + ", "
                                                }
                                                if (key == "otrosSeguros") {
                                                    arregloAcual += datoarreglo.tipoSeguro.nombre + ", "
                                                }
                                                /*  return dato.fichaActual[key]; */

                                            })
                                            var arregloDiscapacidadesAnterior = dato.fichaAnterior[key]
                                            dato.fichaAnterior[key].forEach(function (datoarreglo) {
                                                if (key == "cargos") {
                                                    arregloAnterior += datoarreglo.cargo.nombre + ", "
                                                }
                                                if (key == "discapacidades") {
                                                    arregloAnterior += datoarreglo.discapacidad.nombre + ", "
                                                }
                                                if (key == "otrosSeguros") {
                                                    arregloAcual += datoarreglo.tipoSeguro.nombre + ", "
                                                }
                                                /*   return dato.fichaActual[key]; */
                                            })
                                            bandera2 = arregloDiscapacidades.includes(arregloDiscapacidadesAnterior)
                                            if (arregloDiscapacidadesAnterior.length != arregloDiscapacidades.length) {
                                                bandera2 = true
                                            }
                                            if (bandera2) {
                                                arreglo = {
                                                    id_ficha: dato.fichaActual.id,
                                                    campo: key,
                                                    valor_anterior: arregloAnterior,
                                                    valor_actual: arregloAcual,
                                                    fecha: new Date()
                                                }
                                                ArregloCambios.push(arreglo)
                                            }
                                        } else {
                                            for (var key2 in dato.fichaActual[key]) {
                                                texto = key2.substr(0, 3)
                                                if (texto != "id_" && key2 != "updatedAt" && key2 != "createdAt" && key2 != "id" && key2 != "nombre_corto") {
                                                    if (dato.fichaActual[key][key2] instanceof Object) {
                                                        for (var key3 in dato.fichaActual[key][key2]) {
                                                            texto = key3.substr(0, 3)
                                                            if (texto != "id_" && key3 != "updatedAt" && key3 != "createdAt" && key3 != "id" && key3 != "nombre_corto") {
                                                                if (dato.fichaActual[key][key2][key3] instanceof Object) {
                                                                } else {
                                                                    if (dato.fichaAnterior[key][key2]) {
                                                                        if (dato.fichaActual[key][key2][key3] != dato.fichaAnterior[key][key2][key3]) {
                                                                            arreglo = {
                                                                                id_ficha: dato.fichaActual.id,
                                                                                campo: key + "." + key2 + "." + key3,
                                                                                valor_anterior: dato.fichaAnterior[key][key2][key3],
                                                                                valor_actual: dato.fichaActual[key][key2][key3],
                                                                                fecha: new Date()
                                                                            }
                                                                            ArregloCambios.push(arreglo)
                                                                        }
                                                                    } else if (dato.fichaActual[key][key2][key3]) {
                                                                        arreglo = {
                                                                            id_ficha: dato.fichaActual.id,
                                                                            campo: key + "." + key2 + "." + key3,
                                                                            valor_anterior: "",
                                                                            valor_actual: dato.fichaActual[key][key2][key3],
                                                                            fecha: new Date()
                                                                        }
                                                                        ArregloCambios.push(arreglo)
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        if (dato.fichaAnterior[key]) {
                                                            if (dato.fichaActual[key][key2] != dato.fichaAnterior[key][key2]) {
                                                                arreglo = {
                                                                    id_ficha: dato.fichaActual.id,
                                                                    campo: key + "." + key2,
                                                                    valor_anterior: dato.fichaAnterior[key][key2],
                                                                    valor_actual: dato.fichaActual[key][key2],
                                                                    fecha: new Date()
                                                                }
                                                                ArregloCambios.push(arreglo)
                                                            }
                                                        } else if (dato.fichaActual[key][key2]) {
                                                            arreglo = {
                                                                id_ficha: dato.fichaActual.id,
                                                                campo: key + "." + key2,
                                                                valor_anterior: "",
                                                                valor_actual: dato.fichaActual[key][key2],
                                                                fecha: new Date()
                                                            }
                                                            ArregloCambios.push(arreglo)
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if (dato.fichaActual[key] != dato.fichaAnterior[key]) {
                                            arreglo = {
                                                id_ficha: dato.fichaActual.id,
                                                campo: key,
                                                valor_anterior: dato.fichaAnterior[key],
                                                valor_actual: dato.fichaActual[key],
                                                fecha: new Date()
                                            }
                                            ArregloCambios.push(arreglo)
                                        }
                                    }
                                }
                                cant++
                                if (cant === (tamaño - 1)) {
                                    if (ArregloCambios.length > 0) {
                                        var promesa2 = GuardarBitacoraFicha($scope.usuario.id, ArregloCambios)
                                        promesa2.then(function (data) {
                                            $scope.cerrarDialogEmpleado(form)
                                            $scope.recargarItemsTabla()
                                            SweetAlert.swal("", dato.message, "success");
                                        })
                                    } else {
                                        $scope.primeroGuardarParaCerrar = false
                                        $scope.cerrarDialogEmpleado(form)
                                        //$scope.recargarItemsTabla()
                                        SweetAlert.swal("", dato.message, "warning");
                                    }
                                }

                            }
                        } else {
                            $scope.primeroGuardarParaCerrar = false
                            $scope.cerrarDialogEmpleado(form)
                            //$scope.recargarItemsTabla()
                            SweetAlert.swal("", dato.message, "error");
                        }
                    }
                })

            }

            $scope.actualizarPrerequisito = function (prerequisitos) {
                var promesa = ActualizarPrerequisito(prerequisitos)
                promesa.then(function (dato) {
                    /* if (prerequisitos instanceof Array) {
            
                    } */
                    $scope.cerrarDialogInicioPreRequisitos()
                    $scope.mostrarMensaje(dato.message)
                })
            }
            $scope.completarCamposLaboral = function (ficha) {
                if (ficha.tipoContrato.nombre == "OBRA") {
                    $scope.tiposPersonales.clases.forEach(function (tipo) {
                        if (tipo.nombre == "CAMPO") {
                            ficha.tipoPersonal = tipo
                        }

                    });
                    ficha.area = {}
                    ficha.ubicacion = {}

                }
                if (ficha.tipoContrato.nombre == "INDEFINIDO") {
                    $scope.tiposPersonales.clases.forEach(function (tipo) {
                        if (tipo.nombre == "OFICINA") {
                            ficha.tipoPersonal = tipo
                        }

                    });
                    $scope.listaAreas.clases.forEach(function (tipo) {
                        if (tipo.nombre == "ESS-SCZ") {
                            ficha.area = tipo
                        }

                    });
                    $scope.ubicaciones.clases.forEach(function (tipo) {
                        if (tipo.nombre == "ESS-SCZ") {
                            ficha.ubicacion = tipo
                        }

                    });
                }

            }

            //Sorting of formación academica
            $scope.sortAsc = (a, b) => {
                if (a < b) {
                    return -1;
                }
                if (a > b) {
                    return 1;
                }
                // a debe ser igual b
                return 0;
            }

            $scope.sortDesc = (a, b) => {
                if (b < a) {
                    return -1;
                }
                if (b > a) {
                    return 1;
                }
                // a debe ser igual b
                return 0;
            }

            $scope.sortLogros = function (column, date) {
                if ($scope.sortDirectionLogros) {
                    $scope.sortDirectionLogros = false
                    if (date) {
                        $scope.hojaVida.logros.sort((a, b) => {
                            return new Date(b[column]) - new Date(a[column])
                        })
                    } else {
                        let count = column.split('.').length
                        if (count === 1) {
                            $scope.hojaVida.logros.sort((a, b) => {
                                if (b[column] < a[column]) {
                                    return -1;
                                }
                                if (b[column] > a[column]) {
                                    return 1;
                                }
                                // a debe ser igual b
                                return 0;
                            })
                        } else if (count === 2) {
                            $scope.hojaVida.logros.sort((a, b) => {
                                if (b[column.split('.')[0]].nombre < a[column.split('.')[0]].nombre) {
                                    return -1;
                                }
                                if (b[column.split('.')[0]].nombre > a[column.split('.')[0]].nombre) {
                                    return 1;
                                }
                                // a debe ser igual b
                                return 0;
                            })
                        }

                    }
                } else {
                    $scope.sortDirectionLogros = true
                    if (date) {
                        $scope.hojaVida.logros.sort((a, b) => {
                            return new Date(a.fecha) - new Date(b.fecha)
                        })
                    } else {
                        let count = column.split('.').length
                        if (count === 1) {
                            $scope.hojaVida.logros.sort((a, b) => {
                                if (b[column] > a[column]) {
                                    return -1;
                                }
                                if (b[column] < a[column]) {
                                    return 1;
                                }
                                // a debe ser igual b
                                return 0;
                            })
                        } else if (count === 2) {
                            $scope.hojaVida.logros.sort((a, b) => {
                                if (b[column.split('.')[0]].nombre > a[column.split('.')[0]].nombre) {
                                    return -1;
                                }
                                if (b[column.split('.')[0]].nombre < a[column.split('.')[0]].nombre) {
                                    return 1;
                                }
                                // a debe ser igual b
                                return 0;
                            })
                        }

                    }
                }
            }

            $scope.sortCapacitaciones = function (column, date) {
                if ($scope.sortDirectionCapacitaciones) {
                    $scope.sortDirectionCapacitaciones = false
                    if (date) {
                        $scope.hojaVida.capacidades.sort((a, b) => {
                            return new Date(b[column]) - new Date(a[column])
                        })
                    } else {
                        let count = column.split('.').length
                        if (count === 1) {
                            $scope.hojaVida.capacidades.sort((a, b) => {
                                if (b[column] < a[column]) {
                                    return -1;
                                }
                                if (b[column] > a[column]) {
                                    return 1;
                                }
                                // a debe ser igual b
                                return 0;
                            })
                        } else if (count === 2) {
                            $scope.hojaVida.capacidades.sort((a, b) => {
                                if (b[column.split('.')[0]].nombre < a[column.split('.')[0]].nombre) {
                                    return -1;
                                }
                                if (b[column.split('.')[0]].nombre > a[column.split('.')[0]].nombre) {
                                    return 1;
                                }
                                // a debe ser igual b
                                return 0;
                            })
                        }

                    }
                } else {
                    $scope.sortDirectionCapacitaciones = true
                    if (date) {
                        $scope.hojaVida.capacidades.sort((a, b) => {
                            return new Date(a[column]) - new Date(b[column])
                        })
                    } else {
                        let count = column.split('.').length
                        if (count === 1) {
                            $scope.hojaVida.capacidades.sort((a, b) => {
                                if (b[column] > a[column]) {
                                    return -1;
                                }
                                if (b[column] < a[column]) {
                                    return 1;
                                }
                                // a debe ser igual b
                                return 0;
                            })
                        } else if (count === 2) {
                            $scope.hojaVida.capacidades.sort((a, b) => {
                                if (b[column.split('.')[0]].nombre > a[column.split('.')[0]].nombre) {
                                    return -1;
                                }
                                if (b[column.split('.')[0]].nombre < a[column.split('.')[0]].nombre) {
                                    return 1;
                                }
                                // a debe ser igual b
                                return 0;
                            })
                        }
                    }
                }
            }

            $scope.sortExperienciaLaboral = function (column, date) {
                if ($scope.sortDirectionExperienciaLaboral) {
                    $scope.sortDirectionExperienciaLaboral = false
                    if (date) {
                        $scope.hojaVida.experienciasLaborales.sort((a, b) => {
                            return (new Date(b[column]) - new Date(a[column]))
                        })
                    } else {
                        $scope.hojaVida.experienciasLaborales.sort((a, b) => {
                            if (b[column] < a[column]) {
                                return -1;
                            }
                            if (b[column] > a[column]) {
                                return 1;
                            }
                            // a debe ser igual b
                            return 0;
                        })
                    }
                } else {
                    $scope.sortDirectionExperienciaLaboral = true
                    if (date) {
                        $scope.hojaVida.experienciasLaborales.sort((a, b) => {
                            return (new Date(a[column]) - new Date(b[column]))
                        })
                    } else {
                        $scope.hojaVida.experienciasLaborales.sort((a, b) => {
                            if (b[column] > a[column]) {
                                return -1;
                            }
                            if (b[column] < a[column]) {
                                return 1;
                            }
                            // a debe ser igual b
                            return 0;
                        })
                    }
                }
            }
            $scope.softFormacionAcademica = function (column, num) {
                let splitedText = column.split('.')

                if (splitedText.length === 2) {
                    if ($scope.sortDirectionForFormacionAcademica) {
                        $scope.sortDirectionForFormacionAcademica = false
                        $scope.hojaVida.formacionesAcademicas.sort((a, b) => {
                            if (b[splitedText[0]].nombre < a[splitedText[0]].nombre) {
                                return -1;
                            }
                            if (b[splitedText[0]].nombre > a[splitedText[0]].nombre) {
                                return 1;
                            }
                            // a debe ser igual b
                            return 0;
                        })
                    } else {
                        $scope.sortDirectionForFormacionAcademica = true
                        $scope.hojaVida.formacionesAcademicas.sort((a, b) => {
                            if (b[splitedText[0]].nombre > a[splitedText[0]].nombre) {
                                return -1;
                            }
                            if (b[splitedText[0]].nombre < a[splitedText[0]].nombre) {
                                return 1;
                            }
                            // a debe ser igual b
                            return 0;
                        })
                    }
                } else if (splitedText.length === 1) {
                    if (num) {
                        if ($scope.sortDirectionForFormacionAcademica) {
                            $scope.sortDirectionForFormacionAcademica = false
                            $scope.hojaVida.formacionesAcademicas.sort((a, b) => parseInt(a[splitedText[0]]) - parseInt(b[splitedText[0]]))
                        } else {
                            $scope.sortDirectionForFormacionAcademica = true
                            $scope.hojaVida.formacionesAcademicas.sort((a, b) => parseInt(b[splitedText[0]]) - parseInt(a[splitedText[0]]))
                        }
                    } else {
                        $scope.hojaVida.formacionesAcademicas.sort((a, b) => {
                            if (b[column] > a[column]) {
                                return -1;
                            }
                            if (b[column] < a[column]) {
                                return 1;
                            }
                            // a debe ser igual b
                            return 0;
                        })
                    }
                }
            }

            //find ficha
            //logica hoja de vida
            //FORMACION ACADEMICA
            $scope.agregarFormacionAcademica = function (formacion) {
                $scope.hojaVida.formacionesAcademicas.push(formacion)
                $('#id-doc-formacion').ace_file_input('reset_input');
                $scope.formacionAcademica = { edit: false, eliminado: false }
            }
            $scope.guardarFormacionAcademicaEditada = function (formacion) {
                $scope.formacionAcademica = { edit: false, eliminado: false }
                $('#id-doc-formacion').ace_file_input('reset_input');
            }

            $scope.editarFomracionAcademica = function (formacion, index) {
                $scope.formacionAcademica = formacion
                if(formacion.documento) $('#id-doc-formacion').ace_file_input('show_file_list', [$scope.base_url+formacion.documento]);
                $scope.formacionAcademica.edit = true
            }
            $scope.eliminarFomracionAcademica = function (formacion) {
                SweetAlert.swal({
                    title: "",
                    html: `<b>¿Seguro que quiere eliminar el registro?</b>`,
                    icon: 'warning',
                    showCloseButton: true,
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si',
                    cancelButtonText: "No",
                }).then(async function (result) {
                    if (result.isConfirmed) formacion.eliminado = true;
                })
                
            }
            //FORMACION ACADEMICA
            //EXPERIENCIA LABORAL
            $scope.agregarExperienciaLaboral = function (experienciaLaboral) {

                isvalid = false;
                controlIssue = '';
                message = '';
                $('#id-doc-experiencia').ace_file_input('reset_input');
                
                if (experienciaLaboral.fecha_inicio == undefined || experienciaLaboral.fecha_fin == undefined || experienciaLaboral.empresa == undefined) {

                    isValid = false;
                    if (experienciaLaboral.empresa) {
                        controlIssue = 'fechaInicioExpLaboral';
                        message = 'Las fechas de inicio y fin no pueden estar vacias';
                    } else {
                        controlIssue = 'empresaLaboral';
                        message = 'El nombre de la emrpesa es requerido';
                    }

                } else {

                    if (experienciaLaboral.fecha_inicio > experienciaLaboral.fecha_fin) {
                        isValid = false;
                        controlIssue = 'fechaInicioExpLaboral';
                        message = 'La fecha inicio no puede ser mayor a la final';
                    } else {
                        isValid = true;
                    }


                }

                if (isValid) {

                    experienciaLaboral.fecha_inicio = new Date(convertirFecha(experienciaLaboral.fecha_inicio))
                    experienciaLaboral.fecha_fin = new Date(convertirFecha(experienciaLaboral.fecha_fin))
                    experienciaLaboral.fecha_inicioTexto = $scope.fechaATexto(experienciaLaboral.fecha_inicio)
                    experienciaLaboral.fecha_finTexto = $scope.fechaATexto(experienciaLaboral.fecha_fin)
                    $scope.hojaVida.experienciasLaborales.push(experienciaLaboral)
                    $scope.experienciaLaboral = { edit: false, eliminado: false }

                } else {
                    $scope.enfocar(controlIssue);
                    // toastr.options.positionClass = 'toast-top-left';
                    toastr.warning(message);
                }



            }
            $scope.guardarExperienciaLaboralEditada = function (experienciaLaboral) {

                isvalid = false;
                controlIssue = '';
                message = '';

                if (experienciaLaboral.fecha_inicio == undefined || experienciaLaboral.fecha_fin == undefined || experienciaLaboral.empresa == undefined) {

                    isValid = false;
                    if (experienciaLaboral.empresa) {
                        controlIssue = 'fechaInicioExpLaboral';
                        message = 'Las fechas de inicio y fin no pueden estar vacias';
                    } else {
                        controlIssue = 'empresaLaboral';
                        message = 'El nombre de la emrpesa es requerido';
                    }

                } else {

                    if (experienciaLaboral.fecha_inicio > experienciaLaboral.fecha_fin) {
                        isValid = false;
                        controlIssue = 'fechaInicioExpLaboral';
                        message = 'La fecha inicio no puede ser mayor a la final';
                    } else {
                        isValid = true;
                    }


                }

                if (isValid) {

                    experienciaLaboral.fecha_inicio = new Date(convertirFecha(experienciaLaboral.fecha_inicio))
                    experienciaLaboral.fecha_fin = new Date(convertirFecha(experienciaLaboral.fecha_fin))
                    experienciaLaboral.fecha_inicioTexto = $scope.fechaATexto(experienciaLaboral.fecha_inicio)
                    experienciaLaboral.fecha_finTexto = $scope.fechaATexto(experienciaLaboral.fecha_fin)
                    $scope.experienciaLaboral = { edit: false, eliminado: false }
                    $('#id-doc-experiencia').ace_file_input('reset_input');
                } else {
                    $scope.enfocar(controlIssue);
                    // toastr.options.positionClass = 'toast-top-left';
                    toastr.warning(message);
                }
            }
            $scope.editarExperienciaLaboral = function (experienciaLaboral) {
                experienciaLaboral.fecha_inicio = $scope.fechaATexto(experienciaLaboral.fecha_inicio)
                experienciaLaboral.fecha_fin = $scope.fechaATexto(experienciaLaboral.fecha_fin)
                $scope.experienciaLaboral = experienciaLaboral
                if(experienciaLaboral.documento) $('#id-doc-experiencia').ace_file_input('show_file_list', [$scope.base_url+experienciaLaboral.documento]);
                $scope.experienciaLaboral.edit = true
            }
            $scope.eliminarExperienciaLaboral = function (experienciaLaboral) {
                SweetAlert.swal({
                    title: "",
                    html: `<b>¿Seguro que quiere eliminar el registro?</b>`,
                    icon: 'warning',
                    showCloseButton: true,
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si',
                    cancelButtonText: "No",
                }).then(async function (result) {
                    if (result.isConfirmed) experienciaLaboral.eliminado = true;
                })
            }
            //EXPERIENCIA LABORAL
            //CAPACIDADES INTERNOS EXTERNOS
            $scope.agregarCapacidadHojaVida = function (capacidad) {
                capacidad.fecha = new Date(convertirFecha(capacidad.fecha))
                capacidad.fechaTexto = $scope.fechaATexto(capacidad.fecha)
                $scope.hojaVida.capacidades.push(capacidad)
                $('#id-doc-capacitacion').ace_file_input('reset_input');
                $scope.capacidad = { edit: false, eliminado: false }
            }
            $scope.guardarCapacidadHojaVidaEditada = function (capacidad) {
                capacidad.fecha = new Date(convertirFecha(capacidad.fecha))
                capacidad.fechaTexto = $scope.fechaATexto(capacidad.fecha)
                $('#id-doc-capacitacion').ace_file_input('reset_input');
                $scope.capacidad = { edit: false, eliminado: false }
            }
            $scope.editarCapacidadHojaVida = function (capacidad) {
                capacidad.fecha = $scope.fechaATexto(capacidad.fecha)
                $scope.capacidad = capacidad
                if(capacidad.documento) $('#id-doc-capacitacion').ace_file_input('show_file_list', [$scope.base_url+capacidad.documento]);
                $scope.capacidad.edit = true
            }
            $scope.eliminarCapacidadHojaVida = function (capacidad) {
                SweetAlert.swal({
                    title: "",
                    html: `<b>¿Seguro que quiere eliminar el registro?</b>`,
                    icon: 'warning',
                    showCloseButton: true,
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si',
                    cancelButtonText: "No",
                }).then(async function (result) {
                    if (result.isConfirmed) capacidad.eliminado = true;
                })
            }
            //CAPACIDADES INTERNOS EXTERNOS
            //LOGROS INTERNOS EXTERNOS
            $scope.agregarLogroHojaVida = function (logro) {
                logro.fecha = new Date(convertirFecha(logro.fecha))
                logro.fechaTexto = $scope.fechaATexto(logro.fecha)
                $scope.hojaVida.logros.push(logro)
                $('#id-doc-logro').ace_file_input('reset_input');
                $scope.logro = { edit: false, eliminado: false }
            }
            $scope.guardarLogroHojaVidaEditada = function (logro) {
                logro.fecha = new Date(convertirFecha(logro.fecha))
                logro.fechaTexto = $scope.fechaATexto(logro.fecha)
                $('#id-doc-logro').ace_file_input('reset_input');
                $scope.logro = { edit: false, eliminado: false }
            }
            $scope.editarLogroHojaVida = function (logro) {
                logro.fecha = $scope.fechaATexto(logro.fecha)
                $scope.logro = logro
                if(logro.documento) $('#id-doc-logro').ace_file_input('show_file_list', [$scope.base_url+logro.documento]);
                $scope.logro.edit = true
            }
            $scope.eliminarLogroHojaVida = function (logro) {
                SweetAlert.swal({
                    title: "",
                    html: `<b>¿Seguro que quiere eliminar el registro?</b>`,
                    icon: 'warning',
                    showCloseButton: true,
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si',
                    cancelButtonText: "No",
                }).then(async function (result) {
                    if (result.isConfirmed) logro.eliminado = true;
                })
            }
            //LOGROS INTERNOS EXTERNOS

            $scope.GuardarHojaDeVida = function () {
                if ($scope.opcionesAplicacion.RRHH_OPCION_HOJA_VIDA.puede_crear) {
                    var button = $('#siguiente-s').text().trim()
                    if (button != "Siguiente") {
                        if ($scope.empleado.activo) {
                            var promesa = GuardarEmpleadoHojaVida($scope.empleado.id, $scope.hojaVida)
                            promesa.then(function (dato) {
                                $scope.cerrarDialogHojaVida()
                                SweetAlert.swal("", dato.mensaje, "success")
                            })
                        } else {
                            $("#formacion-academica").click()
                            $scope.cerrarDialogHojaVida()
                        }
                    }
                } else {
                    var button = $('#siguiente-s').text().trim()
                    if (button != "Siguiente") {
                        $scope.cerrarDialogHojaVida()
                    }
                }
            }
            $scope.GuardarHojaDeVidaDirecto = function () {
                var promesa = GuardarEmpleadoHojaVida($scope.empleado.id, $scope.hojaVida)
                promesa.then(function (dato) {
                    $scope.cerrarDialogHojaVida()
                    SweetAlert.swal("", dato.mensaje, "success");
                })
            }
            //impresion hoja de vida

            $scope.imprimirHojaVida = function (filtro) {
                if (filtro.capacidadInterna) {
                    var a = filtro
                    a.tipo = "INTER"
                    if (a.inicio && a.fin) {
                        a.inicio = new Date(convertirFecha(a.inicio))
                        a.fin = new Date(convertirFecha(a.fin))
                    } else {
                        a.inicio = 0
                        a.fin = 0
                    }
                    var promesa = DatosCapacidadesImpresion(a, $scope.hojaVida.id)
                    promesa.then(function (dato) {
                        $scope.capacidades = dato.capacidades
                        var pormimg = ObtenerImagen($scope.empleado.imagen)
                        pormimg.then(function (img) {
                            // $scope.usuarioSesion.empresa.imagen = img
                            $scope.generarPdfHojaVida(img)
                            a.inicio = ""
                            a.fin = ""
                        })
                        // convertUrlToBase64Image($scope.empleado.imagen, function (imagenEmpresa) {
                        //     var imagen = imagenEmpresa;
                        //     $scope.generarPdfHojaVida(imagen)
                        //     a.inicio = ""
                        //     a.fin = ""
                        // });

                    })
                } else {
                    var a = filtro
                    a.tipo = "EXT"
                    a.inicio = 0
                    a.fin = 0
                    if (!$scope.hojaVida.id) {
                        return $scope.mostrarMensaje('' + $scope.empleado.persona.nombre_completo + ' no cuenta con registro de hoja de vida.')
                    }
                    var promesa = DatosCapacidadesImpresion(a, $scope.hojaVida.id)
                    promesa.then(function (dato) {
                        $scope.capacidades = dato.capacidades
                        var pormimg = ObtenerImagen($scope.empleado.imagen)
                        pormimg.then(function (img) {
                            // $scope.usuarioSesion.empresa.imagen = img
                            $scope.generarPdfHojaVida(img)
                            a.inicio = ""
                            a.fin = ""
                        }).catch((err) => $scope.mostrarMensaje(err))
                        // convertUrlToBase64Image($scope.empleado.imagen, function (imagenEmpresa) {
                        //     var imagen = imagenEmpresa;
                        //     $scope.generarPdfHojaVida(imagen)
                        //     a.inicio = ""
                        //     a.fin = ""
                        // });

                    }).catch((err) => $scope.mostrarMensaje(err))

                }
            }

            $scope.generarPdfHojaVida = function (imagen) {
                blockUI.start();
                /*  if ($scope.filtroCap.capacidadInterna) { */
                totalpaginastamaño = $scope.hojaVida.experienciasLaborales.length + $scope.hojaVida.formacionesAcademicas.length + $scope.capacidades.length + $scope.hojaVida.logros.length
                /*   } else {
                      totalpaginastamaño = $scope.hojaVida.experienciasLaborales.length + $scope.hojaVida.formacionesAcademicas.length
                  } */
                promesaPaciente = obtenerEmpleadoRh($scope.empleado.id)
                promesaPaciente.then(function (dato) {
                    if (dato.clase != undefined) {
                        dato.medicoPaciente.tipo_contrato = dato.clase
                    }
                    $scope.empleado2 = dato.medicoPaciente
                    //	var inventarios = $scope.inventarios;
                    var doc = new PDFDocument({ compress: false, size: [612, 792], margin: 20 });
                    var stream = doc.pipe(blobStream());
                    // draw some text
                    doc.rect(40, 60, 532, 692).stroke("#04385E")
                    var y = 180, itemsPorPagina = 42, items = 0, pagina = 1, totalPaginas = Math.ceil(totalpaginastamaño / itemsPorPagina);
                    $scope.dibujarCabeceraPDFHojaVida(doc, 1, totalPaginas, imagen);
                    var numeracion = 1
                    if ($scope.hojaVida.formacionesAcademicas && $scope.hojaVida.formacionesAcademicas.length > 0) {
                        numeracion++;
                        doc.rect(40, y, 532, 15).fill("#04385E").fillColor('#fff');
                        doc.font('Helvetica-Bold', 8).text(numeracion + ". GRADOS DE INSTRUCCIÓN", 50, y + 4)
                        doc.font('Helvetica-Bold', 7).fillColor('#000');
                        doc.lineGap(-2)
                        y += 19
                        doc.lineWidth(0.2).rect(70, y, 472, 15).stroke()
                        doc.rect(120, y, 0, 15).stroke()
                        doc.rect(322, y, 0, 15).stroke()
                        doc.rect(392, y, 0, 15).stroke()


                        doc.text("AÑO DE OBTENCIÓN", 70, y + 2, { width: 50, align: 'center' });
                        doc.text("INSTITUCIÓN", 120, y + 5, { width: 202, align: 'center' });
                        doc.text("GRADO", 322, y + 5, { width: 70, align: 'center' });
                        doc.text("TÍTULO OBTENIDO", 392, y + 5, { width: 150, align: 'center' });
                        doc.font('Helvetica', 7);
                        y += 15;
                        for (var i = 0; i < $scope.hojaVida.formacionesAcademicas.length; i++) {
                            formacion = $scope.hojaVida.formacionesAcademicas[i]
                            doc.rect(70, y, 472, 15).stroke()
                            doc.rect(120, y, 0, 15).stroke()
                            doc.rect(322, y, 0, 15).stroke()
                            doc.rect(392, y, 0, 15).stroke()
                            doc.text(formacion.anio_obtencion ? formacion.anio_obtencion : '', 70, y + 2, { width: 50, align: 'center' });
                            doc.text(formacion.institucion.nombre ? formacion.institucion.nombre.toUpperCase() : '', 122, y + 2, { width: 200 });
                            doc.text(formacion.grado.nombre ? formacion.grado.nombre.toUpperCase() : '', 324, y + 2, { width: 68 });
                            doc.text(formacion.titulo.nombre ? formacion.titulo.nombre : '', 394, y + 2, { width: 148 });
                            y += 15;
                            items++;
                            //totalCosto = totalCosto + inventarios[i].costo_total;
                            if (y >= 725) {
                                doc.addPage({ compress: false, size: [612, 792], margin: 20 });
                                doc.font('Helvetica-Bold', 11).rect(40, 40, 532, 15).fill("#04385E").fillColor('#fff');
                                doc.text("HOJA DE VIDA", 0, 43, { align: "center" });
                                doc.rect(40, 60, 532, 692).stroke("#04385E")
                                doc.font('Helvetica-Bold', 7).fillColor('#000');;
                                y = 65;
                                items = 0;
                                pagina = pagina + 1;
                                doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 0, 755, { align: "center" });
                                doc.font('Helvetica', 7);
                            }
                        }
                        y += 15;
                    }
                    if ($scope.capacidades && $scope.capacidades.length > 0) {
                        numeracion++;
                        doc.rect(40, y, 532, 15).fill("#04385E").fillColor('#fff');
                        doc.font('Helvetica-Bold', 8).text(numeracion + ". CURSOS, CAPACITACIONES Y SEMINARIOS", 50, y + 4)
                        doc.font('Helvetica-Bold', 7).fillColor('#000');
                        doc.lineGap(-2)
                        y += 19
                        doc.lineWidth(0.2).rect(70, y, 472, 15).stroke()
                        doc.rect(120, y, 0, 15).stroke()
                        doc.rect(322, y, 0, 15).stroke()
                        doc.rect(452, y, 0, 15).stroke()
                        doc.text("FECHA", 70, y + 5, { width: 50, align: 'center' });
                        doc.text("CURSO", 120, y + 5, { width: 202, align: 'center' });
                        doc.text("INSTITUCIÓN", 322, y + 5, { width: 130, align: 'center' });
                        doc.text("CERTIFICADO", 452, y + 5, { width: 100, align: 'center' });
                        doc.font('Helvetica', 7);
                        y += 15;
                        for (var j = 0; j < $scope.capacidades.length; j++) {
                            var capacidad = $scope.capacidades[j]
                            doc.lineWidth(0.2).rect(70, y, 472, 15).stroke()
                            doc.rect(120, y, 0, 15).stroke()
                            doc.rect(322, y, 0, 15).stroke()
                            doc.rect(452, y, 0, 15).stroke()
                            capacidad.fechaTexto = $scope.fechaATexto(capacidad.fecha)
                            doc.text(capacidad.fechaTexto, 70, y + 2, { width: 50, align: 'center' });
                            doc.text(capacidad.curso ? capacidad.curso.toUpperCase() : '', 122, y + 2, { width: 200 });
                            doc.text(capacidad.institucion ? capacidad.institucion.toUpperCase() : '', 324, y + 2, { width: 128 });
                            doc.text(capacidad.certificado ? capacidad.certificado.toUpperCase() : '', 454, y + 2, { width: 98 });
                            y += 15
                            items++;
                            //totalCosto = totalCosto + inventarios[i].costo_total;
                            if (y >= 725) {
                                doc.addPage({ compress: false, size: [612, 792], margin: 20 });
                                doc.font('Helvetica-Bold', 11).rect(40, 40, 532, 15).fill("#04385E").fillColor('#fff');
                                doc.text("HOJA DE VIDA", 0, 43, { align: "center" });
                                doc.rect(40, 60, 532, 692).stroke("#04385E")
                                doc.font('Helvetica-Bold', 7).fillColor('#000');;
                                y = 65;
                                items = 0;
                                pagina = pagina + 1;
                                doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 0, 755, { align: "center" });
                                doc.font('Helvetica', 7);
                            }
                        }
                        y += 15
                    }
                    if ($scope.hojaVida.experienciasLaborales && $scope.hojaVida.experienciasLaborales.length > 0) {
                        numeracion++;
                        doc.rect(40, y, 532, 15).fill("#04385E").fillColor('#fff');
                        doc.font('Helvetica-Bold', 8).text(numeracion + ". EXPERIENCIA LABORAL", 50, y + 4)
                        doc.font('Helvetica-Bold', 7).fillColor('#000');
                        doc.lineGap(-2)
                        y += 19
                        doc.lineWidth(0.2).rect(70, y, 472, 15).stroke()
                        doc.rect(110, y, 0, 15).stroke()
                        doc.rect(150, y, 0, 15).stroke()
                        doc.rect(270, y, 0, 15).stroke()
                        doc.rect(370, y, 0, 15).stroke()
                        doc.rect(502, y, 0, 15).stroke()
                        doc.text("DESDE", 70, y + 5, { width: 40, align: 'center' });
                        doc.text("HASTA", 110, y + 5, { width: 40, align: 'center' });
                        doc.text("EMPRESA", 150, y + 5, { width: 120, align: 'center' });
                        doc.text("CARGO", 270, y + 5, { width: 100, align: 'center' });
                        doc.text("REFERENCIA", 370, y + 5, { width: 132, align: 'center' });
                        doc.text("TELÉFONO", 502, y + 5, { width: 40, align: 'center' });
                        doc.font('Helvetica', 7);
                        y += 15;
                        for (var h = 0; h < $scope.hojaVida.experienciasLaborales.length; h++) {
                            var experienciaLaboral = $scope.hojaVida.experienciasLaborales[h]
                            doc.lineWidth(0.2).rect(70, y, 472, 15).stroke()
                            doc.rect(110, y, 0, 15).stroke()
                            doc.rect(150, y, 0, 15).stroke()
                            doc.rect(270, y, 0, 15).stroke()
                            doc.rect(370, y, 0, 15).stroke()
                            doc.rect(502, y, 0, 15).stroke()

                            doc.text(experienciaLaboral.fecha_inicioTexto ? experienciaLaboral.fecha_inicioTexto : '', 70, y + 2, { width: 40, align: 'center' });
                            doc.text(experienciaLaboral.fecha_finTexto ? experienciaLaboral.fecha_finTexto : '', 110, y + 2, { width: 40, align: 'center' });
                            doc.text(experienciaLaboral.empresa ? experienciaLaboral.empresa.toUpperCase() : '', 152, y + 2, { width: 118 });
                            doc.text(experienciaLaboral.cargo ? experienciaLaboral.cargo.toUpperCase() : '', 272, y + 2, { width: 98 });
                            doc.text(experienciaLaboral.contacto ? experienciaLaboral.contacto.toUpperCase() : '', 372, y + 2, { width: 130 });
                            doc.text(experienciaLaboral.telefono ? experienciaLaboral.telefono : '', 504, y + 2, { width: 38 });
                            y += 15;
                            items++;
                            //totalCosto = totalCosto + inventarios[i].costo_total;
                            if (y >= 725) {
                                doc.addPage({ compress: false, size: [612, 792], margin: 20 });
                                doc.font('Helvetica-Bold', 11).rect(40, 40, 532, 15).fill("#04385E").fillColor('#fff');
                                doc.text("HOJA DE VIDA", 0, 43, { align: "center" });
                                doc.rect(40, 60, 532, 692).stroke("#04385E")
                                doc.font('Helvetica-Bold', 7).fillColor('#000');;
                                y = 65;
                                items = 0;
                                pagina = pagina + 1;
                                doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 0, 755, { align: "center" });
                                doc.font('Helvetica', 7);
                            }
                        }
                        y += 15;
                    }
                    if ($scope.hojaVida.logros && $scope.hojaVida.logros.length > 0) {
                        numeracion++;
                        doc.rect(40, y, 532, 15).fill("#04385E").fillColor('#fff');
                        doc.font('Helvetica-Bold', 8).text(numeracion + ". LOGROS y RECONOCIMIENTOS", 50, y + 4)
                        doc.font('Helvetica-Bold', 7).fillColor('#000');
                        doc.lineGap(-2)
                        y += 19
                        doc.lineWidth(0.2).rect(70, y, 472, 15).stroke()
                        doc.rect(110, y, 0, 15).stroke()
                        doc.rect(240, y, 0, 15).stroke()
                        doc.rect(360, y, 0, 15).stroke()
                        doc.text("FECHA", 70, y + 5, { width: 40, align: 'center' });
                        doc.text("INSTITUCIÓN", 110, y + 5, { width: 130, align: 'center' });
                        doc.text("TIPO", 240, y + 5, { width: 120, align: 'center' });
                        doc.text("MOTIVO", 360, y + 5, { width: 182, align: 'center' });
                        doc.font('Helvetica', 7);
                        y += 15;
                        for (var h = 0; h < $scope.hojaVida.logros.length; h++) {
                            var logro = $scope.hojaVida.logros[h]
                            doc.lineWidth(0.2).rect(70, y, 472, 15).stroke()
                            doc.rect(110, y, 0, 15).stroke()
                            doc.rect(240, y, 0, 15).stroke()
                            doc.rect(360, y, 0, 15).stroke()

                            doc.text(logro.fecha ? fechaATexto(logro.fecha) : '', 70, y + 2, { width: 40, align: 'center' });
                            doc.text(logro.institucion ? logro.institucion.toUpperCase() : '', 112, y + 2, { width: 128 });
                            doc.text(logro.tipoLogro ? logro.tipoLogro.nombre ? logro.tipoLogro.nombre.toUpperCase() : '' : '', 242, y + 2, { width: 118 });
                            doc.text(logro.motivo ? logro.motivo.toUpperCase() : '', 362, y + 2, { width: 182 });
                            y += 15;
                            items++;
                            //totalCosto = totalCosto + inventarios[i].costo_total;
                            if (y >= 725) {
                                doc.addPage({ compress: false, size: [612, 792], margin: 20 });
                                doc.font('Helvetica-Bold', 11).rect(40, 40, 532, 15).fill("#04385E").fillColor('#fff');
                                doc.text("HOJA DE VIDA", 0, 43, { align: "center" });
                                doc.rect(40, 60, 532, 692).stroke("#04385E")
                                doc.font('Helvetica-Bold', 7).fillColor('#000');;
                                y = 65;
                                items = 0;
                                pagina = pagina + 1;
                                doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 0, 755, { align: "center" });
                                doc.font('Helvetica', 7);
                            }
                        }
                        y += 15;
                    }
                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                    blockUI.stop();
                })
            }
            $scope.dibujarCabeceraPDFHojaVida = function (doc, pagina, totalPaginas, imagen) {
                doc.font('Helvetica-Bold', 11).rect(40, 40, 532, 15).fill("#04385E").fillColor('#fff');
                doc.text("HOJA DE VIDA", 0, 43, { align: "center" });

                doc.rect(40, 60, 532, 15).fill("#04385E").fillColor('#fff');
                doc.font('Helvetica-Bold', 8).text("1. INFORMACIÓN GENERAL DEL TRABAJADOR", 50, 64)
                doc.image(imagen, 486, 76, { width: 85, height: 85 });
                doc.font('Helvetica-Bold', 7).fillColor('#000');;
                //doc.text("SUCURSAL:" + $scope.reporte.sucursal.nombre + " - ALMACEN:" + $scope.reporte.almacen.nombre, 0, 38, { align: "center" });
                doc.text("NOMBRE Y APELLIDO:", 60, 80);
                doc.text("NACIONALIDAD:", 60, 90);
                doc.text("LUGAR DE NACIMIENTO:", 60, 100);
                doc.text("RESIDENCIA ACTUAL:", 60, 110);
                doc.text("DIRECCION:", 60, 120);
                doc.text("CI:", 60, 130);
                doc.text("ESTADO CIVIL:", 60, 140);
                doc.text("TELEFONO:", 60, 150);
                doc.text("CELULAR:", 60, 160);
                doc.text("E-MAIL:", 60, 170);
                doc.font('Helvetica', 7);
                doc.text($scope.ficha.empleado.persona.nombre_completo, 165, 80);
                if ($scope.ficha.empleado.persona.pais) {
                    doc.text($scope.ficha.empleado.persona.pais.nombre, 165, 90);
                }
                ciudadNacimiento = '';
                provinciaNacimiento = '';
                localidadNacimiento = '';
                if ($scope.ficha.empleado.persona.ciudad) { ciudadNacimiento = $scope.ficha.empleado.persona.ciudad.nombre }
                if ($scope.ficha.empleado.persona.provincia) { provinciaNacimiento = $scope.ficha.empleado.persona.provincia.nombre }
                if ($scope.ficha.empleado.persona.localidad) { localidadNacimiento = $scope.ficha.empleado.persona.localidad.nombre }
                doc.text(ciudadNacimiento + " / " + provinciaNacimiento + " / " + localidadNacimiento, 165, 100);
                if ($scope.ficha.empleado.persona.direccion_numero) {
                    doc.text($scope.ficha.empleado.persona.direccion_numero, 165, 110);
                }
                if ($scope.ficha.empleado.persona.direccion_zona) {
                    doc.text($scope.ficha.empleado.persona.direccion_zona, 165, 120);
                }
                if ($scope.ficha.empleado.persona.ci) {
                    doc.text($scope.ficha.empleado.persona.ci, 165, 130);
                }
                if ($scope.ficha.empleado.persona.estadoCivil) {
                    doc.text($scope.ficha.empleado.persona.estadoCivil.nombre, 165, 140);
                }
                if ($scope.ficha.empleado.persona.telefono) {
                    doc.text($scope.ficha.empleado.persona.telefono, 165, 150);
                }
                if ($scope.ficha.empleado.persona.telefono_movil) {
                    doc.text($scope.ficha.empleado.persona.telefono_movil, 165, 160);
                }
                if ($scope.ficha.empleado.persona.correo_electronico) {
                    doc.text($scope.ficha.empleado.persona.correo_electronico, 165, 170);
                }
                doc.font('Helvetica-Bold', 6);
                doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 0, 755, { align: "center", width: 612 });
            },
                //fin hoja de vida
                //certificado ficha
                $scope.llenarHistoricoCertificado = function (historialContratos) {
                    $scope.historialContratos = [];

                    for (var i = 0; i < historialContratos.length; i++) {
                        var fechaFin = ""
                        var fechaInicio = $scope.fechaATexto(historialContratos[i].fecha_inicio)
                        if (historialContratos[i].fecha_expiracion != null) {
                            fechaFin = $scope.fechaATexto(historialContratos[i].fecha_expiracion)
                        }
                        var Contrato = {
                            nombre: fechaInicio + "-" + fechaFin,
                            maker: "",
                            ticked: false,
                            id: historialContratos[i].id
                        }
                        $scope.historialContratos.push(Contrato);
                    }

                }
            $scope.generarPdfCertificado = function (certificado) {
                var doc = new PDFDocument({ size: [612, 792], margins: { top: 10, bottom: 10, left: 20, right: 20 } });
                var stream = doc.pipe(blobStream());
                if (certificado.tipo == 0) {                              // draw some text
                    $scope.dibujarPdfCertificadoHojaVida(doc, certificado);

                } else {
                    $scope.dibujarPdfCertificadoPrestamo(doc, certificado);
                }
                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
            }

            $scope.dibujarPdfCertificadoHojaVida = function (doc, certificado) {

                var fecha = new Date()
                var textomes = ""
                var textocargos = ""
                var mes2 = fecha.getMonth()
                $scope.meses.forEach(function (mes) {
                    if (mes.id == mes2) {
                        textomes = mes.nombre
                    }
                });
                $scope.ficha.cargo.forEach(function (cargo) {
                    if (textocargos == "") {
                        textocargos = cargo.nombre
                    } else {
                        textocargos = textocargos + ", " + cargo.nombre
                    }

                });
                doc.font('Times-Roman', 12);

                doc.text("Santa Cruz, " + fecha.getDate() + " de " + textomes + " de " + fecha.getFullYear(), 0, 75, { align: "center" });
                doc.font('Times-Roman', 24);
                doc.text("CERTIFICADO DE TRABAJO", 0, 150, { align: "center" });
                doc.font('Times-Roman', 13);
                var texto = "EMSERSO SA., certifica que " + $scope.ficha.empleado.persona.nombre_completo + " con CI. " + $scope.ficha.empleado.persona.ci + " " + $scope.ficha.empleado.extension.nombre_corto + ", trabajó (a) como " + textocargos + ", durante los siguientes periodos:"
                doc.text(texto, 100, 230, { width: 412, align: 'left', indent: 0, columns: 1, height: 500, ellipsis: true, lineGap: 15 });
                var f = doc.y + 20;
                for (var i = 0; i < certificado.historialContratos.length; i++) {
                    var element = certificado.historialContratos[i].nombre;
                    var textoFecha = element.split("-")
                    doc.text("Desde el " + textoFecha[0] + " al " + textoFecha[1], 100, f, { width: 412, align: 'left', indent: 0, columns: 1, height: 300, ellipsis: true });
                    f = f + 20
                }
                doc.text("Es cuanto certifico para los fines que convengan al interesado.", 100, f + 20, { align: "left" });
                doc.text("Lic. Rosangela Velasques S.", 100, 695);
                doc.text("JEFA DE RECURSOS HUMANOS", 100, 715);
            }

            $scope.dibujarPdfCertificadoPrestamo = function (doc, certificado) {

                var fecha = new Date()
                var textomes = ""
                var textocargos = ""
                var textoFechas = ""
                var mes2 = fecha.getMonth()
                $scope.meses.forEach(function (mes) {
                    if (mes.id == mes2) {
                        textomes = mes.nombre
                    }
                });
                $scope.ficha.cargo.forEach(function (cargo) {
                    if (textocargos == "") {
                        textocargos = cargo.nombre
                    } else {
                        textocargos = textocargos + ", " + cargo.nombre
                    }

                });
                for (var i = 0; i < certificado.historialContratos.length; i++) {
                    var element = certificado.historialContratos[i].nombre;
                    var textoFecha = element.split("-")
                    var ini = textoFecha[0].split("/")
                    var fin = textoFecha[1].split("/")

                    var fechaIni = new Date(ini[2], ini[1], ini[0])
                    var fechaFin = new Date(fin[2], fin[1], fin[0])
                    var mesIni = fechaIni.getMonth()
                    var mesFin = fechaFin.getMonth()
                    $scope.meses.forEach(function (mes) {
                        if (mes.id == mesIni) {
                            mesIni = mes.nombre
                        }
                    });
                    $scope.meses.forEach(function (mes) {
                        if (mes.id == mesFin) {
                            mesFin = mes.nombre
                        }
                        if (textoFecha[1] == "") {
                            mesFin = ""
                        }
                    });

                    if (textoFechas == "") {
                        if (mesFin != "") {
                            textoFechas = "el " + fechaIni.getDate() + " de " + mesIni + " de " + fechaIni.getFullYear() + " al " + fechaFin.getDate() + " de " + mesFin + " de " + fechaFin.getFullYear()
                        } else {
                            textoFechas = "el " + fechaIni.getDate() + " de " + mesIni + " de " + fechaIni.getFullYear() + "."
                        }
                    } else {
                        if (mesFin != "") {
                            textoFechas = textoFechas + ",  renovando contrato con la empresa a partir del " + fechaIni.getDate() + " de " + mesIni + " de " + fechaIni.getFullYear() + " al " + fechaFin.getDate() + " de " + mesFin + " de " + fechaFin.getFullYear()
                        } else {
                            textoFechas = textoFechas + ",  renovando contrato con la empresa a partir del " + fechaIni.getDate() + " de " + mesIni + " de " + fechaIni.getFullYear()
                        }
                    }
                    /*  texto"Desde el " + textoFecha[0] + " al " + textoFecha[1] */
                    if (i === (certificado.historialContratos.length - 1)) {
                        textoFechas = textoFechas + ". Percibiendo un sueldo aproximado mensual de Bs." + $scope.ficha.haber_basico + ".- (" + $scope.ficha.haber_basico_literal + ")"
                    }
                }
                doc.font('Times-Roman', 12);

                doc.text("Santa Cruz, " + fecha.getDate() + " de " + textomes + " de " + fecha.getFullYear(), 0, 75, { align: "center" });
                doc.font('Times-Roman', 24);
                doc.text("CERTIFICADO DE TRABAJO", 0, 150, { align: "center" });
                doc.font('Times-Roman', 13);
                var texto = "EMSERSO SA., certifica que " + $scope.ficha.empleado.persona.nombre_completo + " con CI. " + $scope.ficha.empleado.persona.ci + " " + $scope.ficha.empleado.extension.nombre_corto + ", trabaja en nuestra empresa como " + textocargos + " desde " + textoFechas + (certificado.incluir_sueldo ? "\nCon un sueldo de Bs. " + $scope.ficha.haber_basico.toFixed(2) : "")

                doc.text(texto, 100, 230, {
                    width: 412,
                    align: 'justify',
                    indent: 0,
                    columns: 1,
                    lineGap: 10,
                    wordSpacing: 1,
                    height: 300,
                    ellipsis: true,

                })

                doc.moveDown(2)

                doc.text("Es cuanto certifico para los fines que convengan al interesado.", { align: "left" });
                doc.text("Lic. Rosangela Velasques S.", 100, 695);
                doc.text("JEFA DE RECURSOS HUMANOS", 100, 715);

            }
            //fin certificado ficha

            //prestamos
            $scope.calcularCuota = function (prestamo) {
                var cuotaSinInteres = prestamo.monto / prestamo.plazo
                var interes = (cuotaSinInteres * prestamo.interes_pactado) / 100
                prestamo.cuota = cuotaSinInteres + interes
                prestamo.cuota2 = $scope.number_format(prestamo.cuota, 2)
                var años = 0;
                var meses = 0;
                var tiempo = prestamo.plazo

                do {
                    tiempo = tiempo - 12
                    años++
                    if (tiempo <= 12) {
                        meses = tiempo
                    }
                } while (tiempo > 12)
                if (prestamo.plazo > 12) {
                    prestamo.tiempo_plazo_literal = años + " año y " + (prestamo.plazo - (años * 12)) + " meses"
                } else {
                    prestamo.tiempo_plazo_literal = prestamo.plazo + " meses"
                }
            }
            $scope.GuardarPrestamo = function (prestamo) {
                prestamo.id_usuario = $scope.usuario.id
                prestamo.fecha_inicial = new Date($scope.convertirFecha(prestamo.fecha_inicial))
                prestamo.total = ((prestamo.monto * prestamo.interes_pactado) / 100) + prestamo.monto
                var promesa = CrearPrestamo($scope.empleado.id, $scope.usuario.id_empresa, prestamo)
                promesa.then(function (datos) {
                    $scope.imprimirPrestamo(datos.prestamo)
                    $scope.cerrarDialogNuevoPrestamo()
                    $scope.prestamo = {}
                    $scope.mostrarMensaje(datos.mensaje)
                })

            }
            $scope.GuardarMultiplesPrestamos = function (prestamo) {
                var idEmpleado = 0
                prestamo.id_usuario = $scope.usuario.id
                prestamo.fecha_inicial = new Date($scope.convertirFecha(prestamo.fecha_inicial))
                prestamo.total = ((prestamo.monto * prestamo.interes_pactado) / 100) + prestamo.monto
                var promesa = CrearPrestamo(idEmpleado, $scope.usuario.id_empresa, prestamo)
                promesa.then(function (datos) {
                    $scope.cerrarDialogPretamosNuevoTodos()
                    $scope.optenerListaPrestamos()
                    $scope.limpiarMultiSelect($scope.todosLosEmpleados)
                    $scope.empleadosSeleccionados = []
                    $scope.mostrarMensaje(datos.mensaje)
                    $scope.prestamo = {}
                })

            }

            $scope.imprimirPrestamo = function (prestamo) {
                var meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto',
                    'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];

                convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {

                    var doc = new PDFDocument({ size: [612, 792] });
                    var stream = doc.pipe(blobStream());

                    if (imagenEmpresa.length > 0 && imagenEmpresa !== "error") {
                        var imagen = imagenEmpresa;
                        if (imagen) {
                            doc.image(imagen, 40, 10, { fit: [100, 100] }); //{ fit: [200, 72] } { fit: [100, 72] }
                        }
                    }

                    doc.font('Helvetica-Bold', 12);
                    doc.text("N°: " + prestamo.numero_correlativo, 500, 50);

                    doc.text("PRESTAMO AL PERSONAL", 0, 60, { align: 'center' })
                    doc.font('Helvetica', 11);
                    doc.text("VALE COMPRA DE MATERIAL ESCOLAR", 0, 75, { align: 'center' }).fillColor('red');
                    doc.text("PRELIMINAR", 0, 90, { align: 'center' })

                    doc.font('Helvetica-Bold', 9).fillColor('black');
                    doc.text("MEDIANTE LA PRESENTE AUTORIZAMOS AL SR. (A): ", 40, 110);
                    doc.text("Con C.I.:", 40, 125);
                    doc.text("Del Campo:", 300, 125);
                    doc.text("LA SUMA DE BS.", 40, 140);
                    doc.text("POR CONCEPTO DE.:", 40, 155);

                    doc.text("Plan de pagos.:", 40, 170);
                    doc.text("Fecha de inicio:", 40, 185)
                    doc.text("Plazo: ", 40, 200);
                    doc.text("Taza de interés:", 160, 200)

                    doc.font('Helvetica', 9);
                    doc.text($scope.empleado.nombre_completo.toUpperCase(), 275, 110);

                    var ciExtencion = "";
                    if (prestamo.empleado.persona.ciudad != null) {
                        ciExtencion = prestamo.empleado.persona.ciudad.nombre_corto.toUpperCase();
                        doc.text($scope.empleado.ci + " " + prestamo.empleado.persona.ciudad.nombre_corto.toUpperCase(), 80, 125);
                    } else {
                        ciExtencion = "";
                        doc.text($scope.empleado.ci, 80, 125);
                    }
                    var campamento = $scope.empleado.campamento.toUpperCase();
                    doc.text(campamento, 355, 125);
                    var montoLiteral = ConvertirALiteral((prestamo.monto.toFixed(2)));
                    doc.text("Bs. " + $scope.number_format(prestamo.monto, 2) + ".-   (Son: " + montoLiteral + ")", 120, 140);
                    doc.text(prestamo.observacion.toUpperCase(), 140, 155);

                    var fechaInicial = new Date(prestamo.fecha_inicial)
                    var fechaD = fechaInicial.getDate();
                    var fechaM = fechaInicial.getMonth();
                    var fechaA = fechaInicial.getFullYear();

                    fechaM = meses[fechaM];
                    var fechaIni = fechaD + ", de " + fechaM.toLowerCase() + " " + fechaA;

                    doc.text(fechaIni, 110, 185);
                    doc.text(prestamo.plazo + " Meses", 70, 200);
                    doc.text(prestamo.interes_pactado + "%", 230, 200);
                    doc.font('Helvetica', 10);
                    var cuotas = prestamo.monto / prestamo.plazo;

                    doc.font('Helvetica-Bold', 8)

                    doc.rect(40, 215, 40, 20).stroke();
                    doc.rect(40, 235, 40, 20).stroke();
                    doc.text("Periodo", 45, 220);
                    doc.text("Montos", 45, 240);

                    var mesPeriodo = fechaInicial.getMonth();
                    var añoPeriodo = fechaInicial.getFullYear();
                    var xEspacio = 80;
                    var yEspacio1 = 215;
                    var yEspacio2 = 235;
                    var recorre = false;

                    for (let i = 0; i < prestamo.plazo; i++) {

                        doc.font('Helvetica-Bold', 8)
                        doc.rect(xEspacio, yEspacio1, 65, 20).stroke();
                        doc.rect(xEspacio, yEspacio2, 65, 20).stroke();

                        doc.text(meses[mesPeriodo] + " " + añoPeriodo, (xEspacio + 1), yEspacio1 + 5);
                        doc.font('Helvetica', 8)
                        doc.text(formatNumber(prestamo.cuota, 2) + ".", (xEspacio + 10), yEspacio2 + 5);
                        mesPeriodo = mesPeriodo + 1;
                        if (mesPeriodo > 11) {
                            añoPeriodo = añoPeriodo + 1;
                            mesPeriodo = 0;
                        }
                        xEspacio = xEspacio + 65;
                        if (xEspacio > 520) {
                            xEspacio = 40
                            yEspacio1 = 260;
                            yEspacio2 = 280;
                            recorre = true;
                        }
                    }
                    if (recorre == true) {
                        doc.font('Helvetica', 8);
                        doc.text("Preliminar Bs. " + $scope.number_format(prestamo.monto, 2), 40, 305);
                        doc.text("Monto total consumido ..................................... Firma Trabajador ..............................", 40, 315)


                        doc.text("NOTA IMPORTANTE: En caso de retiro Yo, Empleado " + $scope.empleado.nombre_completo + " con CI. " + $scope.empleado.ci + ", autorizo a la empresa Emserso S.A. el descuento del saldo que hubiere al momento de mi retiro, del pago de mi liquidación o beneficios sociales", 40, 330)
                        doc.font('Helvetica', 10);
                        var fechaActual = new Date();

                        doc.text($scope.usuario.empresa.departamento.nombre + " - " + fechaActual.getDate() + ", de " + meses[fechaActual.getMonth()] + " " + fechaActual.getFullYear(), 0, 360, { align: 'center' });

                    } else {
                        doc.font('Helvetica', 8);
                        doc.text("Preliminar Bs. " + $scope.number_format(prestamo.monto, 2), 40, 265);
                        doc.text("Monto total consumido ..................................... Firma Trabajador ..............................", 40, 275)

                        doc.text("NOTA IMPORTANTE: En caso de retiro Yo, Empleado " + $scope.empleado.nombre_completo + " con CI. " + $scope.empleado.ci + ", autorizo a la empresa Emserso S.A. el descuento del saldo que hubiere al momento de mi retiro, del pago de mi liquidación o beneficios sociales", 40, 290)
                        doc.font('Helvetica', 10);
                        var fechaActual = new Date();

                        doc.text($scope.usuario.empresa.departamento.nombre + " - " + fechaActual.getDate() + ", de " + meses[fechaActual.getMonth()] + " " + fechaActual.getFullYear(), 0, 320, { align: 'center' });

                    }

                    doc.text($scope.empleado.nombre_completo.toUpperCase(), 55, 390);
                    doc.font('Helvetica-Bold', 10);
                    doc.text("................................................", 60, 393);
                    doc.text("Trabajador", 100, 403);
                    doc.text(".................................", 440, 393);
                    doc.text("Autorizado", 460, 403);

                    doc.font('Helvetica', 8);
                    doc.text("Usuario: " + $scope.usuario.nombre_usuario + " Fecha: " + fechaActual.getDate() + "/" + ("0" + (fechaActual.getMonth() + 1)).slice(-2) + "/" + fechaActual.getFullYear() + " " + fechaActual.getHours() + ":" + fechaActual.getMinutes() + ":" + fechaActual.getSeconds(), 360, 430);

                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                })
            }
            // default is portrait landscape
            $scope.imprimirPrestamoRRHH = function (prestamo) {
                var meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto',
                    'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];

                convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {

                    var doc = new PDFDocument({ size: [612, 792] });
                    var stream = doc.pipe(blobStream());

                    if (imagenEmpresa.length > 0 && imagenEmpresa !== "error") {
                        var imagen = imagenEmpresa;
                        if (imagen) {
                            doc.image(imagen, 40, 10, { fit: [60, 60] }); //{ fit: [200, 72] } { fit: [100, 72] }
                        }
                    }
                    doc.font('Helvetica-Bold', 12);
                    if (prestamo.numero_correlativo != null) {
                        doc.text("N°: " + prestamo.numero_correlativo, 500, 50);
                    } else {
                        doc.text("N°: ", 500, 50);
                    }
                    doc.text("PRESTAMO AL PERSONAL", 0, 60, { align: 'center' })
                    doc.font('Helvetica', 11);
                    doc.text("VALE COMPRA DE MATERIAL ESCOLAR", 0, 75, { align: 'center' }).fillColor('red');
                    doc.text("PRELIMINAR", 0, 90, { align: 'center' })

                    doc.font('Helvetica-Bold', 9).fillColor('black');
                    doc.text("MEDIANTE LA PRESENTE AUTORIZAMOS AL SR. (A): ", 40, 110);
                    doc.text("Con C.I.:", 40, 125);
                    doc.text("Del Campo:", 300, 125);
                    doc.text("LA SUMA DE BS.", 40, 140);
                    doc.text("POR CONCEPTO DE.:", 40, 155);

                    doc.text("Plan de pagos.:", 40, 170);
                    doc.text("Fecha de inicio:", 40, 185)
                    doc.text("Plazo: ", 40, 200);
                    doc.text("Taza de interés:", 160, 200)

                    doc.font('Helvetica', 9);
                    doc.text(prestamo.empleado.persona.nombre_completo.toUpperCase(), 275, 110);
                    var ciExtencion = "";
                    if (prestamo.empleado.persona.ciudad != null) {
                        ciExtencion = prestamo.empleado.persona.ciudad.nombre_corto;
                        doc.text(prestamo.empleado.persona.ci + " " + prestamo.empleado.persona.ciudad.nombre_corto.toUpperCase(), 80, 125);
                    } else {
                        ciExtencion = ""
                        doc.text(prestamo.empleado.persona.ci, 80, 125);
                    }
                    var campamento = prestamo.empleado.campo.nombre.toUpperCase();
                    if (prestamo.empleado.persona.campamento != undefined) {
                        campamento = prestamo.empleado.persona.campamento.toUpperCase();
                    }
                    doc.text(campamento, 355, 125);
                    var montoLiteral = ConvertirALiteral((prestamo.monto.toFixed(2)));
                    doc.text("Bs. " + $scope.number_format(prestamo.monto, 2) + ".-   (Son: " + montoLiteral + ")", 120, 140);
                    doc.text(prestamo.observacion.toUpperCase(), 140, 155);

                    var fechaInicial = new Date(prestamo.fecha_inicial);
                    var fechaD = fechaInicial.getDate();
                    var fechaM = fechaInicial.getMonth();
                    var fechaA = fechaInicial.getFullYear();

                    fechaM = meses[fechaM];
                    var fechaIni = fechaD + ", de " + fechaM.toLowerCase() + " " + fechaA;

                    doc.text(fechaIni, 110, 185);
                    doc.text(prestamo.plazo + " Meses", 70, 200);
                    doc.text(prestamo.interes_pactado + "%", 230, 200);
                    doc.font('Helvetica', 10);
                    var cuotas = prestamo.monto / prestamo.plazo;

                    doc.font('Helvetica-Bold', 8)

                    doc.rect(40, 215, 40, 20).stroke();
                    doc.rect(40, 235, 40, 20).stroke();
                    doc.text("Periodo", 45, 220);
                    doc.text("Montos", 45, 240);

                    var mesPeriodo = fechaInicial.getMonth();
                    var añoPeriodo = fechaInicial.getFullYear();
                    var xEspacio = 80;
                    var yEspacio1 = 215;
                    var yEspacio2 = 235;
                    var recorre = false;

                    for (let i = 0; i < prestamo.plazo; i++) {

                        doc.font('Helvetica-Bold', 8)
                        doc.rect(xEspacio, yEspacio1, 65, 20).stroke();
                        doc.rect(xEspacio, yEspacio2, 65, 20).stroke();

                        doc.text(meses[mesPeriodo] + " " + añoPeriodo, (xEspacio + 1), yEspacio1 + 5);
                        doc.font('Helvetica', 8)
                        doc.text(formatNumber(prestamo.cuota, 2) + ".", (xEspacio + 10), yEspacio2 + 5);
                        mesPeriodo = mesPeriodo + 1;
                        if (mesPeriodo > 11) {
                            añoPeriodo = añoPeriodo + 1;
                            mesPeriodo = 0;
                        }
                        xEspacio = xEspacio + 65;
                        if (xEspacio > 520) {
                            xEspacio = 40
                            yEspacio1 = 260;
                            yEspacio2 = 280;
                            recorre = true;
                        }
                    }

                    if (recorre == true) {
                        doc.font('Helvetica', 8);
                        doc.text("Preliminar Bs. " + $scope.number_format(prestamo.monto, 2), 40, 305);
                        doc.text("Monto total consumido ............................ Firma Trabajador ..........................", 40, 315)

                        doc.text("NOTA IMPORTANTE: En caso de retiro Yo, " + prestamo.empleado.persona.nombre_completo + " con CI. " + prestamo.empleado.persona.ci + " " + ciExtencion + ", autorizo a la empresa Emserso S.A. realizar el descuento del saldo que hubiere al momento de mi retiro del pago de mi liquidación o beneficios sociales.", 40, 330)
                        doc.font('Helvetica', 10);
                        var fechaActual = new Date();

                        doc.text($scope.usuario.empresa.departamento.nombre + " - " + fechaActual.getDate() + ", de " + meses[fechaActual.getMonth()] + " " + fechaActual.getFullYear(), 0, 360, { align: 'center' });

                    } else {
                        doc.font('Helvetica', 8);
                        doc.text("Preliminar Bs. " + $scope.number_format(prestamo.monto, 2), 40, 265);
                        doc.text("Monto total consumido ............................ Firma Trabajador ..........................", 40, 275)

                        doc.text("NOTA IMPORTANTE: En caso de retiro Yo, " + prestamo.empleado.persona.nombre_completo + " con CI. " + prestamo.empleado.persona.ci + " " + ciExtencion + ", autorizo a la empresa Emserso S.A. realizar el descuento del saldo que hubiere al momento de mi retiro del pago de mi liquidación o beneficios sociales.", 40, 290)
                        doc.font('Helvetica', 10);
                        var fechaActual = new Date();

                        doc.text($scope.usuario.empresa.departamento.nombre + ", " + fechaActual.getDate() + ", de " + meses[fechaActual.getMonth()] + " " + fechaActual.getFullYear(), 0, 320, { align: 'center' });
                    }

                    doc.font('Helvetica', 10);
                    var fechaActual = new Date();

                    doc.font('Helvetica', 10);
                    doc.text(prestamo.empleado.persona.nombre_completo.toUpperCase(), 55, 390);
                    doc.font('Helvetica-Bold', 10);
                    doc.text("................................................", 60, 393);
                    doc.text("Trabajador", 100, 403);
                    doc.text(".................................", 440, 393);
                    doc.text("Autorizado", 460, 403);

                    doc.font('Helvetica', 8);
                    doc.text("Impresión", 360, 420);
                    doc.text("Usuario: " + $scope.usuario.nombre_usuario + " Fecha: " + fechaActual.getDate() + "/" + ("0" + (fechaActual.getMonth() + 1)).slice(-2) + "/" + fechaActual.getFullYear() + " " + fechaActual.getHours() + ":" + fechaActual.getMinutes() + ":" + fechaActual.getSeconds(), 360, 430);
                    var fecha_creacion = new Date(prestamo.fecha_inicial);
                    doc.text("Creado por", 45, 420);
                    doc.text("Usuario: " + prestamo.usuario.nombre_usuario + " Fecha: " + fecha_creacion.getDate() + "/" + ("0" + (fecha_creacion.getMonth() + 1)).slice(-2) + "/" + fecha_creacion.getFullYear() + " " + fecha_creacion.getHours() + ":" + fecha_creacion.getMinutes() + ":" + fecha_creacion.getSeconds(), 45, 430);

                    if (prestamo.eliminado == true) {
                        doc.font('Helvetica', 60);
                        doc.rotate(330, { origin: [285, 320] })
                        doc.fillColor('red').text('ANULADO', 200, 200, { align: 'center' })
                        doc.restore()
                    }
                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                })
            }

            $scope.GuardarPagoPrestamo = function (prestamo) {
                /* if (prestamo.monto_pagado != prestamo.cuota) { */
                if (prestamo.prestamoPagos.length > 0) {
                    var montopaga = prestamo.monto_pagado + prestamo.prestamoPagos[(prestamo.prestamoPagos.length - 1)].a_cuenta_anterior
                    var cuotaSinInteres = (prestamo.total - montopaga) / prestamo.plazo_restante
                    prestamo.cuota2 = cuotaSinInteres
                } else {
                    var cuotaSinInteres = (prestamo.total - prestamo.monto_pagado) / prestamo.plazo_restante
                    prestamo.cuota2 = cuotaSinInteres
                }

                /* } */
                /*   if (prestamo.monto_pagado == prestamo.total) {
                      prestamo.cuota2 = 0
                  } */
                prestamo.pagoFecha = new Date()
                var promesa = CrearPagoPrestamo($scope.usuario.id, $scope.prestamo.id, prestamo)
                promesa.then(function (datos) {
                    //$scope.imprimirPrestamo(prestamo)
                    $scope.cerrarDialogPagoPrestamo()
                    $scope.optenerListaPrestamos()
                    $scope.prestamo = {}
                    $scope.mostrarMensaje(datos.mensaje)
                })
            }

            $scope.abrirModalVerificarCuenta = function (dato, tipo) {
                if (!dato.prestamoPagos || dato.prestamoPagos.length == 0) {
                    $scope.dato = dato
                    $scope.tipoDatosPermiso = tipo
                    $scope.cuenta = {}
                    $scope.abrirPopup($scope.IdModalVerificarCuenta);
                } else {
                    $scope.mostrarMensaje("Los prestamos sólo pueden ser anulados antes del desembolso o pago de la primera cuota, utilizar la" +
                        " opción pagar si se devuelve el monto total del desembolso");

                }

            }
            $scope.cerrarModalVerificarCuenta = function () {
                $scope.cerrarPopup($scope.IdModalVerificarCuenta);
            }

            $scope.EditarMontoPrestamo = function (prestamo) {
                prestamo.montoEdit = false
                prestamo.total = ((prestamo.monto * prestamo.interes_pactado) / 100) + prestamo.monto
                var cuotaSinInteres = prestamo.monto / prestamo.plazo
                var interes = (cuotaSinInteres * prestamo.interes_pactado) / 100
                prestamo.cuota = cuotaSinInteres + interes
                if (prestamo.prestamoPagos.length > 0) {
                    prestamo.prestamoPagos.forEach(function (pago, index, array) {
                        pago.saldo_anterior = prestamo.total - pago.a_cuenta_anterior
                        if (index === (array.length - 1)) {
                            var promesa = EditarPrestamo(prestamo)
                            promesa.then(function (dato) {
                                $scope.mostrarMensaje(dato.mensaje)
                            })
                        }
                    });
                } else {
                    var promesa = EditarPrestamo(prestamo)
                    promesa.then(function (dato) {
                        $scope.mostrarMensaje(dato.mensaje)
                    })
                }
            }
            $scope.CancelarEditMontoPrestamo = function (prestamo) {
                $scope.optenerListaPrestamos()
            }
            $scope.eliminarRegistroAnticipo = function (anticipo) {
                anticipo.eliminado = true
                let promesa = ActualizarAnticipoEmpleado(anticipo.id_ficha, anticipo)
                promesa.then(function (res) {
                    SweetAlert.swal("Actualizado!", res.mensaje, "success");
                    $scope.buscarAnticiposOridnario($scope.filtroAnticipo)
                    if(anticipo.tipoAnticipo && anticipo.tipoAnticipo.nombre_corto === "EXTRAORDI") $scope.obtenerAnticiposExtra($scope.empleado)
                })
            }
            $scope.verificarCuentaAdmin = function (cuenta) {
                const promesa = VerificarUsuarioEmpresa($scope.usuario.id_empresa, cuenta)
                promesa.then(function (dato) {

                    if (dato.type) {
                        SweetAlert.swal({
                            title: 'Finalizado!',
                            text: dato.message,
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        })
                        /*  cuenta.abierto= cuenta.abierto; */

                        if ($scope.tipoDatosPermiso == "rolturnoNocturEmpleado") {
                            $scope.tituloModalRolTurnoNoche = "Noches Trabajadas"
                            $scope.abrirDialogRolTurnosNoche($scope.dato)
                        }
                        if ($scope.tipoDatosPermiso == "rolturnoDiaEmpleado") {
                            $scope.tituloModalRolTurnoNoche = "Días Trabajados"
                            $scope.abrirDialogRolTurnosNoche($scope.dato)
                        }
                        if ($scope.tipoDatosPermiso == "rolturnoDescansosEmpleado") {
                            $scope.tituloModalRolTurnoNoche = "Días Descansos"
                            $scope.abrirDialogRolTurnosNoche($scope.dato)
                        }
                        if ($scope.tipoDatosPermiso == "eliminarAnticipo") {
                            SweetAlert.swal({
                                title: "¿Esta seguro de eliminar el detalle?",
                                text: "",
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Si',
                                cancelButtonText: "No"
                            }).then(function (result) {
                                if (result.value) {
                                    $scope.eliminarRegistroAnticipo($scope.dato);
                                }
                            });
                        }
                        if ($scope.tipoDatosPermiso == "anticipo") {
                            if (!$scope.dato.montoEdit) {
                                $scope.dato.montoEdit = true
                            } else {
                                $scope.dato.montoEdit = false
                            }
                        }
                        if ($scope.tipoDatosPermiso == "datosLaborales") {
                            if (!$scope.dato.editDatosLaborales) {
                                $scope.dato.editDatosLaborales = true
                            } else {
                                $scope.dato.editDatosLaborales = false
                            }
                        }
                        if ($scope.tipoDatosPermiso == "finiquito") {
                            $scope.cuenta = {}
                            $scope.abrirDialogBeneficiosSociales2($scope.dato, true)
                        }
                        if ($scope.tipoDatosPermiso == "dotacion") {
                            $scope.cuenta = {}
                            $scope.abrirDialogEliminarRopaTrabajo()
                        }
                        if ($scope.tipoDatosPermiso == "rolturnoEmpleado") {
                            $scope.cuenta = {}
                            $scope.editarRoldeTurno($scope.dato)
                        }
                        if ($scope.tipoDatosPermiso == "cerrarRolturnoEmpleado") {
                            $scope.cuenta = {}
                            $scope.abrirDialogCerrarRolDeTurno()
                        }
                        if ($scope.tipoDatosPermiso == "prestamo-personal") {
                            $scope.cuenta = {}
                            $scope.abrirModalEliminarPrestamo()
                        }
                        $scope.cerrarModalVerificarCuenta();
                    } else {
                        SweetAlert.swal({
                            title: 'Finalizado!',
                            text: dato.message,
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        })
                    }
                })
            }

            $scope.obtenerListaEmpleados = function () {
                var promesa = ListaEmpleadosRrhh($scope.usuario.id_empresa)
                promesa.then(function (dato) {
                    dato.empleados.forEach(function (empleado, index, array) {
                        empleado.ficha = empleado.empleadosFichas[0]
                        if (index === (array.length - 1)) {
                            $scope.llenarEmpleados(dato.empleados)
                        }

                    });


                })
            }
            // $scope.obtenerListaEmpleados = function () {
            //     var promesa = ListaEmpleadosRrhh($scope.usuario.id_empresa)
            //     promesa.then(function (dato) {
            //         $scope.todosLosEmpleados = [];
            //         for (var i = 0; i < dato.empleados.length; i++) {
            //             if(dato.empleados[i].empleadosFichas.length>0){
            //                 var empleado = {
            //                     nombre: dato.empleados[i].persona.nombre_completo,
            //                     persona: dato.empleados[i].persona,
            //                     ficha: dato.empleados[i].empleadosFichas[0],
            //                     maker: "",
            //                     ticked: false,
            //                     id: dato.empleados[i].id
            //                 }
            //                 $scope.todosLosEmpleados.push(empleado);
            //             }

            //             if (i === (dato.empleados.length - 1)) {
            //                 $scope.seleccionarEmpleados($scope.empleadosSeleccionados)
            //             }
            //         }
            //     })
            // }

            $scope.llenarEmpleados = function (empleados) {
                $scope.todosLosEmpleados = [];
                for (var i = 0; i < empleados.length; i++) {
                    if (empleados[i].ficha) {
                        var empleado = {
                            nombre: empleados[i].persona.nombre_completo,
                            persona: empleados[i].persona,
                            ficha: empleados[i].ficha,
                            maker: "",
                            ticked: false,
                            id: empleados[i].id
                        }
                        $scope.todosLosEmpleados.push(empleado);
                    }

                    if (i === (empleados.length - 1)) {
                        $scope.seleccionarEmpleados($scope.empleadosSeleccionados)
                    }
                }
            }
            $scope.seleccionarEmpleados = function (empleados) {
                for (var i = 0; i < $scope.todosLosEmpleados.length; i++) {
                    for (var j = 0; j < empleados.length; j++) {
                        if (empleados[i].select) {
                            $scope.todosLosEmpleados[i].ticked = true;
                        }
                    }
                }
            }
            //fin prestamos

            //inicio rol turno
            $scope.GuardarRolTurno = function (rolTurno) {
                rolTurno.fecha_inicio = new Date($scope.convertirFecha(rolTurno.fecha_inicio))
                if (rolTurno.fecha_fin) rolTurno.fecha_fin = new Date($scope.convertirFecha(rolTurno.fecha_fin))
                rolTurno.id_ficha = $scope.empleado.id_ficha
                var promesa = CrearRolTurno($scope.empleado.id, rolTurno)
                promesa.then(function (datos) {
                    //$scope.imprimirPrestamo(prestamo)
                    rolTurno = {}
                    $scope.cerrarDialogRolTurnos()
                    $scope.mostrarMensaje(datos.mensaje)
                })
            }
            $scope.GuardarCierreRolTurno = function (rolTurno) {
                rolTurno.fecha_fin = new Date($scope.convertirFecha(rolTurno.fecha_fin))
                var promesa = CrearRolTurno($scope.empleado.id, rolTurno)
                promesa.then(function (datos) {
                    $scope.cerrarDialogCerrarRolDeTurno()
                    $scope.mostrarMensaje(datos.mensaje)
                })
            }
            $scope.calcularDatosRolTurno = function (rolTurno) {
                var bandera = true
                if ($scope.empleadosRolTurnoE.length > 0) {
                    var fechaInicio = ""
                    contFijos = 0
                    $scope.empleadosRolTurnoE.forEach(function (rol, index, array) {
                        if (rol.tipo == true) {
                            contFijos++
                            bandera = false
                            if (rol.fecha_fin) {
                                bandera = true
                                fechaInicio = $scope.fechaATexto(sumaFecha(1, $scope.convertirFecha(rol.fecha_fin)))
                            } else {
                                fechaInicio = $scope.fechaATexto(sumaFecha(rol.dias_trabajado, $scope.convertirFecha(rol.fecha_inicio)))
                            }
                        }
                        if (index === (array.length - 1)) {
                            if (bandera) {
                                if (rolTurno.tipo) {
                                    rolTurno.fecha_fin = ""
                                    rolTurno.dias_trabajado = 14;
                                    rolTurno.dias_descanso = 7;
                                } else {
                                    //rolTurno.fecha_fin = $scope.SumarDiasMesesAñosfecha(rolTurno.fecha_inicio, 22, "d", "/")
                                    rolTurno.dias_trabajado = 7;
                                    rolTurno.dias_descanso = 0;
                                }
                            } else {
                                if (contFijos > 1) {
                                    rolTurno.tipo = false
                                    $scope.mostrarMensaje("ya cuenta con dos roles de turno fijos, las asignaciones de fechas estan copadas!. Para asignar otro rol de turno fijo debe dar de baja 1")
                                } else {
                                    if (rolTurno.tipo) {
                                        if(!rolTurno.id) rolTurno.blokearDatos = true
                                        rolTurno.dias_trabajado = 7;
                                        rolTurno.dias_descanso = 14;
                                        /* rolTurno.tipo = false */
                                        if(!rolTurno.id)  $scope.mostrarMensaje("ya cuenta con un rol turno fijo,se genero otro con la configuracion fija!")
                                        if(!rolTurno.id) rolTurno.fecha_inicio = fechaInicio 
                                    }

                                }
                            }
                        }
                    });
                } else {
                    if (rolTurno.tipo) {
                        rolTurno.fecha_fin = ""
                        rolTurno.dias_trabajado = 14;
                        rolTurno.dias_descanso = 7;
                    } else {
                        //rolTurno.fecha_fin = $scope.SumarDiasMesesAñosfecha(rolTurno.fecha_inicio, 22, "d", "/")
                        rolTurno.dias_trabajado = 7;
                        rolTurno.dias_descanso = 0;
                    }
                }


            }
            $scope.editarRoldeTurno = function (datos) {
                datos.fecha_inicio = $scope.fechaATexto(datos.fecha_inicio)
                if (datos.fecha_fin) {
                    datos.fecha_fin = $scope.fechaATexto(datos.fecha_fin)
                }
                $scope.obtenerGruposRol();
                $scope.obtenerClasificacionRol();
                $scope.abrirPopup($scope.idModalRolTurnos);
                $scope.cerrarDialogHistorialTurnos()
                $scope.rolTurno =Object.assign(datos); 
            }
            $scope.obtenerlistaRolTurno = function (idficha) {
                blockUI.start()
                var promesa = ListaRolTurnos($scope.usuario.id_empresa, idficha)
                promesa.then(function (datos) {
                    $scope.empleadosRolTurnoE = datos.rolesTurno
                    var f = new Date(datos.fechaInicio)
                    f.setDate(1)
                    $scope.fechaInicioCalendario = $scope.fechaATexto(new Date(f))

                    blockUI.stop()
                })
            }
            $scope.obtenerlistaRolTurnoCal = function (filtro) {
                $scope.paginatorCalendarioRolTurnos = Paginator();
                $scope.paginatorCalendarioRolTurnos.column = "id";
                $scope.paginatorCalendarioRolTurnos.direccion = "asc";
                $scope.paginatorCalendarioRolTurnos.itemsPerPage = 50;
                $scope.paginatorCalendarioRolTurnos.callBack = $scope.listaRolTurnoCal;
                $scope.paginatorCalendarioRolTurnos.getSearch("", filtro, null);

            }
            $scope.cambiarFiltroCampo = function (filtroRolCal) {
                filtroRolCal.campo = filtroRolCal.campoData.id
            }
            $scope.customOrderRolTurno = function (items) {
                return items
            }
            $scope.listaRolTurnoCal = function () {
                // blockUI.start()
                SweetAlert.swal({
                    title: 'Obteniendo empleados...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    // html: '<strong></strong><div class="progress-bar"><div class="progress-percentage" style="display:flex width: 0%;"></div></div>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;

                var promesa = ListaRolTurnosCalendario($scope.paginatorCalendarioRolTurnos)
                promesa.then(function (datos) {
                    $scope.paginatorCalendarioRolTurnos.setPages(datos.paginas);
                    $scope.empleadosRolTurno = datos.rolesTurno
                    var f = new Date(datos.fechaInicio)
                    f.setDate(1)
                    f.setMonth(0)
                    $scope.fechaInicioCalendario = $scope.fechaATexto(new Date(f))

                    var fecha = new Date()
                    var ultimoDia = new Date(fecha.getFullYear(), 12, 0).getDate();
                    var fecha2 = "", grupo = "", nombre = "", fecha3 = "", campo = "";
                    if ($scope.filtroRolCal.inicio2) {
                        fecha2 = $scope.filtroRolCal.inicio2
                    }
                    if ($scope.filtroRolCal.fin2) {
                        fecha3 = $scope.filtroRolCal.fin2
                    }
                    if ($scope.filtroRolCal.grupo) {
                        grupo = $scope.filtroRolCal.grupo
                    }
                    if ($scope.filtroRolCal.nombre) {
                        nombre = $scope.filtroRolCal.nombre
                    }
                    if ($scope.filtroRolCal.campo) {
                        campo = $scope.filtroRolCal.campo
                    }
                    let filtroRolCal = { campo: campo, nombre: nombre, grupo: grupo, empresa: $scope.usuario.id_empresa, fin2: fecha3, inicio2: fecha2, inicio: $scope.fechaInicioCalendario, fin: ultimoDia + "/12/" + fecha.getFullYear() }

                    $scope.realizarCalendarioTrabajo(filtroRolCal)

                    // blockUI.stop()
                })
            }
            $scope.obtenerlistaRolTurnoEmpresa = function () {
                var promesa = ListaRolTurnosEmpresa($scope.paginatorRolTurnos)
                promesa.then(function (datos) {
                    $scope.paginatorRolTurnos.setPages(datos.paginas);
                    $scope.listaRolTurnoFiltro = datos.rolesTurno
                })
            }
            $scope.reportePersonalRolTurnos = function () {
                var doc = new PDFDocument({ size: [612, 792], compress: false, margin: 10 });
                var stream = doc.pipe(blobStream());
                var y = 135, totaldias = 0, itemsPorPagina = 25, items = 0, pagina = 1, totalPaginas = Math.ceil($scope.listaRolTurnoFiltro.length / itemsPorPagina);

                $scope.dibujarCabeceraPersonalRolTurnos(doc, pagina, totalPaginas);
                var index = 0;
                for (var i = 0; i < $scope.listaRolTurnoFiltro.length; i++) {
                    var rolTurno = $scope.listaRolTurnoFiltro[i]
                    doc.font("Helvetica", 8);
                    doc.text(i + 1, 40, y);
                    doc.text((rolTurno.tipo ? "FIJO" : "TEMPORAL "), 70, y - 5, { width: 80 });
                    doc.font("Helvetica", 6);
                    doc.text(rolTurno.alerta ? "(COMPENSACIONES)" : "(ROLES PROYECTADOS)", 70, y + 5, { width: 80 });
                    doc.font("Helvetica", 8);
                    doc.text(rolTurno.ficha.empleado.persona.nombre_completo, 170, y);
                    doc.text($scope.fechaATexto(new Date(rolTurno.fecha_inicio)), 340, y);
                    if (rolTurno.fecha_fin) doc.text($scope.fechaATexto(new Date(rolTurno.fecha_fin)), 400, y);
                    doc.text(rolTurno.campo.nombre, 460, y);
                    let diasTotal = 0
                    if (rolTurno.fecha_fin) {
                        diasTotal = $scope.diferenciaEntreDiasEnDias(new Date(rolTurno.fecha_inicio), new Date(rolTurno.fecha_fin))
                    }
                    doc.text(diasTotal, 550, y);
                    totaldias += diasTotal
                    y = y + 20;

                    items = items + 1;

                    if (items == itemsPorPagina) {
                        doc.addPage({ size: [612, 792], margin: 10 });
                        y = 135;
                        items = 0;
                        pagina = pagina + 1;
                        $scope.dibujarCabeceraPersonalRolTurnos(doc, pagina, totalPaginas);
                    }
                }
                doc.font("Helvetica-Bold", 8);
                doc.text("Total Días", 80, y);
                doc.text(totaldias, 550, y);
                doc.rect(35, y - 5, 540, 25).stroke();
                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
                blockUI.stop();
            }

            $scope.dibujarCabeceraPersonalRolTurnos = function (doc, pagina, totalPaginas) {

                doc.font("Helvetica-Bold", 17);
                doc.text("LISTA DE PERSONAL ROL DE TURNOS", 0, 35, { align: 'center' });
                doc.font("Helvetica", 10);
                if ($scope.filtroRolCal.inicio2 != 0 && $scope.filtroRolCal.fin2 != 0) {
                    doc.text("Desde: " + $scope.filtroRolCal.inicio2 + " Hasta: " + $scope.filtroRolCal.fin2, 0, 55, { align: 'center' });
                }

                doc.font("Helvetica-Bold", 8);
                doc.text("Nº", 40, 110);
                doc.text("Tipo", 80, 110);
                doc.text("Nombre", 200, 110);
                doc.text("Inicio", 350, 110);
                doc.text("Fin", 410, 110);
                doc.text("Campo", 470, 110)
                doc.text("Días", 550, 110)
                var currentDate = new Date()
                doc.text("USUARIO: " + $scope.usuario.persona.nombre_completo + " fecha " + currentDate.getDate() + "/" + (currentDate.getMonth() + 1) + "/" + currentDate.getFullYear() + "Hrs." + currentDate.getHours() + ":" + currentDate.getMinutes(), 15, 740);
                doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 0, 740, { align: "center" });
                doc.rect(35, 100, 540, 25).stroke();

            }

            $scope.reporteExcelPersonalRolTurnos = function () {
                blockUI.start();
                var data = [["N°", "TIPO", "EMPLEADO", "INICIO", "FIN", "CAMPO", "DÍAS", "AUSENCIAS", "ALERTA", "COMENTARIO"]];
                var index = 0;
                for (var i = 0; i < $scope.listaRolTurnoFiltro.length; i++) {
                    var rolTurno = $scope.listaRolTurnoFiltro[i]
                    var columns = [];
                    columns.push(i + 1);
                    columns.push(rolTurno.tipo ? "FIJO" : "TEMPORAL");
                    columns.push(rolTurno.ficha.empleado.persona.nombre_completo)
                    columns.push(rolTurno.fecha_inicio)
                    columns.push(rolTurno.fecha_fin)
                    columns.push(rolTurno.campo.nombre)
                    let diasTotal = 0
                    if (rolTurno.fecha_fin) {
                        diasTotal = $scope.diferenciaEntreDiasEnDias(new Date(rolTurno.fecha_inicio), new Date(rolTurno.fecha_fin))
                    }
                    columns.push(diasTotal)
                    let diasAusencia = 0
                    let fecha_fin = rolTurno.fecha_fin ? new Date(rolTurno.fecha_fin) : new Date()
                    var fechasRol = getDates(rolTurno.fecha_inicio, fecha_fin);
                    if (fechasRol.length > 0) {
                        if (rolTurno.ficha.ausencias.length > 0) {
                            for (const fecha of fechasRol) {
                                for (var j = 0; j < rolTurno.ficha.ausencias.length; j++) {
                                    var element1 = rolTurno.ficha.ausencias[j];
                                    var startDate = new Date(element1.fecha_inicio);
                                    var endDate = new Date(element1.fecha_fin);
                                    var fechasausencias = getDates(startDate, endDate);

                                    if (fechasausencias.length > 0) {
                                        var element2 = fechasausencias.find(function (x) {
                                            return x == fecha
                                        })

                                        if (element2) {
                                            diasAusencia++
                                        }

                                    }

                                }
                            }

                        }
                    }
                    columns.push(diasAusencia)
                    columns.push(rolTurno.alerta ? "SI" : "NO")
                    columns.push(rolTurno.comentario)
                    data.push(columns);

                }
                var ws_name = "SheetJS";
                var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-PERSONAL-ROL-TURNOS.xlsx");
                blockUI.stop();
            }
            $scope.agregarRolTurnoNoche = function (rolTurnoNoche) {
                if (rolTurnoNoche.editar) {
                    rolTurnoNoche.fecha_inicio = new Date($scope.convertirFecha(rolTurnoNoche.fecha_inicio))
                    rolTurnoNoche.fecha_fin = new Date($scope.convertirFecha(rolTurnoNoche.fecha_fin))
                    $scope.rolTurnoNoche = {
                        eliminado: false, fecha_inicio: "",
                        fecha_fin: "",
                        comentario: ""
                    }
                } else {
                    rolTurnoNoche.fecha_creacion = new Date()
                    rolTurnoNoche.fecha_inicio = new Date($scope.convertirFecha(rolTurnoNoche.fecha_inicio))
                    rolTurnoNoche.fecha_fin = new Date($scope.convertirFecha(rolTurnoNoche.fecha_fin))
                    $scope.rolesTurnosExtra.push(rolTurnoNoche)
                    $scope.rolTurnoNoche = {
                        eliminado: false, fecha_inicio: "",
                        fecha_fin: "",
                        comentario: ""
                    }
                }
            }
            $scope.editarRolTurnoNoche = function (rolTurnoNoche) {
                $scope.rolTurnoNoche = rolTurnoNoche
                $scope.rolTurnoNoche.editar = true
                $scope.rolTurnoNoche.fecha_inicio = $scope.fechaATexto($scope.rolTurnoNoche.fecha_inicio)
                $scope.rolTurnoNoche.fecha_fin = $scope.fechaATexto($scope.rolTurnoNoche.fecha_fin)

            }
            $scope.eliminarRolTurnoNoche = function (rolTurnoNoche, index) {
                if (rolTurnoNoche.id) {
                    rolTurnoNoche.eliminado = true
                } else {
                    $scope.rolesTurnosExtra.splice(index, 1)
                }
            }
            $scope.GuardarRolTurnoExtra = function () {
                var promise = GuardarRolesTurnosExtra($scope.rolesTurnosExtra, $scope.rolTurnoE.id, $scope.tipoRolTurnoExtra.id)
                promise.then(function (data) {
                    $scope.cerrarDialogRolTurnosNoche()
                    $scope.mostrarMensaje(data.mensaje)
                })
            }
            $scope.obtenerRolesTurnosExtra = function () {
                var promesa = ObtenerRolesTurnosExtra($scope.rolTurnoE.id, $scope.tipoRolTurnoExtra.id)
                promesa.then(function (data) {
                    $scope.rolesTurnosExtra = data.turnosExtra
                })
            }
            //fin rol turno

            //inicio horas extra
            $scope.guardarHorasExtra = function (horasExtra) {
                horasExtra.fecha = new Date($scope.convertirFecha(horasExtra.fecha))
                horasExtra.hora_inicio2 = $scope.fechaATiempo(horasExtra.hora_inicio)
                horasExtra.hora_fin2 = $scope.fechaATiempo(horasExtra.hora_fin)
                horasExtra.id_ficha = $scope.empleado.id_ficha
                var promesa = CrearHorasExtra($scope.empleado.id, horasExtra)
                promesa.then(function (datos) {
                    $scope.cerrarDialogHorasExtras()
                    $scope.horaExtra = {}
                    $scope.mostrarMensaje(datos.mensaje)
                })
            }
            $scope.calcularTiempoHorasExtra = function (horasExtra) {

                if (horasExtra.hora_inicio instanceof Date && horasExtra.hora_fin instanceof Date) {
                    var horaInicio = horasExtra.hora_inicio.getHours()
                    var horafin = horasExtra.hora_fin.getHours()
                    var minInicio = horasExtra.hora_inicio.getMinutes()
                    var minFin = horasExtra.hora_fin.getMinutes()
                    if (horaInicio < horafin) {
                        var fechaInicioTexto = moment(horasExtra.hora_inicio).format('YYYY-MM-DD HH:mm:ss');
                        var fechaFinTexto = moment(horasExtra.hora_fin).format('YYYY-MM-DD HH:mm:ss');
                        var fecha1 = moment(fechaInicioTexto, "YYYY-MM-DD HH:mm:ss");
                        var fecha2 = moment(fechaFinTexto, "YYYY-MM-DD HH:mm:ss");
                        var diff = fecha2.diff(fecha1, 's');
                        horasExtra.tiempo = $scope.caluclarDiferencia(diff)
                    } else if (horaInicio == horafin && minInicio < minFin) {
                        var fechaInicioTexto = moment(horasExtra.hora_inicio).format('YYYY-MM-DD HH:mm:ss');
                        var fechaFinTexto = moment(horasExtra.hora_fin).format('YYYY-MM-DD HH:mm:ss');
                        var fecha1 = moment(fechaInicioTexto, "YYYY-MM-DD HH:mm:ss");
                        var fecha2 = moment(fechaFinTexto, "YYYY-MM-DD HH:mm:ss");
                        var diff = fecha2.diff(fecha1, 's');
                        horasExtra.tiempo = $scope.caluclarDiferencia(diff)
                    } else {
                        horasExtra.tiempo = ""
                    }
                }
            }

            $scope.fechaATiempo = function (fecha) {
                var hours = fecha.getHours();
                var minutes = fecha.getMinutes();
                var seconds = fecha.getSeconds();
                hours = hours < 10 ? '0' + hours : hours;
                minutes = minutes < 10 ? '0' + minutes : minutes;
                //Anteponiendo un 0 a los segundos si son menos de 10
                seconds = seconds < 10 ? '0' + seconds : seconds;
                return hours + ":" + minutes + ":" + seconds;  // 2:41:30
            }
            $scope.caluclarDiferencia = function (time) {
                var hours = Math.floor(time / 3600);
                var minutes = Math.floor((time % 3600) / 60);
                var seconds = time % 60
                //Anteponiendo un 0 a los minutos si son menos de 10
                minutes = minutes < 10 ? '0' + minutes : minutes;
                //Anteponiendo un 0 a los segundos si son menos de 10
                seconds = seconds < 10 ? '0' + seconds : seconds;
                return hours + ":" + minutes + ":" + seconds;  // 2:41:30
            }

            $scope.obtenerHistorialHorasExtra = function (filtroHorasExtra) {
                var filtro = {}
                filtro.inicio = (filtroHorasExtra.inicio.length == 10) ? new Date($scope.convertirFecha(filtroHorasExtra.inicio)) : 0
                filtro.fin = (filtroHorasExtra.fin.length == 10) ? new Date($scope.convertirFecha(filtroHorasExtra.fin)) : 0
                var promesa = HistorialHorasExtra($scope.empleado.id_ficha, filtro)
                promesa.then(function (dato) {
                    $scope.ListaHorasExtraEmpleado = dato
                    if ($scope.ListaHorasExtraEmpleado.length > 0) {
                        $scope.sumarTotalHorasExtra()
                    } else {
                        $scope.SumaTotalHorasExtra = "00:00";
                    }

                })
            }

            $scope.sumarTotalHorasExtra = function () {
                var totalHoras = "";
                var timeHoras = 0;
                var timeMinutos = 0;
                for (var i = 0; i < $scope.ListaHorasExtraEmpleado.length; i++) {
                    var minutos = $scope.ListaHorasExtraEmpleado[i].tiempo.split(':')[1];
                    var horas = $scope.ListaHorasExtraEmpleado[i].tiempo.split(':')[0];

                    timeHoras = timeHoras + parseInt(horas);
                    timeMinutos = timeMinutos + parseInt(minutos);
                    if (timeMinutos >= 60) {
                        timeMinutos = timeMinutos - 60;
                        timeHoras = timeHoras + 1;
                    }
                    totalHoras = String("0" + timeHoras).slice(-3) + ':' + String("0" + timeMinutos).slice(-2);
                }
                $scope.SumaTotalHorasExtra = totalHoras;
            }
            //fin horas extra

            //inicio anticipos
            $scope.GuardarAnticipos = (anticipos) => {
                const anticipo = anticipos.slice(-1).pop()
                anticipo.montoExtraoridnario = anticipo.total - anticipo.anticipo_ordinaro
                anticipo.textoClase = "EXTRAORDI"
                anticipo.fecha = new Date().getTime()
                const promesa = NuevoAnticipoEmpleado($scope.empleado.id_ficha, anticipo)
                promesa.then(function (datos) {
                    anticipo = {}
                    $scope.cerrarDialogAnticipoExtraordinario()
                    $scope.mostrarMensaje(datos.mensaje)
                }).catch((err) => {
                    const msg = (err.stack !== undefined && err.stack !== null) ? err.stack : (err.message !== undefined && err.message !== null) ? err.message : 'Se perdió la conexión.'
                    $scope.mostrarMensaje(msg)
                })
            }
            $scope.GuardarAnticiposEmpleados = function (anticipos) {
                SweetAlert.swal({
                    title: 'Guardando anticipos empleados...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-floppy-o size-icon"></i>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()

                var datos = {}
                datos.anticipos = anticipos
                datos.textoClase = "ORDI"
                datos.fecha = new Date().getTime()
                datos.anticipos.forEach(function (anticipo, index, array) {
                    anticipo.montoordinario = anticipo.monto + anticipo.anticipo_ordinaro
                    if (index === (array.length - 1)) {
                        blockUI.noOpen = true;
                        var promesa = CrearNuevosAnticiposEmpleados(datos)
                        promesa.then(function (datos) {
                            anticipo = {}
                            $scope.listaAnticipos2 = []
                            $scope.cerrarDialogAnticipoRegular()
                            SweetAlert.swal({
                                title: 'Finalizado!',
                                text: datos.mensaje,
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            })
                        })
                    }
                });

            }
            $scope.buscarAnticiposExtraoridnario = function (datosFiltro) {
                if (datosFiltro.fecha_final === "" || datosFiltro.fecha_final === null || datosFiltro.fecha_final === undefined) {
                    datosFiltro.fecha_final = new Date()
                    if (datosFiltro.fecha_inicial == "" || datosFiltro.fecha_inicial === null || datosFiltro.fecha_inicial === undefined) {
                        datosFiltro.fecha_inicial = new Date(datosFiltro.fecha_final.getFullYear(), datosFiltro.fecha_final.getMonth() - 1, datosFiltro.fecha_final.getDate())
                    } else {
                        datosFiltro.fecha_inicial = new Date(datosFiltro.fecha_inicial.split('/').reverse())
                    }
                } else {
                    datosFiltro.fecha_final = new Date(datosFiltro.fecha_final.split('/').reverse())
                    if (datosFiltro.fecha_inicial == "" || datosFiltro.fecha_inicial === null || datosFiltro.fecha_inicial === undefined) {
                        datosFiltro.fecha_inicial = new Date(datosFiltro.fecha_final.getFullYear(), datosFiltro.fecha_final.getMonth() - 1, datosFiltro.fecha_final.getDate())
                    } else {
                        datosFiltro.fecha_inicial = new Date(datosFiltro.fecha_inicial.split('/').reverse())
                    }
                }
                $scope.anticipo_extraordinaro = 0;
                var filtro = { inicio: datosFiltro.fecha_inicial, fin: datosFiltro.fecha_final, nombre: "EXTRAORDI", id_empresa: $scope.usuario.id_empresa }
                $scope.obtenerListaAnticipos(filtro, $scope.empleado.id_ficha)
                datosFiltro.fecha_final = $scope.formatoFechaPDF(datosFiltro.fecha_final)
                datosFiltro.fecha_inicial = $scope.formatoFechaPDF(datosFiltro.fecha_inicial)

                // if (datosFiltro.mes) {
                //     $scope.anticipo_extraordinaro = 0;
                //     var date = new Date(datosFiltro.gestion, datosFiltro.mes.id, 1);
                //     var primerDia = new Date(date.getFullYear(), date.getMonth(), 1);
                //     var ultimoDia = new Date(date.getFullYear(), date.getMonth() + 1, 0);
                //     var filtro = { inicio: primerDia, fin: ultimoDia, nombre: "ORDI", id_empresa: 0 }
                //     $scope.obtenerListaAnticipos(filtro, $scope.empleado.id)
                // }
            }
            $scope.buscarAnticiposOridnario = function (datosFiltro) {
                if (datosFiltro.gestion != undefined) {
                    $scope.anticipo_extraordinaro = 0;
                    var date = new Date(datosFiltro.gestion, datosFiltro.mes.id, 1);
                    var primerDia = new Date(date.getFullYear(), date.getMonth(), 1);
                    var ultimoDia = new Date(date.getFullYear(), date.getMonth() + 1, 0);
                    var filtro = { inicio: primerDia, fin: ultimoDia, nombre: "EXTRAORDI", id_empresa: $scope.usuario.id_empresa }
                    $scope.obtenerListaAnticiposOrdi(filtro, 0)
                }
            }
            $scope.obtenerListaAnticipos = function (filtro, idficha) {
                $scope.anticipo_ordinaroOextra = 0
                var promesa = ListaAnticiposEmpleado(filtro, idficha)
                $scope.arregloid = []
                $scope.anticipos = { data: [], totalOrdinario: 0, totalExtraOrdinario: 0 }
                promesa.then(function (datos) {
                    let salario_base_antiguedad = datos.parametros.salario_base_antiguedad
                    let de0a1 = datos.parametros.antiguedad_cero_uno
                    let de2a4 = datos.parametros.antiguedad_dos_cuatro
                    let de5a7 = datos.parametros.antiguedad_cinco_siete
                    let de8a10 = datos.parametros.antiguedad_ocho_diez
                    let de11a14 = datos.parametros.antiguedad_once_catorce
                    let de15a19 = datos.parametros.antiguedad_quice_diecinueve
                    let de20a24 = datos.parametros.antiguedad_veinte_veinticuatro
                    let de25ainfinito = datos.parametros.antiguedad_mas_veinticinco
                    let bonoAntiguedad = 0;
                    if (datos.anticipos.length > 0) {
                        for (let i = 0; i < datos.anticipos.length; i++) {
                            if (datos.anticipos[i].tipoAnticipo.nombre_corto != filtro.nombre) {
                                $scope.anticipos.totalOrdinario += datos.anticipos[i].monto
                                datos.anticipos[i].es_ordinario = true
                                $scope.anticipos.data.push(datos.anticipos[i])
                            } else {
                                $scope.anticipos.totalExtraOrdinario += datos.anticipos[i].monto
                                datos.anticipos[i].es_ordinario = false
                                $scope.anticipos.data.push(datos.anticipos[i])
                            }
                        }
                        for (let i = 0; i < $scope.anticipos.data.length; i++) {
                            let ficha = $scope.anticipos.ficha
                            let antiguedad = calculateAge(ficha.fecha_inicio);
                            if (!ficha.tipoPersonal) {
                                return $scope.mensaje('No se puede calcular. Faltan datos del empleado : Tipo de personal : "Oficina" / "Campo"')
                            }
                            if (antiguedad >= 0 && antiguedad <= 1) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de0a1) / 100)
                            } else if (antiguedad >= 2 && antiguedad <= 4) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de2a4) / 100)
                            } else if (antiguedad >= 5 && antiguedad <= 7) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de5a7) / 100)
                            } else if (antiguedad >= 8 && antiguedad <= 10) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de8a10) / 100)
                            } else if (antiguedad >= 11 && antiguedad <= 14) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de11a14) / 100)
                            } else if (antiguedad >= 15 && antiguedad <= 19) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de15a19) / 100)
                            } else if (antiguedad >= 20 && antiguedad <= 24) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de20a24) / 100)
                            } else if (antiguedad > 25 && antiguedad < 100) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de25ainfinito) / 100)
                            }
                            if (!ficha.tipoPersonal) {
                                return $scope.mensaje('No se puede calcular. Faltan datos del empleado : Tipo de personal : "Oficina" / "Campo"')
                            }
                            if (ficha.tipoPersonal.nombre.toLowerCase() == "campo") {
                                $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico * 2 + bonoAntiguedad;
                                $scope.anticipos.data[i].promedioPorAnticipo = ficha.haber_basico * 2 + bonoAntiguedad;
                            } else {
                                //Oficina = SB + ((SB/120)*HE parámetro)+ BA
                                if (ficha.horas_extra && ficha.horasExtraOrdiniarias.length > 0) {
                                    let he = ficha.horasExtraOrdiniarias.filter((hora) => (new Date(hora.fecha) < new Date() && new Date(hora.fecha) > (new Date().setMonth(new Date().getMonth() - 1))))
                                    if (he.length > 0) {
                                        $scope.anticipos.data[i].promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                        $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                    } else {
                                        $scope.anticipos.data[i].promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                        $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                    }
                                } else {
                                    $scope.anticipos.data[i].promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                    $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                }
                            }
                            $scope.anticipos.data[i]._30porciento = ($scope.anticipos.data[i].promedioPorAnticipo * 0.30)
                            $scope.anticipos._30porcientoAnterior = ($scope.anticipos.promedioPorAnticipoAnterior * 0.30)
                        }
                    } else {
                        let ficha = datos.empleado.empleadosFichas[(datos.empleado.empleadosFichas.length - 1)]
                        let antiguedad = calculateAge(ficha.fecha_inicio);

                        if (antiguedad >= 0 && antiguedad <= 1) {
                            bonoAntiguedad = ((salario_base_antiguedad * 3 * de0a1) / 100)
                        } else if (antiguedad >= 2 && antiguedad <= 4) {
                            bonoAntiguedad = ((salario_base_antiguedad * 3 * de2a4) / 100)
                        } else if (antiguedad >= 5 && antiguedad <= 7) {
                            bonoAntiguedad = ((salario_base_antiguedad * 3 * de5a7) / 100)
                        } else if (antiguedad >= 8 && antiguedad <= 10) {
                            bonoAntiguedad = ((salario_base_antiguedad * 3 * de8a10) / 100)
                        } else if (antiguedad >= 11 && antiguedad <= 14) {
                            bonoAntiguedad = ((salario_base_antiguedad * 3 * de11a14) / 100)
                        } else if (antiguedad >= 15 && antiguedad <= 19) {
                            bonoAntiguedad = ((salario_base_antiguedad * 3 * de15a19) / 100)
                        } else if (antiguedad >= 20 && antiguedad <= 24) {
                            bonoAntiguedad = ((salario_base_antiguedad * 3 * de20a24) / 100)
                        } else if (antiguedad >= 25 && antiguedad < 100) {
                            bonoAntiguedad = ((salario_base_antiguedad * 3 * de25ainfinito) / 100)
                        }
                        if (!ficha.tipoPersonal) {
                            return $scope.mostrarMensaje('No se puede calcular. Faltan datos del empleado : Tipo de personal : "Oficina" / "Campo"')
                        }
                        if (ficha.tipoPersonal.nombre.toLowerCase() == "campo") {
                            $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico * 2 + bonoAntiguedad;
                            $scope.anticipos.promedioPorAnticipo = ficha.haber_basico * 2 + bonoAntiguedad;
                        } else {
                            //Oficina = SB + ((SB/120)*HE parámetro)+ BA
                            if (ficha.horas_extra && ficha.horasExtraOrdiniarias.length > 0) {
                                let he = ficha.horasExtraOrdiniarias.filter((hora) => (new Date(hora.fecha) < new Date() && new Date(hora.fecha) > (new Date().setMonth(new Date().getMonth() - 1))))
                                if (he.length > 0) {
                                    $scope.anticipos.promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                    $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                } else {
                                    $scope.anticipos.promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                    $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                }
                            } else {
                                $scope.anticipos.promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                            }
                        }
                        $scope.anticipos._30porciento = ($scope.anticipos.promedioPorAnticipo * 0.30)
                        $scope.anticipos._30porcientoAnterior = ($scope.anticipos.promedioPorAnticipoAnterior * 0.30)
                        // if (ficha.tipoPersonal.nombre.toLowerCase() == "campo") {
                        //     $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico * 2 + bonoAntiguedad;
                        // } else {
                        //     if (ficha.horas_extra && ficha.horasExtraOrdiniarias.length > 0) {
                        //         let he = ficha.horasExtraOrdiniarias.filter((hora) => (new Date(hora.fecha) < new Date() && new Date(hora.fecha) > (new Date().setMonth(new Date().getMonth() - 1))))
                        //         if (he.length > 0) {
                        //             $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico * ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                        //         } else {
                        //             $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico * ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                        //         }
                        //     } else {
                        //         $scope.anticipos.promedioPorAnticipoAnterior = ficha.haber_basico * ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                        //     }
                        // }
                        // $scope.anticipos._30porcientoAnterior = ($scope.anticipos.promedioPorAnticipoAnterior * 30) / 100
                    }
                })
            }
            $scope.obtenerMesAnticipo = function (mes, year) {
                switch (mes) {
                    case -1:
                        return { mes: 11, year: year - 1 }


                    default:
                        return { mes: mes, year: year }
                }
            }
            $scope.obtenerListaAnticiposOrdi = async function (filtro, idFicha) {
                $scope.anticipo_ordinaroOextra = 0
                $scope.totalesAnticipos = { totalOrdinaros: 0, totalExtraordinarios: 0, totalGeneral: 0 }
                $scope.listaAnticipos = []
                var datos = await ListaAnticiposEmpleado(filtro, idFicha)
                $scope.arregloid = []
                if (datos.anticipos.length > 0) {
                    datos.anticipos.ordinarios = []
                    datos.anticipos.extraordinarios = []
                    datos.anticipos.forEach(async function (anticipo, index, array) {
                        anticipo.ficha = anticipo.ficha
                        //23/03/2021 anticipo.empleado.ficha = anticipo.empleado.ficha ? anticipo.empleado.ficha : anticipo.empleado.empleadosFichas[(anticipo.empleado.empleadosFichas.length - 1)]
                        anticipo.total2 = 0
                        anticipo.anticipo_extraordinaro = 0
                        anticipo.saldo_salario = anticipo.salario_basico - anticipo.total;


                        if (anticipo.tipoAnticipo.nombre_corto != filtro.nombre) {
                            // $scope.totalesAnticipos.totalOrdinaros += anticipo.total || 0;
                            //  $scope.totalesAnticipos.totalGeneral += anticipo.total || 0;
                            datos.anticipos.ordinarios.push(anticipo)

                        } else {
                            // $scope.totalesAnticipos.totalExtraordinarios += anticipo.total || 0;
                            //  $scope.totalesAnticipos.totalGeneral += anticipo.total || 0;
                            datos.anticipos.extraordinarios.push(anticipo)
                        }
                        $scope.sumarTotalesAnticipo(anticipo)
                        if (index === (array.length - 1)) {/* 
                            if ($scope.anticiposDatos == undefined) { */
                            $scope.anticiposDatos = { ordinarios: datos.anticipos.ordinarios, extraordinarios: datos.anticipos.extraordinarios }
                            /* } */
                            for (var i = 0; i < datos.anticipos.ordinarios.length; i++) {
                                var ordi = datos.anticipos.ordinarios[i];
                                var ordiFichas = datos.anticipos.ordinarios.filter(ordiF => ordiF.ficha.id == ordi.id_ficha)
                                if (ordi.id == ordiFichas[0].id) {
                                    for (var j = 0; j < datos.anticipos.extraordinarios.length; j++) {
                                        var anticipo = datos.anticipos.extraordinarios[j];
                                        if (anticipo.id_ficha == ordi.id_ficha) {
                                            // if (!ordiFichas[0].anticipo_extraordinaro) {
                                            //     if (ordi.anticipo_extraordinaro) {
                                            //         ordi.anticipo_extraordinaro += anticipo.monto
                                            //     } else {
                                            //         ordi.anticipo_extraordinaro = anticipo.monto
                                            //     }
                                            // }

                                            if (ordiFichas[0].anticipo_extraordinaro) {
                                                ordiFichas[0].anticipo_extraordinaro += anticipo.monto
                                            } else {
                                                ordiFichas[0].anticipo_extraordinaro = anticipo.monto
                                            }
                                            // if (ordi.anticipo_extraordinaro) {
                                            //     ordi.anticipo_extraordinaro += anticipo.monto
                                            // } else {
                                            //     ordi.anticipo_extraordinaro = anticipo.monto
                                            // }

                                            /*   ordi.total += ordi.anticipo_extraordinaro */

                                            ordi.saldo_salario = ordi.salario_basico - ordi.total
                                            ordi.montoEdit = false
                                        } else {
                                            if (ordi.anticipo_ordinaro) {
                                                ordi.anticipo_ordinaro += anticipo.monto
                                            } else {
                                                ordi.anticipo_ordinaro = anticipo.monto
                                            }
                                            //ordi.anticipo_extraordinaro = 0

                                            ordi.saldo_salario = ordi.salario_basico - ordi.total
                                        }

                                    }
                                }


                                if (i === (datos.anticipos.ordinarios.length - 1)) {
                                    $scope.listaAnticipos = datos.anticipos.ordinarios;
                                    for (const iterator of $scope.listaAnticipos) {
                                        $scope.totalesAnticipos.totalOrdinaros += iterator.monto
                                        $scope.totalesAnticipos.totalExtraordinarios += iterator.anticipo_extraordinaro
                                        $scope.totalesAnticipos.totalGeneral += iterator.monto+iterator.anticipo_extraordinaro
                                    }
                                  }

                            }

                        }
                    })
                } else {
                    $scope.listaAnticipos = []
                }

                $scope.$evalAsync()
            }
            $scope.parseDate = function (input) {
                var parts = input.split('/');
                return new Date(parts[2], parts[1] - 1, parts[0]);
            }
            $scope.calcularTotalGeneralAnticipos = async function (empleado, year, month) {
                //   let date = new Date(y,m,1)

                let datosMes = {}
                let meses = {
                    0: "1-ENERO",
                    1: "2-FEBRERO",
                    2: "3-MARZO",
                    3: "4-ABRIL",
                    4: "5-MAYO",
                    5: "6-JUNIO",
                    6: "7-JULIO",
                    7: "8-AGOSTO",
                    8: "9-SEPTIEMBRE",
                    9: "10-OCTUBRE",
                    10: "11-NOVIEMBRE",
                    11: "12-DICIEMBRE",
                }
                let planilla = {
                    mes: meses[month],
                    gestion: year,
                }
                let dato = await RecursosHumanosEmpleadosHorasExtras(empleado.id_ficha, year, month, empleado.id);
                datosMes.sueldoBasico = empleado.ficha.haber_basico;
                $scope.diasRolTurnos = 0;
                $scope.nochesRolTurnos = 0;
                if (dato.rolesTurno.length > 0) {
                    $scope.empleadosRolTurno = dato.rolesTurno;
                    let fechaHoy = new Date()
                    let ultimoDiaMes = new Date(fechaHoy.getFullYear(), 12, 0).getDate();
                    let mesfiltro = new Date(planilla.gestion, parseInt(planilla.mes.split("-")[0]), 0);
                    let primerDia = new Date(planilla.gestion, parseInt(planilla.mes.split("-")[0]) - 1, 1, 0, 0, 0);
                    // console.log("primerDia =======", primerDia);
                    let ultimoDia = new Date(planilla.gestion, parseInt(planilla.mes.split("-")[0]) - 1, mesfiltro.getDate(), 23, 59, 59);

                    $scope.filtroRolCal = { fin: ultimoDiaMes + "/12/" + fechaHoy.getFullYear(), fin2: $scope.fechaString(ultimoDia), inicio: "01/01/2015", inicio2: $scope.fechaString(primerDia) }

                    await $scope.realizarCalendarioTrabajo($scope.filtroRolCal);
                    let df = $scope.parseDate($scope.filtroRolCal.inicio2); //desde
                    let dt = $scope.parseDate($scope.filtroRolCal.fin2); // hasta
                    let result = [];
                    let countTD = 0;
                    let countNT = 0;

                    for (let index = 0; index < $scope.empleadosRolTurno.length; index++) {
                        let rolesT = $scope.empleadosRolTurno[index];
                        for (let i = 0; i < rolesT.diasAnio.length; i++) {
                            let tf = $scope.parseDate(rolesT.diasAnio[i].fecha),
                                tt = $scope.parseDate(rolesT.diasAnio[i].fecha);
                            if (tf >= df && tt <= dt) {
                                if (rolesT.diasAnio[i].texto == "T") {
                                    countTD = countTD + 1;
                                } else if (rolesT.diasAnio[i].texto == "NT") {
                                    countNT = countNT + 1;
                                }
                                result.push(rolesT.diasAnio[i]);
                            }
                        }

                    }

                    $scope.nochesRolTurnos = countNT;
                    $scope.diasRolTurnos = countTD;
                }

                let mes = new Date(planilla.gestion, parseInt(planilla.mes), 0);
                let ultimoDiaT = new Date(planilla.gestion, parseInt(planilla.mes) - 1, mes.getDate() > 30 ? mes.getDate() - 1 : mes.getDate(), 23, 59, 59);

                // let diasTrabajo = ultimoDia - new Date(empleado.fecha_inicio);
                let empled = new Date(empleado.fecha_inicio);
                // let timeDiff = Math.abs(mes.getTime() - empled.getTime());
                let timeDiff = Math.abs(ultimoDiaT.getTime() - empled.getTime());
                if (empleado.fecha_expiracion) {
                    let fecha_expiracionE = new Date(empleado.fecha_expiracion);
                    fecha_expiracionE.setHours(23, 59, 59, 0, 0);
                    let primerDiafl = new Date(planilla.gestion, parseInt(planilla.mes.split("-")[0]) - 1, 1, 0, 0, 0);
                    timeDiff = Math.abs(fecha_expiracionE.getTime() - primerDiafl.getTime());
                }

                let diasTrabajo = Math.ceil(timeDiff / (1000 * 3600 * 24));

                if (diasTrabajo >= 30) {
                    diasTrabajo = 30;
                }

                datosMes.dt = diasTrabajo ? diasTrabajo : 0;
                datosMes.ganado = round(datosMes.sueldoBasico / 30 * datosMes.dt, 2);
                $scope.horasExtras = 8; // == sacar horas extras ==================

                let ultimoDiaMesBono = new Date(planilla.gestion, parseInt(planilla.mes) - 1, mes.getDate(), 23, 59, 59);
                $scope.antiguedad = calcAge(empleado.fecha_inicio, ultimoDiaMesBono); // == sacar años de antiguedad ==================

                $scope.bonoFrontera = 0; // == sacar bono frontera ==================
                $scope.otrosBonos = 0; // == sacar otros bonos ==================
                // === calculo de horas extras =======
                datosMes.horasExtrasRol = 6;
                datosMes.diasRolTurnos = $scope.diasRolTurnos;
                $scope.extrasDT = datosMes.diasRolTurnos * datosMes.horasExtrasRol;

                datosMes.horasExtrasR = dato.totalHoras + dato.totalHorasOrdinario; 
                datosMes.horasExtras = datosMes.horasExtrasR + $scope.extrasDT;
                datosMes.totalHorasExtras = round((datosMes.sueldoBasico / 30 / 8 * datosMes.horasExtras) * 2, 2);
                datosMes.recargoNocturno = round((datosMes.sueldoBasico / 30 * $scope.nochesRolTurnos) * 35 / 100, 2);
                datosMes.bonoAntiguedad = $scope.calcularBonoAntiguedad($scope.antiguedad);
                datosMes.bonoFrontera = $scope.bonoFrontera;
                datosMes.otrosBonos = $scope.otrosBonos;
                datosMes.totalGanado = round(datosMes.ganado + datosMes.totalHorasExtras + datosMes.recargoNocturno + datosMes.bonoAntiguedad + datosMes.bonoFrontera + datosMes.otrosBonos, 2);

                if (empleado.jubilacion == null || !empleado.jubilacion) {
                    let fechaActual = new Date();
                    let fechaNacimiento = new Date(empleado.fecha_nacimiento)
                    let datofedad = $scope.diferenciaEntreDiasEnDias(fechaNacimiento, fechaActual)
                    let edad_empleado = Math.trunc(datofedad / 365);

                    if (edad_empleado >= 65) {
                        datosMes.afp = round(datosMes.totalGanado * 11 / 100, 2);
                    } else {
                        datosMes.afp = round(datosMes.totalGanado * 12.71 / 100, 2);
                    }

                } else {
                    datosMes.afp = round(datosMes.totalGanado * $scope.parametros.solo_jubilados / 100, 2);
                }
                if (datosMes.rc_iva_mes == null) {
                    datosMes.rc_iva_mes = 0;
                }
                datosMes.rc_iva = datosMes.rc_iva_mes; // sacar de planilla rc-iva
                // ==== falta rescatar planilla anticipos =================================================0
                datosMes.anticipos = round(dato.totalAnticipo, 2); // sacar de planilla anticipos 
                // =========================================================================================
                datosMes.prestamos = round(dato.totalCuotas, 2); // sacar de recursos humanos 
                datosMes.totalDescuento = round(datosMes.afp + datosMes.rc_iva + datosMes.anticipos + datosMes.prestamos, 2);
                datosMes.liquidoPagable = round(datosMes.totalGanado - datosMes.totalDescuento, 2);
                return datosMes
            }

            function HMToDecimal(hora, minuto) {
                var d1 = hora;
                var m1 = minuto;
                var d = eval(d1);
                var m = eval(m1);

                var dH = Math.abs(d) + (m / 60);
                console.log('en decimal es ', round(dH, 2));
                return round(dH, 2);

            }

            // funcion para calcular los años de antiguedad 
            function calcAge(dateString, fechaFin) {
                var birthday = +new Date(dateString);
                return ~~((new Date(fechaFin) - birthday) / (31557600000));
            }

            // para redondeo de numeros
            function round(value, decimals) {
                return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
            }
            $scope.obtenerParametros = async function (idEmpresa) {
                if (idEmpresa == null) {
                    idEmpresa = 0;
                }
                parametros = await Parametros(idEmpresa);
                return parametros;
            }
            $scope.calcularBonoAntiguedad = function (antiguedad) {
                if (antiguedad >= 0 && antiguedad <= 1) {
                    // "es de 0 a 2"
                    return 3 * $scope.parametros.salario_base_antiguedad * $scope.parametros.antiguedad_cero_uno / 100;
                }
                if (antiguedad >= 2 && antiguedad <= 4) {
                    // "es de 2 a 5"
                    return 3 * $scope.parametros.salario_base_antiguedad * $scope.parametros.antiguedad_dos_cuatro / 100;
                }
                if (antiguedad >= 5 && antiguedad <= 7) {
                    // "es de 5 a 8"
                    return 3 * $scope.parametros.salario_base_antiguedad * $scope.parametros.antiguedad_cinco_siete / 100;
                }
                if (antiguedad >= 8 && antiguedad <= 10) {
                    // "es de 8 a 11"
                    return 3 * $scope.parametros.salario_base_antiguedad * $scope.parametros.antiguedad_ocho_diez / 100;
                }
                if (antiguedad >= 11 && antiguedad <= 14) {
                    // "es de 11 a 15"
                    return 3 * $scope.parametros.salario_base_antiguedad * $scope.parametros.antiguedad_once_catorce / 100;
                }
                if (antiguedad >= 15 && antiguedad <= 19) {
                    // "es de 15 a 20"
                    return 3 * $scope.parametros.salario_base_antiguedad * $scope.parametros.antiguedad_quice_diecinueve / 100;
                }
                if (antiguedad >= 20 && antiguedad <= 24) {
                    // "es de 20 a 25"
                    return 3 * $scope.parametros.salario_base_antiguedad * $scope.parametros.antiguedad_veinte_veinticuatro / 100;
                }
                if (antiguedad >= 25) {
                    // "es de mayor a 25"
                    return 3 * $scope.parametros.salario_base_antiguedad * $scope.parametros.antiguedad_mas_veinticinco / 100;
                }
            }

            $scope.sumarTotalesAnticipo = function (anticipo) {
                let totalSueldoBasico = 0;
                let totalGanadoSueldo = 0;
                let sumaHorasExtras = 0;
                let sumaTotalHorasExtras = 0;
                let sumaRecargoNocturno = 0;
                let sumaBonoAntiguedad = 0;
                let sumaBonoFrontera = 0;
                let sumaOtrosBonos = 0;
                let sumaTotalGanado = 0;
                let sumaAFP = 0;
                let sumaRCIVA = 0;
                let sumaAniticipos = 0;
                let sumaPrestamos = 0;
                let sumaTotalDescuento = 0;
                let sumaLiquidoPagable = 0;
                anticipo.totalGanadoSueldo = round(totalGanadoSueldo + anticipo.ficha.empleado.ganado, 2);
                anticipo.totalSueldoBasico = round(totalSueldoBasico + anticipo.ficha.empleado.sueldoBasico, 2);
                anticipo.sumaHorasExtras = sumaHorasExtras + anticipo.ficha.empleado.horasExtras;
                anticipo.sumaTotalHorasExtras = round(sumaTotalHorasExtras + anticipo.ficha.empleado.totalHorasExtras, 2);
                anticipo.sumaRecargoNocturno = round(sumaRecargoNocturno + anticipo.ficha.empleado.recargoNocturno, 2);
                anticipo.sumaBonoAntiguedad = round(sumaBonoAntiguedad + anticipo.ficha.empleado.bonoAntiguedad, 2);
                anticipo.sumaBonoFrontera = round(sumaBonoFrontera + anticipo.ficha.empleado.bonoFrontera, 2);
                anticipo.sumaOtrosBonos = round(sumaOtrosBonos + anticipo.ficha.empleado.otrosBonos, 2);
                anticipo.sumaTotalGanado = round(sumaTotalGanado + anticipo.ficha.empleado.totalGanado, 2);
                anticipo.sumaAFP = round(sumaAFP + anticipo.ficha.empleado.afp, 2);
                anticipo.sumaRCIVA = round(sumaRCIVA + anticipo.ficha.empleado.rc_iva, 2);
                anticipo.sumaAniticipos = round(sumaAniticipos + anticipo.ficha.empleado.anticipos, 2);
                anticipo.sumaPrestamos = round(sumaPrestamos + anticipo.ficha.empleado.prestamos, 2);
                anticipo.sumaTotalDescuento = round(sumaTotalDescuento + anticipo.ficha.empleado.totalDescuento, 2);
                anticipo.sumaLiquidoPagable = round(sumaLiquidoPagable + anticipo.ficha.empleado.liquidoPagable, 2);
                return anticipo
            }

            $scope.EliminarAnticipo = function (index) {
                $scope.listaAnticipos2.splice(index, 1)
            }
            $scope.fechaString = function (fechaget) {
                var dd = fechaget.getDate();
                var mm = fechaget.getMonth() + 1;
                var yyyy = fechaget.getFullYear();
                if (dd < 10) {
                    dd = '0' + dd;
                }

                if (mm < 10) {
                    mm = '0' + mm;
                }

                var today = dd + '/' + mm + '/' + yyyy;
                return today
            }
            $scope.filtrarPlanillaSueldo = async function (idFicha, year, month) {
                let meses = {
                    0: "1-ENERO",
                    1: "2-FEBRERO",
                    2: "3-MARZO",
                    3: "4-ABRIL",
                    4: "5-MAYO",
                    5: "6-JUNIO",
                    6: "7-JULIO",
                    7: "8-AGOSTO",
                    8: "9-SEPTIEMBRE",
                    9: "10-OCTUBRE",
                    10: "11-NOVIEMBRE",
                    11: "12-DICIEMBRE",
                }
                let planilla = {
                    mes: meses[month],
                    gestion: year,
                }
                var dato = await RRHHPlanillaSueldo(idFicha, planilla.gestion, planilla.mes);

                return dato.planilla;
            }

            function getPercentageChange(oldNumber, newNumber) {
                var decreaseValue = oldNumber - newNumber;
                var porcentage = 100 - (decreaseValue / oldNumber) * 100;
                return porcentage.toFixed();
            }

            function esperandoCalculo() {
                return new Promise(resolve => setTimeout(resolve, 5));
            }

            async function realizarCalculos(empleado, datos, monto, porcentaje, tope, countE) {
                await esperandoCalculo();
                SweetAlert.getContent().querySelector('strong').textContent = Number(countE) + "%";
                SweetAlert.getContent().querySelector('.swal2-timer-progress-bar').style.width = Number(countE) * 5.2;
                blockUI.noOpen = true;

                if (datos.tipo) {
                    monto = (empleado.ficha.haber_basico * datos.monto) / 100;
                    porcentaje = datos.monto
                }
                if ($scope.listaAnticipos2.length == 0) {
                    var anticipo = { fecha: new Date(), empleado: empleado, monto: monto, anticipo_extraordinaro: null, total: null, salario_basico: empleado.ficha.haber_basico, saldo_salario: empleado.haber_basico, tope: tope, tipo_porcentual: datos.tipo, porcentaje: porcentaje }

                } else {

                    var anticipo = { fecha: new Date(), empleado: empleado, monto: monto, anticipo_extraordinaro: null, total: null, salario_basico: empleado.ficha.haber_basico, saldo_salario: null, tope: tope, tipo_porcentual: datos.tipo, porcentaje: porcentaje }
                    anticipo.saldo_salario = anticipo.salario_basico - anticipo.total
                }
                //$scope.parametros = await $scope.obtenerParametros($scope.usuario.id_empresa)

                anticipo.empleado.id_ficha = anticipo.empleado.ficha.id
                anticipo.empleado.fecha_inicio = anticipo.empleado.ficha.fecha_inicio
                anticipo.empleado.ganadoPorMes = []

                var dato = await RRHHPlanillaSueldo(anticipo.empleado.id_ficha, 0, 0);
                anticipo.promedio_total_ganado = dato.sumaTotalGanado;


                anticipo.anticipo_extraordinaro = 0
                anticipo.anticipo_ordinaro = 0
                if ($scope.anticiposDatos) {
                    if ($scope.anticiposDatos.ordinarios.length > 0) {
                        for (var i = 0; i < $scope.anticiposDatos.ordinarios.length; i++) {
                            var ordi = $scope.anticiposDatos.ordinarios[i];
                            if (anticipo.empleado.id_ficha == ordi.id_ficha) {
                                anticipo.anticipo_ordinaro += ordi.monto
                            }
                        }
                        let RegistroAnticiposOrdiEmpleado = $scope.anticiposDatos.ordinarios.filter(x => anticipo.empleado.id_ficha == x.id_ficha)
                    }


                    if ($scope.anticiposDatos.extraordinarios.length > 0) {
                        for (var i = 0; i < $scope.anticiposDatos.extraordinarios.length; i++) {
                            var ordi = $scope.anticiposDatos.extraordinarios[i];
                            if (anticipo.empleado.id_ficha == ordi.id_ficha) {
                                anticipo.anticipo_extraordinaro += ordi.monto
                            }
                        }
                    }
                } else {
                    anticipo.anticipo_ordinaro = 0
                    anticipo.anticipo_extraordinaro = 0
                }
                anticipo.total = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro + anticipo.monto
                anticipo.total2 = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro + anticipo.monto
                anticipo.saldo_salario = anticipo.salario_basico - anticipo.total
                anticipo.saldo_salario2 = anticipo.salario_basico - anticipo.total
                let totalanticipo = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro
                if (datos.tipo) {
                    anticipo.monto = (anticipo.promedio_total_ganado * datos.monto) / 100;
                    sumaTotalMontos = anticipo.monto + anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro
                    if (sumaTotalMontos > anticipo.monto) {
                        anticipo.monto == anticipo.monto - anticipo.anticipo_extraordinaro - anticipo.anticipo_ordinaro
                    }
                    if (anticipo.monto > anticipo.tope && anticipo.promedio_total_ganado > 0) {
                        anticipo.monto = anticipo.tope
                        // anticipo.tope=anticipo.tope-(anticipo.anticipo_extraordinaro+anticipo.anticipo_ordinaro)
                    }

                }
                anticipo.monto = parseFloat(anticipo.monto.toFixed(2))
                $scope.listaAnticipos2.push(anticipo)
            }

            async function procesarCalculos(datos) {
                try {
                    SweetAlert.update({ title: "Realizando Cálculos....." })
                    var monto = datos.monto
                    var tope = 0
                    var porcentaje = null
                    if (datos.tope) {
                        tope = datos.tope
                    } else {
                        tope = null
                    }
                    if (datos.tipo) {
                        $scope.anticipoTipo = { tope: datos.tope, monto: datos.monto, tipo: datos.tipo }
                    } else {
                        $scope.anticipoTipo = { tope: datos.tope, monto: datos.monto, tipo: datos.tipo }
                    }
                    var countE = 0;
                    for (const empleado of datos.empleados) {
                        countE = countE + 1;
                        await realizarCalculos(empleado, datos, monto, porcentaje, tope, getPercentageChange(datos.empleados.length, countE));
                    }

                    $scope.cerrarDialogNuevoAnticipoRegularTodos();

                    console.log('Doneee')
                    SweetAlert.swal({
                        title: 'Finalizado!',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    })

                    $scope.$evalAsync()
                } catch (error) {

                }
            }

            $scope.AgregarAnticipoOrdinario = function (datos) {
                $("form").bind("keydown", function (e) {
                    if (e.keyCode === 13) return false;
                });

                SweetAlert.swal({
                    title: 'Obteniendo empleados...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    // html: '<strong></strong><div class="progress-bar"><div class="progress-percentage" style="display:flex width: 0%;"></div></div>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                procesarCalculos(datos);
            }

            $scope.AgregarAnticipoOrdinario22 = function (datos) {
                $("form").bind("keydown", function (e) {
                    if (e.keyCode === 13) return false;
                });

                var monto = datos.monto
                var tope = 0
                var porcentaje = null
                if (datos.tope) {
                    tope = datos.tope
                } else {
                    tope = null
                }
                if (datos.tipo) {
                    $scope.anticipoTipo = { tope: datos.tope, monto: datos.monto, tipo: datos.tipo }
                } else {
                    $scope.anticipoTipo = { tope: datos.tope, monto: datos.monto, tipo: datos.tipo }
                }
                datos.empleados.forEach(async function (empleado, index, array) {
                    if (datos.tipo) {
                        monto = (empleado.ficha.haber_basico * datos.monto) / 100;
                        porcentaje = datos.monto
                    }
                    if ($scope.listaAnticipos2.length == 0) {
                        var anticipo = { fecha: new Date(), empleado: empleado, monto: monto, anticipo_extraordinaro: null, total: null, salario_basico: empleado.ficha.haber_basico, saldo_salario: empleado.haber_basico, tope: tope, tipo_porcentual: datos.tipo, porcentaje: porcentaje }

                    } else {

                        var anticipo = { fecha: new Date(), empleado: empleado, monto: monto, anticipo_extraordinaro: null, total: null, salario_basico: empleado.ficha.haber_basico, saldo_salario: null, tope: tope, tipo_porcentual: datos.tipo, porcentaje: porcentaje }
                        anticipo.saldo_salario = anticipo.salario_basico - anticipo.total
                    }
                    //$scope.parametros = await $scope.obtenerParametros($scope.usuario.id_empresa)
                    anticipo.empleado.id_ficha = anticipo.empleado.ficha.id
                    anticipo.empleado.fecha_inicio = anticipo.empleado.ficha.fecha_inicio
                    anticipo.empleado.ganadoPorMes = []

                    var dato = await RRHHPlanillaSueldo(anticipo.empleado.id_ficha, 0, 0);
                    anticipo.promedio_total_ganado = dato.sumaTotalGanado;

                    anticipo.anticipo_extraordinaro = 0
                    anticipo.anticipo_ordinaro = 0
                    if ($scope.anticiposDatos) {
                        if ($scope.anticiposDatos.ordinarios.length > 0) {
                            for (var i = 0; i < $scope.anticiposDatos.ordinarios.length; i++) {
                                var ordi = $scope.anticiposDatos.ordinarios[i];
                                if (anticipo.empleado.id_ficha == ordi.id_ficha) {
                                    anticipo.anticipo_ordinaro += ordi.monto
                                }
                            }

                        }


                        if ($scope.anticiposDatos.extraordinarios.length > 0) {
                            for (var i = 0; i < $scope.anticiposDatos.extraordinarios.length; i++) {
                                var ordi = $scope.anticiposDatos.extraordinarios[i];
                                if (anticipo.empleado.id_ficha == ordi.id_ficha) {
                                    anticipo.anticipo_extraordinaro += ordi.monto
                                }
                            }
                        }
                    } else {
                        anticipo.anticipo_ordinaro = 0
                        anticipo.anticipo_extraordinaro = 0
                    }
                    anticipo.total = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro + anticipo.monto
                    anticipo.total2 = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro + anticipo.monto
                    anticipo.saldo_salario = anticipo.salario_basico - anticipo.total
                    anticipo.saldo_salario2 = anticipo.salario_basico - anticipo.total
                    let totalanticipo = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro
                    if (datos.tipo) {
                        anticipo.monto = (anticipo.promedio_total_ganado * datos.monto) / 100;
                        sumaTotalMontos = anticipo.monto + anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro
                        if (sumaTotalMontos > anticipo.monto) {
                            anticipo.monto == anticipo.monto - anticipo.anticipo_extraordinaro - anticipo.anticipo_ordinaro
                        }
                        if (anticipo.monto > anticipo.tope && anticipo.promedio_total_ganado > 0) {
                            anticipo.monto = anticipo.tope
                            // anticipo.tope=anticipo.tope-(anticipo.anticipo_extraordinaro+anticipo.anticipo_ordinaro)
                        }

                    }
                    anticipo.monto = parseFloat(anticipo.monto.toFixed(2))
                    $scope.listaAnticipos2.push(anticipo)

                    if (index === (array.length - 1)) {
                        $scope.cerrarDialogNuevoAnticipoRegularTodos()
                        // $scope.listaAnticipos2 = $filter('orderBy')($scope.listaAnticipos2, ['empleado.persona.nombre_completo'], false);
                        $scope.listaAnticipos2.sort(
                            function (a, b) {

                                return a.empleado.persona.apellido_paterno > b.empleado.persona.apellido_paterno ? 1 : -1;
                            });  
                    }
                });

            }
            $scope.AgregarAnticipoExtraordinario = function () {
                /*   $scope.obtenerAnticiposExtra($scope.empleado) */
                if ($scope.listaAnticipos.length == 0) {
                    var anticipo = { fecha: new Date(), monto: null, total2: $scope.anticipo_ordinaroOextra, anticipo_ordinaro: $scope.anticipo_ordinaroOextra, total: $scope.anticipo_ordinaroOextra, salario_basico: $scope.empleado.haber_basico, saldo_salario: $scope.empleado.haber_basico, empleado: $scope.empleado }
                    $scope.listaAnticipos.push(anticipo)
                } else {
                    if ($scope.listaAnticipos[$scope.listaAnticipos.length - 1].id) {
                        var anticipo = { fecha: new Date(), monto: null, anticipo_ordinaro: $scope.anticipo_ordinaroOextra, total: $scope.listaAnticipos[$scope.listaAnticipos.length - 1].total, salario_basico: $scope.empleado.haber_basico, saldo_salario: null, empleado: $scope.empleado }
                        anticipo.saldo_salario = anticipo.salario_basico - anticipo.total
                        $scope.listaAnticipos.push(anticipo)
                    } else {
                        $scope.mostrarMensaje("cuenta con 1 anticipo sin guardar!")
                    }
                }
            }
            $scope.sumarMontoPrestamoNuevo = function (anticipo, index) {
                /*  if (anticipo.id == undefined) { */
                // corregir calculo de siguientes fichas ======
                if ($scope.listaAnticipos.length > 1) {
                    if (anticipo.monto) {
                        if (index > 0) {
                            if ($scope.listaAnticipos[index - 1].ficha.empleado.id == $scope.listaAnticipos[index].ficha.empleado.id) {
                                anticipo.total = $scope.listaAnticipos[index - 1].total + anticipo.monto
                                var siguientesAnt = $scope.listaAnticipos.filter(anti => anti.ficha.empleado.id == anticipo.ficha.empleado.id)
                                // siguientesAnt.slice(1).forEach(dato => dato.total = dato.monto + anticipo.total)

                                siguientesAnt.slice(1).forEach(function (dato, index, array) {
                                    if (index > 0) {
                                        dato.total = dato.monto + array[index - 1].total
                                        dato.montoEdit = true;
                                        dato.editado = true;
                                    }
                                })
                            } else {
                                if (anticipo.anticipo_ordinaro) {
                                    anticipo.total = anticipo.monto + anticipo.anticipo_ordinaro
                                } else {
                                    anticipo.total = anticipo.monto + anticipo.anticipo_extraordinaro
                                }
                            }
                        } else {
                            // if (anticipo.anticipo_ordinaro) {
                            //     anticipo.total = anticipo.monto + anticipo.anticipo_ordinaro
                            // } else {
                            //     anticipo.total = anticipo.monto + anticipo.anticipo_extraordinaro
                            // }
                            anticipo.total = anticipo.monto + anticipo.anticipo_extraordinaro
                            var siguientesAnt = $scope.listaAnticipos.filter(anti => anti.ficha.empleado.id == anticipo.ficha.empleado.id)
                            // siguientesAnt.slice(1).forEach(dato, index => dato.total = dato.monto + anticipo.total)

                            siguientesAnt.slice(1).forEach(function (dato, index, array) {
                                dato.montoEdit = true;
                                dato.editado = true;
                                if (index == 0) {
                                    dato.total = dato.monto + anticipo.total
                                } else {
                                    dato.total = dato.monto + array[index - 1].total
                                }
                            })
                        }
                    } else {
                        if (anticipo.anticipo_ordinaro) {
                            anticipo.total = anticipo.anticipo_ordinaro
                        } else {
                            anticipo.total = anticipo.anticipo_extraordinaro
                        }
                    }

                } else {
                    anticipo.total2 = anticipo.anticipo_ordinaro || 0;
                    if (anticipo.monto) {
                        anticipo.total = anticipo.total2 + anticipo.monto
                    } else {
                        if (anticipo.anticipo_ordinaro) {
                            anticipo.total = anticipo.anticipo_ordinaro
                        } else {
                            anticipo.total = anticipo.anticipo_extraordinaro
                        }
                    }
                }

                anticipo.saldo_salario = anticipo.salario_basico - anticipo.total
            }
            $scope.sumarMontoPrestamoNuevo2 = function (anticipo) {

                anticipo.total = anticipo.anticipo_extraordinaro + anticipo.monto + anticipo.anticipo_ordinaro
                anticipo.saldo_salario = anticipo.salario_basico - anticipo.total
            }

            $scope.ActualizarAnticipo = function (anticipo) {
                anticipo.montoExtraoridnario = anticipo.total - anticipo.anticipo_ordinaro
                var promesa = ActualizarAnticipoEmpleado(anticipo.id_ficha, anticipo)
                promesa.then(function (datos) {
                    anticipo.montoEdit = false
                    $scope.cerrarDialogAnticipoExtraordinario()
                    $scope.mostrarMensaje(datos.mensaje)
                })
            }
            $scope.ActualizarAnticipoOrdi = function (anticipo) {
                anticipo.anticipo_ordinaro = 0
                if ($scope.anticiposDatos) {
                    if ($scope.anticiposDatos.ordinarios.length > 0) {
                        for (var i = 0; i < $scope.anticiposDatos.ordinarios.length; i++) {
                            var ordi = $scope.anticiposDatos.ordinarios[i];
                            if (anticipo.id_ficha == ordi.id_ficha && anticipo.id != ordi.id) {
                                anticipo.anticipo_ordinaro += ordi.monto
                            }
                        }

                    }
                }
                anticipo.montoExtraoridnario = anticipo.total - (anticipo.anticipo_extraordinaro)
                var promesa = ActualizarAnticipoEmpleado(anticipo.id_ficha, anticipo)
                promesa.then(function (datos) {
                    anticipo.montoEdit = false
                    $scope.cerrarDialogAnticipoExtraordinario()
                    SweetAlert.swal({
                        title: 'Guardado!',
                        text: datos.mensaje,
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    })
                })
            }
            $scope.cancelarEdicionAnticipo = function () {
                $scope.obtenerAnticiposExtra($scope.empleado)
            }
            $scope.cancelarEdicionAnticipo = function () {
                $scope.obteneranticiposOrdi()
            }
            $scope.imprimirAnticipoRegular = function (datos, filtro) { 
                var doc = new PDFDocument({ compress: false, size: 'letter', margin: 10 });
                var stream = doc.pipe(blobStream());
                var totalCosto = 0, totalTransporte = 0;
                var y = 205, itemsPorPagina = 18, items = 0, pagina = 1, totalPaginas = Math.ceil(datos.length / itemsPorPagina);
                $scope.DibujarCabeceraPDFAnticipoRegular(doc, pagina, totalPaginas, datos, filtro);
                doc.font('Helvetica', 10);
                for (var i = 0; i < datos.length && items <= itemsPorPagina; i++) {
                    anticipo = datos[i]
                    doc.text(i + 1, 45, y);
                    doc.text(anticipo.ficha.empleado.codigo, 80, y, { width: 70 });
                    doc.text(anticipo.ficha.empleado.persona.nombre_completo, 200, y, { width: 100 });
                    doc.text(anticipo.ficha.monto, 320, y, { width: 100 });
                    doc.text(anticipo.ficha.banco.nombre, 400, y, { width: 100 });
                    doc.text(".......... ", 500, y + 2, { width: 100 });
                    y += 30
                    items++
                    if (items == itemsPorPagina) {
                        doc.addPage({ margin: 0, bufferPages: true });
                        y = 205;
                        items = 0;
                        pagina = pagina + 1;
                        $scope.DibujarCabeceraPDFAnticipoRegular(doc, pagina, totalPaginas, datos, filtro);
                        doc.font('Helvetica', 10);
                    }
                }
                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
                blockUI.stop();

            }

            $scope.DibujarCabeceraPDFAnticipoRegular = function (doc, pagina, totalPaginas, anticipos, filtro) {

                var comparadorTope = 0,
                    comparadorTipo = 0,
                    bandera = false,
                    tope = 0,
                    bandera2 = false,
                    bandera3 = false,
                    tipo = 0,
                    Datoporcentaje = 0,
                    datofecha = "",
                    fecha = ""
                anticipos.forEach(function (anticipo, index, array) {
                    if (index == 0) {
                        comparadorTope = anticipo.tope
                        comparadorTipo = anticipo.tipo_porcentual
                        Datoporcentaje = anticipo.porcentaje
                        datofecha = $scope.fechaATexto(anticipo.fecha)
                    } else {
                        if (anticipo.tope != comparadorTope) {
                            bandera = true
                        }
                        if (anticipo.tipo_porcentual != comparadorTipo) {
                            bandera2 = true
                        }
                        if ($scope.fechaATexto(anticipo.fecha) != datofecha) {
                            bandera3 = true
                        }
                    }
                    if (index === (array.length - 1)) {
                        tope = (bandera) ? "Diferentes Topes" : comparadorTope
                        tipo = (bandera2) ? "Diferentes tipos" : comparadorTipo = (comparadorTipo) ? "Porcentual " + Datoporcentaje + "%" : "Monto"
                        fecha = (bandera3) ? "Diferentes fechas" : datofecha
                        tope = (tope == null) ? "Sin restricción" : tope
                        doc.font('Helvetica-Bold', 14);
                        doc.text("LISTA DE ANTICIPOS", 0, 45, { align: "center" });
                        doc.font('Helvetica-Bold', 12);
                        doc.text("PERIODO : ", 45, 100);
                        doc.text("FECHA DE CREACIÓN : ", 45, 120);
                        doc.text("USUARIO : ", 45, 140);
                        doc.text("TIPO DE ANTICIPO : ", 45, 160);
                        doc.text("TOPE: ", 345, 160);
                        doc.font('Helvetica', 12);
                        if (fecha instanceof Date) { fecha = $scope.fechaATexto(fecha) }
                        doc.fillColor('blue')
                        doc.text(fecha, 185, 120);
                        doc.text($scope.usuario.persona.nombre_completo, 115, 140);
                        doc.text(filtro.mes.nombre + " " + filtro.gestion, 115, 100);
                        doc.text(tipo, 175, 160);
                        doc.text(tope, 385, 160);
                        doc.fillColor('black')
                        doc.font('Helvetica-Bold', 12);
                        doc.text("Nro.", 45, 180);
                        width = doc.widthOfString('Nro.')
                        height = doc.currentLineHeight()
                        doc.underline(45, 181, width, height)
                        doc.text("Cod. Emp.", 80, 180);
                        width = doc.widthOfString('Cod. Emp.')
                        height = doc.currentLineHeight()
                        doc.underline(80, 181, width, height)
                        doc.text("Nombre", 200, 180);
                        width = doc.widthOfString('Nombre')
                        height = doc.currentLineHeight()
                        doc.underline(200, 181, width, height)
                        doc.text("Monto", 320, 180);
                        width = doc.widthOfString('Monto')
                        height = doc.currentLineHeight()
                        doc.underline(320, 181, width, height)
                        doc.text("Mod. ", 400, 180);
                        width = doc.widthOfString('Mod')
                        height = doc.currentLineHeight()
                        doc.underline(400, 181, width, height)
                        doc.text("Firma. ", 500, 180);
                        width = doc.widthOfString('Firma')
                        height = doc.currentLineHeight()
                        doc.underline(500, 181, width, height)
                        doc.font('Helvetica', 8);
                        var currentDate = new Date();
                        doc.text("USUARIO: " + $scope.usuario.persona.nombre_completo + " fecha " + currentDate.getDate() + "/" + (currentDate.getMonth() + 1) + "/" + currentDate.getFullYear() + "Hrs." + currentDate.getHours() + ":" + currentDate.getMinutes(), 15, 765);
                        doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 0, 740, { align: "center" });
                    }
                });


            }
            $scope.imprimirAnticiposRegularesXlsx = async (datos) => {
                if (datos.length > 0) {
                    //$scope.agregarRegistrosMayor(matriz, data.cuentas)
                    SweetAlert.update({ title: "Construyendo archivo excel...." })
                    var matriz = [["FECHA", "NOMBRE COMPLETO", "MONTO", "CI", "EXT", "BANCO", "CUENTA"]]
                    datos.forEach(registro => {
                        matriz.push([
                            registro.fecha ? fechaATexto(registro.fecha) : '',
                            registro.ficha ? registro.ficha.empleado.persona.nombre_completo.toUpperCase() : '',
                            registro.monto ? registro.monto : '',
                            registro.ficha ? registro.ficha.empleado.persona.ci : '',
                            registro.ficha ? registro.ficha.empleado.extension ? registro.ficha.empleado.extension.nombre_corto : '' : '',
                            registro.ficha ? registro.ficha.banco ? registro.ficha.banco.nombre.toUpperCase() : '' : '',
                            registro.ficha ? registro.ficha.numero_cuenta : ''

                        ]);
                    })
                    var ws_name = "Mayores";
                    var wb = new Workbook();
                    //var ws = await sheet_from_array_of_arrays(data.cuentas);
                    var ws = XLSX.utils.aoa_to_sheet(matriz);
                    /* add worksheet to workbook */
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = await XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    var filesaver = saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "MAYORES-GLOBAL.xlsx");
                    filesaver.onwriteend = function () {
                        swal.close();
                    }
                } else {
                    SweetAlert.hideLoading();
                    res.json({ hasError: true, message: "No existen registros contables en el periodo.", err: err })
                }
            }
            $scope.listaBancos = function () {
                $scope.anticiposSeleccionados = []
                $scope.anticiposTr3 = []
                var promesa = ListaBancos($scope.usuario.id_empresa)
                $scope.arregloBancosUnion = ""
                $scope.arregloBancosMsc = ""

                var arregloCuentaBanco = []
                promesa.then(function (dato) {
                    $scope.cuentasBancos = dato;
                    $scope.datosBancos = dato
                    $scope.bancos = []

                    dato.forEach(function (banco, index, array) {

                        banco.cuentas = []
                        if (index == 0) {
                            $scope.bancos.push(banco)
                        }
                        var bandera = false
                        for (var i = 0; i < $scope.bancos.length; i++) {
                            var banco2 = $scope.bancos[i]
                            if (banco2.nombre == banco.nombre) {
                                bandera = true
                            }
                            if (i === ($scope.bancos.length - 1)) {
                                if (bandera == false) {
                                    $scope.bancos.push(banco)

                                }
                            }
                        }
                        if (index === (array.length - 1)) {
                            dato.forEach(function (banco, index, array) {
                                for (var i = 0; i < $scope.bancos.length; i++) {
                                    var banco2 = $scope.bancos[i]
                                    if (banco2.nombre == banco.nombre) {
                                        bandera = true
                                        banco2.cuentas.push(banco)

                                        i = $scope.bancos.length
                                    }
                                }
                            })
                        }
                    });
                }).catch((err) => {
                    console.error(err)
                });
            }
            $scope.imprimirTr3 = function (tr3, tipo) {
                let fecha = new Date(tr3.fecha)
                let mes = fecha.getMonth()
                let dia = fecha.getDate()
                let mesActual = ""
                let nombreArchivo = ""
                for (let i = 0; i < $scope.meses.length; i++) {
                    let element = $scope.meses[i];
                    if (mes == element.id) {
                        mesActual = element.nombre
                    }
                }
                mes = (mes < 10) ? "0" + mes : mes
                dia = (dia < 10) ? "0" + dia : dia
                anio = fecha.getFullYear()
                let anticiposTr3 = []
                let total = 0
                tr3.historialtr3.forEach(function (tr3H, index, array) {
                    total += tr3H.anticipo.monto
                    anticiposTr3.push(tr3H.anticipo)
                    if (index === (array.length - 1)) {
                        let dato = { anticipos: anticiposTr3, tipo: tipo, tr3Encontrado: tr3, total: total }
                        if (tipo == "MSC") {
                            nombreArchivo = tr3.nombre_planilla + ".tr3"
                        } else {
                            nombreArchivo = "SUELDO" + mesActual + anio + "BUNION.txt"
                        }
                        $scope.descargarArchivo($scope.generarTexto(dato), nombreArchivo);
                    }
                });

            }
            $scope.imprimirCartaTr3 = function (tr3, tipo) {
                var anticiposTr3 = []
                var total = 0
                var fecha = new Date(tr3.fecha_elaboracion)
                var mes = fecha.getMonth() + 1
                var dia = fecha.getDate()
                var mesActual = ""
                for (var i = 0; i < $scope.meses.length; i++) {
                    var element = $scope.meses[i];
                    if (mes == element.id) {
                        mesActual = element.nombre
                    }
                }
                mes = (mes < 10) ? "0" + mes : mes
                dia = (dia < 10) ? "0" + dia : dia
                anio = fecha.getFullYear()
                tr3.historialtr3.forEach(function (tr3H, index, array) {
                    total += tr3H.anticipo.monto
                    anticiposTr3.push(tr3H.anticipo)
                    if (index === (array.length - 1)) {
                        var dato = { anticipos: anticiposTr3, tipo: tipo, tr3Encontrado: tr3, total: total }
                        if (tipo == "MSC") {
                            var nombreArchivo = tr3.nombre_planilla + ".txt"
                        } else {
                            var nombreArchivo = dato.tr3Encontrado.planilla + "" + dia + "" + mes + "" + anio + "" + (dato.tr3Encontrado.numero_planilla ? dato.tr3Encontrado.numero_planilla : '') + ".txt"
                        }
                        $scope.descargarArchivo($scope.generarTextoCarta(dato), nombreArchivo);
                    }
                });

            }
            $scope.guardarTr3Empleado = function (datos) {
                datos.fecha = new Date()
                datos.fecha_elaboracion2 = new Date($scope.convertirFecha(datos.fecha_elaboracion))
                var arrlegoAnticiposBanco = []
                if (datos.anticipos.length > 0) {
                    datos.anticipos.forEach(function (anticipo, index, array) {
                        bandera = false
                        const banco_empleado = anticipo.ficha.banco.nombre.split(' ').map(word => word.toUpperCase().trim()).join(' ')
                        const banco = $scope.datosBanco.nombre.split(' ').map(word => word.toUpperCase().trim()).join(' ')
                        if (banco === banco_empleado) {
                            bandera = true
                        }
                        if (bandera) {
                            if ($scope.fechaATexto(anticipo.fecha) === $scope.tr3.fecha_anticipo) {
                                arrlegoAnticiposBanco.push(anticipo)
                            }
                        }
                        if (index === (array.length - 1)) {
                            if (arrlegoAnticiposBanco.length == 0) {
                                return $scope.mostrarMensaje('no existen registros a la fecha: ' + $scope.tr3.fecha_anticipo)
                            }
                            datos.anticipos = arrlegoAnticiposBanco
                            var promesa = GuardarTr3(datos, $scope.usuario.id_empresa)
                            promesa.then(function (dato) {
                                $scope.imprimirTr3(dato.tr3Encontrado, $scope.tr3.tipo)
                                $scope.imprimirCartaTr3(dato.tr3Encontrado, $scope.tr3.tipo)
                                $scope.mostrarMensaje(dato.mensaje)
                            }).catch((err) => {
                                $scope.mostrarMensaje(err.stack || 'se perdio la conexión.')
                            });

                        }
                    });

                } else {
                    blockUI.stop();
                    $scope.mostrarMensaje('No existen empleados seleccionados con cuenta en este banco')
                }
            }
            $scope.descargarArchivo = function (contenidoEnBlob, nombreArchivo) {
                var reader = new FileReader();
                reader.onload = function (event) {
                    var save = document.createElement('a');
                    save.href = event.target.result;
                    save.target = '_blank';
                    save.download = nombreArchivo || 'archivo.dat';
                    var clicEvent = new MouseEvent('click', {
                        'view': window,
                        'bubbles': true,
                        'cancelable': true
                    });
                    save.dispatchEvent(clicEvent);
                    (window.URL || window.webkitURL).revokeObjectURL(save.href);
                };
                reader.readAsDataURL(contenidoEnBlob);
            };

            $scope.generarTextoCarta = function (datos) {
                var fecha = new Date(datos.tr3Encontrado.fecha)
                var mes = fecha.getMonth() + 1
                var dia = fecha.getDate()
                var mesActual = ""
                for (var i = 0; i < $scope.meses.length; i++) {
                    var element = $scope.meses[i];
                    if ((mes - 1) === element.id) {
                        mesActual = element.nombre
                    }
                }
                mes = (mes < 10) ? "0" + mes : mes
                dia = (dia < 10) ? "0" + dia : dia
                anio = fecha.getFullYear()
                var totalLiteral = ConvertirALiteral(datos.total.toFixed(2));
                datos.total = datos.total.toFixed(2)
                var texto = [];
                if (datos.tipo == "MSC") {
                    var cabezera = "\r\n\r\n" + datos.tr3Encontrado.departamento.nombre + " " + dia + " de " + mesActual + " del " + anio + "\r\n" +
                        "Nro Cite: ESS-P-29/18\r\n\r\n\r\n" +
                        "Señores \r\n" +
                        datos.tr3Encontrado.cuenta.nombre + "\r\n" +
                        "Ciudad\r\n\r\n" +
                        "Ref.: Orden de Pago\r\n\r\n" +
                        "De nuestra consideración:\r\n\r\n" +
                        "Mediante la presente y según contrato suscrito con el Banco Mercantil Santa Cruz S.A.,\r\n" +
                        "autorizamos a ustedes realizar el débito por el valor total de Bs. " + datos.total + "\r\n(" + totalLiteral + ")\r\n" +
                        "correspondiente a la cancelación de la planilla de pago(s), de acuerdo al siguiente detalle:\r\n\r\n" +

                        "* Cuenta de débito Nro:                 " + datos.tr3Encontrado.cuenta.numero + "\r\n" +
                        "* Cuenta Pago de Planilla:              " + datos.tr3Encontrado.planilla + "\r\n" +
                        "* Nombre del archivo:                   " + datos.tr3Encontrado.planilla + "" + dia + "" + (mes) + "" + anio + "" + datos.tr3Encontrado.numero_planilla + ".tr3\r\n" +
                        "* Código de control:                     87fd35e019787f9612a4ffb9fc2cb415\r\n" +
                        "* Nombre / Número de planilla:  " + datos.tr3Encontrado.nombre_planilla + "\r\n" +
                        "* Monto total de débito:                 Bs " + datos.total + "\r\n\r\n" +

                        "Los datos apuntados anteriormente y el detalle de pagos, se encuentran en el archivo \r\n" +
                        datos.tr3Encontrado.planilla + "" + dia + "" + (mes) + "" + anio + "" + datos.tr3Encontrado.numero_planilla + ".tr3, adjunto a la presente carta.\r\n\r\n " +

                        "Si, a los efectos de la presente, fuera necesario realizar compra venta de moneda nacional\r\n" +
                        "o extranjera,  también  autorizamos e instruimos  realizar las operaciones  necesarias  para\r\n" +
                        "cumplir  con  lo  instruido,  de  tal  manera  que se realicen  los abonos  en  la moneda  que\r\n" +
                        "corresponda a cada cuenta beneficiaria.\r\n" +
                        " Debo informar lo siguiente:\r\n" +
                        "El origen de los fondos corresponde al " + datos.tr3Encontrado.origen_fondos + ".\r\n" +
                        "El Destino de los Fondos, " + datos.tr3Encontrado.destino_fondos + ".\r\n\r\n" +

                        "Agradecemos su gentil atención a esta solicitud.\r\n\r\n" +

                        "Atentamente\r\n\r\n\r\n\r\n" +




                        datos.tr3Encontrado.firma_uno + "                                 " + datos.tr3Encontrado.firma_tres + "\r\n" +
                        datos.tr3Encontrado.firma_dos + "                                             " + datos.tr3Encontrado.firma_cuatro + "\r\n\r\n\r\n" +



                        "Adj. Lo citado"
                    texto.push(cabezera)
                    return new Blob(texto, {
                        type: 'text/plain'
                    });
                } else if (datos.tipo == "BU") {

                    var cabezera = "\r\n\r\nSanta Cruz" + " " + dia + " de " + mesActual + " de " + anio + "\r\n" +
                        "ESS-P-30/18\r\n" +
                        "Señores:\r\n" +
                        "BANCO UNION  S.A.\r\n" +
                        "Atn.:" + datos.tr3Encontrado.dirigido_para + "\r\n" +
                        datos.tr3Encontrado.cargo + "\r\n" +
                        "Presente.-\r\n\r\n" +
                        "\t\t\t\tRef.: Autorización para Abono de  Sueldos " + $scope.meses[new Date(datos.tr3Encontrado.fecha_elaboracion).getMonth()].nombre.toUpperCase() + " " + new Date(datos.tr3Encontrado.fecha_elaboracion).getFullYear() + "\r\n\r\n" +
                        "Mediante la presente solicitamos debiten de nuestra cuenta corriente No." + datos.tr3Encontrado.cuenta.numero + "\r\n" + "el importe total de Bs." + datos.total + "(" + totalLiteral + ")\r\n" + ", y el concepto de comisiones debitar de nuestra cuenta." + "\r\n\r\n" +
                        "Se ha realizado la verificación de nuestro extracto de cuenta  No." + datos.tr3Encontrado.cuenta.numero + ", tenemos saldo suficiente lo cual cubre el importe requerido.\r\n\r\n" +
                        "Enviamos planilla detallada adjunta.\r\n\r\n" +
                        "Debo informar lo siguiente:\r\n\r\n" +
                        "El origen de los fondos corresponde a: " + datos.tr3Encontrado.origen_fondos + "\r\n" +
                        "El destino de los fondos es para: " + datos.tr3Encontrado.destino_fondos + ".\r\n\r\n" +
                        "Agradeciendo de antemano su pronta respuesta vía mail, saludo a Usted cordialmente.\r\n\r\n" +
                        "Atentamente,\r\n\r\n\r\n\r\n\r\n\r\n" +
                        "\t\t" + datos.tr3Encontrado.firma_uno + "\t\t\t\t" + datos.tr3Encontrado.firma_tres + "\r\n" +
                        "\t" + datos.tr3Encontrado.firma_dos + "\t\t\t\t" + "\t\t" + datos.tr3Encontrado.firma_cuatro + "\r\n"
                    texto.push(cabezera)
                    return new Blob(texto, {
                        type: 'text/plain'
                    });
                }
            }
            $scope.generarTexto = function (datos) {
                var texto = [];
                var cuerpo = ""
                try {
                    if (datos.tipo == "MSC") {
                        var nombreArchivoTr3 = datos.tr3Encontrado.nombre_archivo
                        var fecha = $scope.fechaATexto(datos.tr3Encontrado.fecha)
                        var fechaPago = $scope.fechaATexto(datos.tr3Encontrado.fecha_elaboracion)
                        let mes = $scope.meses[new Date(datos.tr3Encontrado.fecha_elaboracion).getMonth()].nombre.toUpperCase()
                        let anio = new Date(datos.tr3Encontrado.fecha_elaboracion).getFullYear().toString()
                        let nombre = "ESO" + 'ANT' + mes + anio.charAt(2) + anio.charAt(3)
                        var cabezera = datos.tr3Encontrado.planilla + "|" + datos.tr3Encontrado.cuenta.numero + "|0|" + nombre + "|" + fecha + "|" + fechaPago + "|" + datos.total.toFixed(2) + "|" + datos.tr3Encontrado.numero_planilla + "\r\n"

                        datos.anticipos.forEach(function (anticipo, index, array) {
                            let ficha = anticipo.ficha
                            numero_cuenta = ficha.numero_cuenta
                            cabezera += (index + 1) + "|" + ficha.empleado.persona.nombre_completo + "|" + ficha.numero_cuenta + "|" + fechaPago + "|" + datos.tr3Encontrado.numero_planilla + "|" + anticipo.monto.toFixed(2) + "|||" + datos.tr3Encontrado.nombre_archivo + "\r\n"
                            if (index === (array.length - 1)) {
                                texto.push(cabezera)
                            }
                        })
                        return new Blob(texto, {
                            type: 'text/plain'
                        });
                    } else if (datos.tipo == "BU") {
                        let primerDigito = ""
                        let segunYFinalDigitos = ""
                        let liquidoPagable = ""
                        let numero_cuenta = ""
                        var fecha = new Date(datos.tr3Encontrado.fecha)
                        var mes = fecha.getMonth() + 1
                        var mes2 = fecha.getMonth()
                        var dia = fecha.getDate()
                        var mesActual = ""
                        for (var i = 0; i < $scope.meses.length; i++) {
                            var element = $scope.meses[i];
                            if (mes2 == element.id) {
                                mesActual = element.nombre
                            }
                        }
                        mes = (mes < 10) ? "0" + mes : mes
                        dia = (dia < 10) ? "0" + dia : dia
                        let cantidadEmpleado = datos.anticipos.length.toString()
                        let textoEspacios = $scope.cantidadEspacioParaAgregar(cantidadEmpleado, 5, "", "0")
                        cantidadEmpleado = textoEspacios + cantidadEmpleado
                        let fecha_elaboracion = new Date(datos.tr3Encontrado.fecha_elaboracion)
                        var cabezera = "SUELDOS " + $scope.meses[fecha_elaboracion.getMonth()].nombre.toUpperCase() + " " + new Date(fecha_elaboracion).getFullYear() + "-" + cantidadEmpleado + $scope.fechaATexto(datos.tr3Encontrado.fecha).replaceAll('/', "")
                        textoEspacios = $scope.cantidadEspacioParaAgregar(cabezera, 40, " ", " ")
                        cabezera = cabezera.replace('-', textoEspacios)

                        cabezera += "\r\n"
                        let total = datos.total.toFixed(2)
                        totalCeros = $scope.cantidadEspacioParaAgregar(total, 12, "", "0")
                        total = totalCeros + total
                        let totalCeroscuentaFilaDos = $scope.cantidadEspacioParaAgregar(datos.tr3Encontrado.cuenta.numero, 14, "", "0")
                        primerDigito = datos.tr3Encontrado.cuenta.numero.slice(0, 1)
                        segunYFinalDigitos = datos.tr3Encontrado.cuenta.numero.slice(1)
                        numero_cuenta = primerDigito + totalCeroscuentaFilaDos + segunYFinalDigitos
                        cabezera += numero_cuenta + "" + total + "\r\n"
                        datos.anticipos.forEach(function (anticipo, index, array) {
                            fecha = $scope.fechaATexto(datos.tr3Encontrado.fecha_elaboracion)
                            let ficha = anticipo.ficha
                            numero_cuenta = ficha.numero_cuenta
                            if (datos.tr3Encontrado.aumentar_ceros) {
                                let totalCeroscuentaFilaDos = $scope.cantidadEspacioParaAgregar(numero_cuenta, 14, "", "0")
                                primerDigito = numero_cuenta.slice(0, 1)
                                segunYFinalDigitos = numero_cuenta.slice(1)
                                numero_cuenta = primerDigito + totalCeroscuentaFilaDos + segunYFinalDigitos
                            }
                            liquidoPagable = anticipo.monto.toFixed(2)
                            CerosliquidoPagable = $scope.cantidadEspacioParaAgregar(liquidoPagable, 12, "", "0")
                            liquidoPagable = CerosliquidoPagable + liquidoPagable
                            cabezera += numero_cuenta + "" + liquidoPagable + datos.tr3Encontrado.planilla + "\r\n"
                            if (index === (array.length - 1)) {
                                texto.push(cabezera)
                            }
                        })
                        return new Blob(texto, {
                            type: 'text/plain'
                        });
                    }
                    //El contructor de Blob requiere un Array en el primer parámetro
                    //así que no es necesario usar toString. el segundo parámetro
                    //es el tipo MIME del archivo
                } catch (error) {
                    console.error(error)
                }


            };
            $scope.cantidadEspacioParaAgregar = function (texto, tamañoRequerido, textoEspacios, valorInicial) {
                if (texto.length < tamañoRequerido) {
                    let espacios = tamañoRequerido - texto.length
                    while (espacios > 0) {
                        textoEspacios += valorInicial;
                        espacios--;
                    }
                }
                return textoEspacios

            }
            $scope.selecionarAnticipos = function (anticipo, anticipos, todos) {

                if (anticipo) {
                    if (anticipo.select == false) {
                        /*  anticipos.select = false */
                        $scope.anticiposSeleccionados.splice($scope.anticiposSeleccionados.indexOf(anticipo))
                        if (anticipo.entregado == false) {
                            $scope.anticiposTr3.splice($scope.anticiposTr3.indexOf(anticipo))
                        }
                    } else {
                        /*  anticipos.select = true */
                        $scope.anticiposSeleccionados.push(anticipo)
                        if (anticipo.entregado == false) {
                            $scope.anticiposTr3.push(anticipo)
                        }  
                    }
                }
                if (todos == true) {
                    $scope.anticiposSeleccionados = []
                    if (anticipos) {
                        anticipos.forEach(function (anticipo, index, array) {
                            anticipo.select = true
                            $scope.anticiposSeleccionados.push(anticipo)
                            if (anticipo.entregado == false) {
                                $scope.anticiposTr3.push(anticipo)
                            }
                        });
                    }
                } else if (todos == false) {
                    anticipos.forEach(function (anticipo, index, array) {
                        anticipo.select = false

                    });
                    $scope.anticiposSeleccionados = []
                    $scope.anticiposTr3 = []
                }
                /*   } */
            }
            //fin anticipos

            //inicio ausencias
            $scope.obtenertiposAusenciaMedica = function () {
                $scope.tiposAusenciasMedicas = []
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_AUSMED", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tiposAusenciasMedicas = entidad

                    blockUI.stop();
                });
            }
            $scope.obtenerTiposOtrasAusencias = function () {
                $scope.tiposOtrasAusencias = []
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_OTRAUS", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tiposOtrasAusencias = entidad
                    blockUI.stop();
                });
            }
            $scope.CalcularDiferenciaDias = function (ausencia, otro) {
                if (otro) {
                    /*    if (ausencia.fecha_inicio && ausencia.fecha_fin) {
                           var fechaInicio = new Date($scope.convertirFecha(ausencia.fecha_inicio));
                           var fechaFin = new Date($scope.convertirFecha(ausencia.fecha_fin));
                           var dato = $scope.diferenciaEntreDiasEnDias(fechaInicio, fechaFin)
                           if (dato == 0) {
                               dato = 1
                           }
                       } */
                    if (ausencia.fecha_inicio && ausencia.fecha_fin) {
                        var fechaInicio = new Date($scope.convertirFecha(ausencia.fecha_inicio));
                        var fechaFin = new Date($scope.convertirFecha(ausencia.fecha_fin));
                        fechaInicio.setMinutes(ausencia.fecha_inicio_hora.getMinutes()); fechaInicio.setHours(ausencia.fecha_inicio_hora.getHours());
                        fechaFin.setMinutes(ausencia.fecha_fin_hora.getMinutes()); fechaFin.setHours(ausencia.fecha_fin_hora.getHours());
                        var fecha1 = moment('"' + fechaInicio.getFullYear() + '-' + parseInt(fechaInicio.getMonth() + 1) + '-' + fechaInicio.getDate() + " " + fechaInicio.getHours() + ":" + fechaInicio.getMinutes() + ":00", "YYYY-MM-DD HH:mm:ss");
                        var fecha2 = moment('"' + fechaFin.getFullYear() + '-' + parseInt(fechaFin.getMonth() + 1) + '-' + fechaFin.getDate() + " " + fechaFin.getHours() + ":" + fechaFin.getMinutes() + ":00", "YYYY-MM-DD HH:mm:ss");

                        var diff = fecha2.diff(fecha1, 'd'); // Diff in days
                        var diff2 = fecha1.diff(fecha2, 'd'); // Diff in days

                        ausencia.horas = convertirSegundosATiempo(fecha2.diff(fecha1, 's')); // Diff in hours

                        ausencia.totalDias = "Dias " + Math.floor(ausencia.horas.split(':')[0] / 23);


                    }
                } else {
                    if (ausencia.fecha_inicio && ausencia.fecha_fin) {
                        var fechaInicio = new Date($scope.convertirFecha(ausencia.fecha_inicio));
                        var fechaFin = new Date($scope.convertirFecha(ausencia.fecha_fin));
                        var dato = $scope.diferenciaEntreDiasEnDias(fechaInicio, fechaFin)
                        if (Number.isInteger(dato)) {
                            dato += 1
                        } else if (dato == Math.floor(dato)) {
                            dato += 1
                        } else if (!Number.isNaN(dato + 1)) {
                            dato += 1
                        }
                        // if (dato == 0) {
                        //     dato = 1
                        // }
                    }
                }
                if (ausencia.primera_baja) {
                    ausencia.dias = dato - ausencia.tipoAusencia.dias_descuento
                    ausencia.dias_reales = dato
                } else {
                    ausencia.dias = dato
                }
            }

            $scope.crearNuevaAusencia = function (datos, otro) {
                if (otro == true) {
                    /*  var minutos = parseInt($scope.SumaTotalHoras.split(':')[1])
                     var horas = parseInt($scope.SumaTotalHoras.split(':')[0])
                     var minutosDatos = parseInt(datos.horas.split(':')[1])
                     var horasDatos = parseInt(datos.horas.split(':')[0])
                      if (horas < horasDatos) {
                         datos.fecha_inicio = new Date($scope.convertirFecha(datos.fecha_inicio));
                         datos.fecha_fin = new Date($scope.convertirFecha(datos.fecha_fin));
                         datos.fecha_inicio.setMinutes(datos.fecha_inicio_hora.getMinutes()); datos.fecha_inicio.setHours(datos.fecha_inicio_hora.getHours());
                         datos.fecha_fin.setMinutes(datos.fecha_fin_hora.getMinutes()); datos.fecha_fin.setHours(datos.fecha_fin_hora.getHours());
                         datos.compensaciones = $scope.selectionday
                         datos.estado = $scope.estadosDeAusencias.clases.find(function (x) {
                             return x.nombre_corto == "RTR"
                         })
                         $scope.guardarAusencia($scope.empleado.id_ficha, datos)
                     } else if (horas == horasDatos) {
                         if (minutos <= minutosDatos) { */
                    datos.id_usuario = $scope.usuario.id
                    datos.fecha_inicio = new Date($scope.convertirFecha(datos.fecha_inicio));
                    datos.fecha_fin = new Date($scope.convertirFecha(datos.fecha_fin));
                    datos.fecha_inicio.setMinutes(datos.fecha_inicio_hora.getMinutes()); datos.fecha_inicio.setHours(datos.fecha_inicio_hora.getHours());
                    datos.fecha_fin.setMinutes(datos.fecha_fin_hora.getMinutes()); datos.fecha_fin.setHours(datos.fecha_fin_hora.getHours());
                    datos.compensaciones = $scope.selectionday
                    datos.estado = $scope.estadosDeAusencias.clases.find(function (x) {
                        return x.nombre_corto == "RTR"
                    })
                    $scope.guardarAusencia($scope.empleado.id_ficha, datos, true)
                    /* } else {
                        $scope.mostrarMensaje("La suma del total de horas compensacion es mayor al total de horas de la ausencia!")
                    }
                } else {
                    $scope.mostrarMensaje("La suma del total de horas compensacion es mayor al total de horas de la ausencia!")
                } */

                } else {
                    datos.id_usuario = $scope.usuario.id
                    datos.fecha_inicio = new Date($scope.convertirFecha(datos.fecha_inicio));
                    datos.fecha_fin = new Date($scope.convertirFecha(datos.fecha_fin));
                    $scope.guardarAusencia($scope.empleado.id_ficha, datos, false)
                }

            }

            $scope.guardarAusencia = function (id, datos, otraAusencia) {
                var promesa = NuevaAusenciaEmpleado(id, datos)
                promesa.then(function (dato) {
                    $scope.ausencia = {}
                    $scope.cerrarDialogAusenciasVacaciones()
                    $scope.selectionday = []
                    $scope.SumaTotalHoras = "";
                    $scope.calendarCompensacion.fullCalendar('removeEvents');
                    SweetAlert.swal("Guardado!", dato.mensaje, "success");
                    otraAusencia ? $scope.generarPDFOtrasAusencias(datos) : $scope.generarPDFAusenciaMedica(datos)
                })
            }

            $scope.obtenerHistorialEmpleadoAusenciasMedicas = function (filtro, empleado) {
                $scope.historialEmpleadoAusencias = []
                if (filtro.tipo_ausencia == null || filtro.tipo_ausencia == undefined) {
                    filtro.tipo_ausencia = 0
                }
                var filtroAusencias = { inicio: 0, fin: 0, tipo_ausencia: filtro.tipo_ausencia }
                if (filtro) {
                    if (filtro.inicio) {
                        filtroAusencias.inicio = new Date($scope.convertirFecha(filtro.inicio))
                        filtroAusencias.fin = new Date($scope.convertirFecha(filtro.fin))
                    }
                }
                var promesa = HistorialEmpleadoAusencias($scope.empleado.id_ficha, filtroAusencias, 'RRHH_AUSMED')
                promesa.then(function (datos) {
                    datos.forEach(function (dato, index, array) {
                        if (dato.primera_baja) {
                            dato.baja = "Si"
                        } else {
                            dato.baja = "No"
                        }
                        if (index === (array.length - 1)) {
                            $scope.historialEmpleadoAusencias = datos
                            $scope.historialEmpleadoAusencias.trabajador = $scope.empleado
                        }
                    })
                })
            }
            $scope.obtenerHistorialEmpleadoOtrasAusencias = function (filtro) {
                if (filtro.tipo_ausencia == null || filtro.tipo_ausencia == undefined) {
                    filtro.tipo_ausencia = 0
                }
                var filtroAusencias = { inicio: 0, fin: 0, tipo_ausencia: filtro.tipo_ausencia }
                if (filtro.inicio) {
                    filtroAusencias.inicio = new Date($scope.convertirFecha(filtro.inicio))
                    filtroAusencias.fin = new Date($scope.convertirFecha(filtro.fin))
                }
                var promesa = HistorialEmpleadoAusencias($scope.empleado.id_ficha, filtroAusencias, 'RRHH_OTRAUS')
                promesa.then(function (datos) {

                    $scope.historialEmpleadoOtrasAusencias = datos

                })
            }

            //ausencias empresa
            $scope.obtenerHistorialEmpresaOtrasAusencias = function (filtro) {
                $scope.paginatorAusencia = Paginator();
                $scope.paginatorAusencia.column = "id";
                $scope.paginatorAusencia.direction = "desc";
                $scope.paginatorAusencia.itemsPerPage = 10;
                $scope.paginatorAusencia.callBack = $scope.recuperarDatosAusencias;
                if (filtro) {
                    filtro.inicio2 = filtro.inicio ? new Date($scope.convertirFecha(filtro.inicio)) : ""
                    filtro.fin2 = filtro.fin ? new Date($scope.convertirFecha(filtro.fin)) : ""
                    $scope.filtroOtrasAusencias = filtro;
                } else {
                    $scope.filtroOtrasAusencias = { id_empresa: $scope.usuario.id_empresa, inicio: "", fin: "", inicio2: "", fin2: "", tipo_ausencia: "", estado: "" }
                }
                $scope.paginatorAusencia.getSearch("", $scope.filtroOtrasAusencias, null);
                /* if (filtro.tipo_ausencia == null || filtro.tipo_ausencia == undefined) {
                    filtro.tipo_ausencia = 0
                }
                var filtroAusencias = { inicio: 0, fin: 0, tipo_ausencia: filtro.tipo_ausencia }
                if (filtro.inicio) {
                    filtroAusencias.inicio = new Date($scope.convertirFecha(filtro.inicio))
                    filtroAusencias.fin = new Date($scope.convertirFecha(filtro.fin))
                }
                 */
            }
            $scope.edicionAusenciaMedica = function (ausencia) {
                $scope.ausencia = ausencia
                $scope.ausencia.fecha_inicio = $scope.fechaATexto(ausencia.fecha_inicio)
                $scope.ausencia.fecha_fin = $scope.fechaATexto(ausencia.fecha_fin)
                $scope.cerrarDialogHistorialAusenciaMedica()
            }
            $scope.obtenerHistorialEmpresaAusenciasMedicas = function (filtro) {
                $scope.paginatorAusencia = Paginator();
                $scope.paginatorAusencia.column = "id";
                $scope.paginatorAusencia.direction = "desc";
                $scope.paginatorAusencia.itemsPerPage = "10";
                $scope.paginatorAusencia.callBack = $scope.recuperarDatosAusenciasMed;
                if (filtro) {
                    filtro.inicio2 = filtro.inicio ? new Date($scope.convertirFecha(filtro.inicio)) : ""
                    filtro.fin2 = filtro.fin ? new Date($scope.convertirFecha(filtro.fin)) : ""
                    $scope.filtroAusencias = filtro;
                } else {
                    $scope.filtroAusencias = { id_empresa: $scope.usuario.id_empresa, inicio: "", fin: "", inicio2: "", fin2: "", tipo_ausencia: "", estado: "" }
                }
                $scope.paginatorAusencia.getSearch("", $scope.filtroAusencias, null);

            }
            $scope.recuperarDatosAusenciasMed = function () {
                var promesa = HistorialEmpresaEmpleadosAusenciasMed($scope.paginatorAusencia, 'RRHH_AUSMED')
                promesa.then(function (datos) {
                    $scope.historialEmpresaAusencias = datos.ausencias
                    $scope.paginatorAusencia.setPages(datos.paginas);
                })
            }
            $scope.dibujarCabeceraPDFReporteBajasMedicas = (doc, desde, hasta, tipo, logo, titulo, pagina, totalPaginas, meta ) => {
                let x = 40, y = 30;
                doc.lineWidth(0.5);
                if (logo) {
                    doc.image(logo, x, y, { fit: [60, 75] });
                    x += 78
                }
                y += 5;
                doc.font('Helvetica-Bold', 8).fill('black')
                doc.text('CASA MATRIZ', x, y );
                 y += 12;
                doc.font('Helvetica',7);
                doc.text($scope.usuario.empresa.direccion ? $scope.usuario.empresa.direccion : "", x, y, { width: 465 });
                x = 40, y += 30
                doc.font('Helvetica-Bold', 10).fill('black')
                doc.text("REPORTE DE BAJAS MÉDICAS", 0, y, { align: "center" });
                y += 12;
                doc.font('Helvetica', 8);
                if(desde != "0" && hasta != "0"){
                    doc.text("Desde el "+ desde + " hasta el "+ hasta, 0, y, { align:"center" })
                }else{
                    if(desde != "0") doc.text( "Desde el " + desde, 0, y, { align:"center"})
                    if(hasta != "0") doc.text( "Hasta el " + hasta, 0, y, { align:"center"})
                }
                y += 15;
                doc.rect(40, y, 540, 12).stroke();
                doc.font('Helvetica-Bold', 6);
                doc.text("N°", 40, y + 4, { width: 25, align: "center"});
                doc.text("TRABAJADOR", 65, y + 4, { width: 80, align: "center"});
                doc.text("CAMPO", 145, y + 4, { width: 40, align: "center"});
                doc.text("TIPO BAJA", 185, y + 4, { width: 60, align: "center" });
                doc.text("DIAGNÓSTICO", 245, y + 4, { width: 110, align: "center" });
                doc.text("DESDE", 355, y + 4, { width: 35, align: 'center' });
                doc.text("HASTA", 390, y + 4, { width: 35, align: 'center' });
                doc.text("DÍAS", 425, y + 4, { width: 25, align: "center"});
                doc.text("PRIMERA BAJA", 450, y + 1, { width: 40, align: 'center' });
                doc.text("OBSERVACIÓN", 490, y + 4, { width: 90, align:"center"});

                doc.font('Helvetica-Bold', 6).text( pagina + " de "+ totalPaginas, 0, 750,{ align: "center" })
                doc.font('Helvetica', 5).text( meta, 0, 760, { align: "center" })
            }
            $scope.reportePDFBajasMedicas = () => {
                SweetAlert.swal({
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div><b>Recuperando registros</b>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                ObtenerBajasMedicas($scope.usuario.id_empresa, $scope.filtroAusencias.inicio, $scope.filtroAusencias.fin, $scope.filtroAusencias.tipo_ausencia, 1)
                .then( ({error, bajas, message, messageType, desde, hasta }) => {
                    if( error ) return SweetAlert.swal( "", message, messageType );
                    if( bajas && bajas.length === 0) return SweetAlert.swal("", "<b>No se encontraron registros</b><br>Intente seleccionando otro periodo", "info")
                    try {
                        SweetAlert.update({ html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div><b>Generando reporte<br></b><small>Por favor espere...</small>', })
                        convertUrlToBase64Image($scope.usuario.empresa.imagen, function (logo) { 
                            const doc = new PDFDocument({ compress: false, margin: 10 });
                            const stream = doc.pipe(blobStream());
                            doc.font('Helvetica', 8);
                            doc.lineGap(-1.7);
                            let y = 116, itemsPorPagina = 50, items = 0, pagina = 1, totalPaginas=Math.ceil(bajas.length/itemsPorPagina);
                            let meta = "Usuario: "+$scope.usuario.nombre_usuario+"        Fecha Impresión: "+$scope.formatoFechaHora(new Date())
                            let titulo = "REPORTE DE BAJAS MÉDICAS"
                            if( desde != "0" ) desde = (desde.split(' ')[0]).split('-').reverse().join('/');
                            if( hasta != "0" ) hasta = (hasta.split(' ')[0]).split('-').reverse().join('/');
                            $scope.dibujarCabeceraPDFReporteBajasMedicas(doc, desde, hasta, $scope.filtroAusencias.tipo_ausencia, logo, titulo, pagina, totalPaginas, meta );
                            for (let i = 0; i < bajas.length; i++) {
                                let { nombre_completo, campo, desde:fecha_inicio, hasta:fecha_fin, primera_baja, dias, tipo, observacion, diagnostico } = bajas[i]
                                if(i % 2 != 0 ) doc.rect(40, y + 1 , 542, 12).fill('#E4EAF9').fillColor('#000');
                                doc.font('Helvetica', 5);
                                doc.text(i + 1, 40, y + 3, { width: 25, align: "center"});
                                doc.text(nombre_completo ? nombre_completo : "", 65, y + 3, { width: 79 });
                                doc.text(campo ? campo : "", 145, y + 3, { width: 40, align: "center"});
                                doc.text(tipo ? tipo : "", 185, y + 3, { width: 60, align: "center" });
                                doc.text(diagnostico ? diagnostico.toUpperCase() : "", 245, y + 3, { width: 109 });
                                doc.text(fecha_inicio ? $scope.fechaATexto(fecha_inicio) : "", 355, y + 3, { width: 35, align: 'center' });
                                doc.text(fecha_fin ? $scope.fechaATexto(fecha_fin): "", 390, y + 3, { width: 35, align: 'center' });
                                doc.text(dias ? dias :  "", 425, y + 3, { width: 25, align: "center"});
                                doc.text(primera_baja ? "SI" : "NO" , 450, y + 3, { width: 40, align: 'center' });
                                doc.text(observacion ? observacion.toUpperCase() : "", 490, y + 3, { width: 89 });
                                y += 12;
                                items++;
                                if (items === itemsPorPagina) {
                                    if(i != bajas.length -1){
                                        doc.addPage({ margin: 0, compress:false, bufferPages: true });
                                        y = 116;
                                        items = 0;
                                        pagina++;
                                        $scope.dibujarCabeceraPDFReporteBajasMedicas(doc, desde, hasta, $scope.filtroAusencias.tipo_ausencia, logo, titulo, pagina, totalPaginas, meta );
                                    }
                                }
                            }
                            doc.end();
                            stream.on('finish', function () {
                                swal.close()
                                var fileURL = stream.toBlobURL('application/pdf');
                                window.open(fileURL, '_blank', 'location=no');
                            });
                        })
                    } catch (e) {
                        SweetAlert.swal("", "<b>Error al generar documento<b><br>"+e, "error")
                    }
                })
            }
            $scope.reporteEXCELBajasMedicas = () => {
                try {
                    SweetAlert.swal({
                        icon: 'info',
                        iconHtml: '<i class="fa fa-search size-icon"></i>',
                        html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div><b>Recuperando registros</b>',
                        allowEscapeKey: false,
                        allowOutsideClick: false
                    })
                    SweetAlert.showLoading()
                    blockUI.noOpen = true;
                    ObtenerBajasMedicas($scope.usuario.id_empresa, $scope.filtroAusencias.inicio, $scope.filtroAusencias.fin, $scope.filtroAusencias.tipo_ausencia, 0)
                    .then(({ error, bajas, message, messageType })=>{
                        if( error ) return SweetAlert.swal( "", message, messageType );
                        if( bajas && bajas.length === 0) return SweetAlert.swal("", "<b>No se encontraron registros</b><br>Intente seleccionando otro periodo", "info")
                        SweetAlert.update({ html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div><b>Generando reporte<br></b><small>Por favor espere...</small>', })
                        let data = [['NRO.', 'TRABAJADOR', 'CAMPO', 'CARGOS','LUGAR APORTE SEGURO', 'TIPO BAJA', 'DIAGNÓSTICO', 'DESDE', 'HASTA', 'DÍAS', 'PRIMERA BAJA',  'OBSERVACIÓN']]
                        for (let i = 0; i < bajas.length; i++) {
                            const { nombre_completo, campo, cargos, lugar_seguro, tipo, diagnostico, desde, hasta, dias, primera_baja, observacion } = bajas[i];
                            data.push([
                                i+1,
                                nombre_completo ? nombre_completo : "",
                                campo ? campo : "",
                                cargos ? cargos : "",
                                lugar_seguro ? lugar_seguro : "",
                                tipo ? tipo : "",
                                diagnostico ? diagnostico : "",
                                desde ? $scope.fechaATexto(desde): "",
                                hasta ? $scope.fechaATexto(hasta) : "",
                                dias ? dias : "",
                                primera_baja ? "SI" : "NO",
                                observacion ? observacion : ""
                            ]);
                        }
                        const ws_name = "SheetJS";
                        const wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                        ws['!cols'] = [
                            { wch: 6 }, //#
                            { wch: 30 }, // EMPLEADO
                            { wch: 16 }, // CAMPO
                            { wch: 20 }, // CARGOS
                            { wch: 20 }, // LUGAR APORTE
                            { wch: 20 }, // TIPO BAJA
                            { wch: 30 }, // DIAGNOSTICO
                            { wch: 12 }, // FECHA INICIO
                            { wch: 12 }, // FECHA FIN
                            { wch: 10 }, // DÍAS
                            { wch: 10 }, // PRIMERA BAJA
                            { wch: 30 } // OBSERVACIÓN
                        ];
                        wb.SheetNames.push(ws_name);
                        wb.Sheets[ws_name] = ws;
                        const wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                        return saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE BAJAS MÉDICAS.xlsx");
                    })
                    swal.close();
                } catch (e) {
                    SweetAlert.swal("", "<b>Ocurrió un error</b><br>"+e, "error")
                }
            }
            function orberByNombreTrabajador(ausenciaA, ausenciaB) {
                if (ausenciaA.ficha.empleado.persona.nombre_completo.toUpperCase() < ausenciaB.ficha.empleado.persona.nombre_completo.toUpperCase()) return -1;
                if (ausenciaA.ficha.empleado.persona.nombre_completo.toUpperCase() > ausenciaB.ficha.empleado.persona.nombre_completo.toUpperCase()) return 1;
                return 0;
            }
            /* $scope.obtenerlistaFondosArendir = function (filtro) {
                $scope.paginatorRendicion = Paginator();
                $scope.paginatorRendicion.column = "fecha";
                $scope.paginatorRendicion.direction = "desc";
                $scope.paginatorRendicion.itemsPerPage = 10;
                $scope.paginatorRendicion.callBack = $scope.obtenerlistaFondoArendir;
                if (filtro) {
                    $scope.filtro = filtro;
                } else {
                    $scope.filtro = {}
                }
                $scope.paginatorRendicion.getSearch("", $scope.filtro, null);
            } */

            $scope.obtenerHistorialEmpresaOtrasAusencias = function (filtro) {
                $scope.paginatorAusencia = Paginator();
                $scope.paginatorAusencia.column = "id";
                $scope.paginatorAusencia.direction = "desc";
                $scope.paginatorAusencia.itemsPerPage = 10;
                $scope.paginatorAusencia.callBack = $scope.recuperarDatosAusencias;
                if (filtro) {
                    filtro.inicio2 = filtro.inicio ? new Date($scope.convertirFecha(filtro.inicio)) : ""
                    filtro.fin2 = filtro.fin ? new Date($scope.convertirFecha(filtro.fin)) : ""
                    $scope.filtroOtrasAusencias = filtro;
                } else {
                    $scope.filtroOtrasAusencias = { id_empresa: $scope.usuario.id_empresa, inicio: "", fin: "", inicio2: "", fin2: "", tipo_ausencia: "", estado: "" }
                }
                $scope.paginatorAusencia.getSearch("", $scope.filtroOtrasAusencias, null);
                /* if (filtro.tipo_ausencia == null || filtro.tipo_ausencia == undefined) {
                    filtro.tipo_ausencia = 0
                }
                var filtroAusencias = { inicio: 0, fin: 0, tipo_ausencia: filtro.tipo_ausencia }
                if (filtro.inicio) {
                    filtroAusencias.inicio = new Date($scope.convertirFecha(filtro.inicio))
                    filtroAusencias.fin = new Date($scope.convertirFecha(filtro.fin))
                }
                 */
            }
            $scope.recuperarDatosAusencias = function () {
                var promesa = HistorialEmpresaEmpleadosAusencias($scope.paginatorAusencia, 'RRHH_OTRAUS')
                promesa.then(function (datos) {
                    $scope.TotalHoras = "00:00"
                    $scope.paginatorAusencia.setPages(datos.paginas);
                    $scope.historialEmpresaOtrasAusencias = datos.ausencias
                    let data = [...$scope.historialEmpresaOtrasAusencias]
                    data.forEach(function (x, i) {
                        var now = moment(x.fecha_inicio); //todays date
                        var end = moment(x.fecha_fin); // another date
                        let inicio = moment(x.fecha_inicio_solicitud); // another date
                        let fin = moment(x.fecha_fin_solicitud); // another date
                        let duracion = moment.duration(fin.diff(inicio));
                        $scope.historialEmpresaOtrasAusencias[i].horas = moment(duracion._data).format("HH:mm");
                        x.hours = moment(moment.duration(end.diff(now))._data).format("HH:mm");
                        $scope.TotalHoras = $scope.sumarTotalHorasAu(x.hours)

                    })
                })
            }
            $scope.sumarTotalHorasAu = function (hours) {
                var totalHoras = "";
                var timeHoras = $scope.TotalHoras.split(':')[0];
                var timeMinutos = $scope.TotalHoras.split(':')[1];
                var horas = hours.split(':')[0];
                var minutos = hours.split(':')[1];
                timeHoras = parseInt(timeHoras) + parseInt(horas);
                timeMinutos = parseInt(timeMinutos) + parseInt(minutos);
                if (timeMinutos >= 60) {
                    timeMinutos = timeMinutos - 60;
                    timeHoras = timeHoras + 1;
                }
                totalHoras = String("0" + timeHoras).slice(-2) + ':' + String("0" + timeMinutos).slice(-2) + ":00";

                return totalHoras;
            }
            $scope.dibujarCabeceraImpresionPDFSalidaPersona = function (doc, ausencia, imagenEmpresa) {
                doc.image(imagenEmpresa, 20, 10, { fit: [80, 80] });
                doc.font("Helvetica-Bold", 16);
                doc.text("SALIDA DEL PERSONAL", 0, 30, { align: "center" });
                doc.text(ausencia.estado.nombre, 0, 50, { align: "center" });
                doc.font("Helvetica-Bold", 8);
                doc.text("NOMBRE.:", 20, 80, { align: "left" });
                doc.text("CI.:", 20, 100, { align: "left" });
                doc.text("FECHA.:", 20, 120, { align: "left" });
                doc.text("SALIDA.:", 170, 120, { align: "left" });
                doc.text("LLEGADA.:", 300, 120, { align: "left" });
                doc.text("OBS.:", 440, 120, { align: "left" });
                doc.text("CONCEPTO.:", 20, 140, { align: "left" });
                doc.text("VEHICULO.:", 20, 160, { align: "left" });
                doc.text("AUTORIZADOR.:", 20, 180, { align: "left" });
                doc.font("Helvetica", 7);
                doc.text("Usuario.:" + $scope.usuario.persona.nombre_completo, 0, 200, { align: "right" });
                doc.text("Impresión.:" + $scope.fechaATexto(new Date()) + " Hrs. " + $scope.fechaATiempo(new Date()), 0, 210, { align: "right" });
            }
            $scope.generarPdfSalidaPersonal = function (ausencia) {
                convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {
                    var doc = new PDFDocument({ size: [612, 792], margins: { top: 10, bottom: 10, left: 20, right: 20 } });
                    var stream = doc.pipe(blobStream());
                    $scope.dibujarCabeceraImpresionPDFSalidaPersona(doc, ausencia, imagenEmpresa)
                    doc.font("Helvetica", 8);
                    doc.text(ausencia.ficha.empleado.persona.nombre_completo, 80, 80, { align: "left" });
                    doc.text(ausencia.ficha.empleado.persona.ci, 45, 100, { align: "left" });
                    doc.text($scope.fechaATexto(new Date(ausencia.fecha_inicio)), 65, 120, { align: "left" });
                    doc.text($scope.fechaATiempo(new Date(ausencia.fecha_inicio)), 220, 120, { align: "left" });
                    doc.text($scope.fechaATiempo(new Date(ausencia.fecha_fin)), 365, 120, { align: "left" });
                    doc.text(ausencia.observacion, 475, 120, { align: "left" });
                    doc.text(ausencia.tipoAusencia.nombre, 90, 140, { align: "left" });
                    doc.text(ausencia.vehiculo ? ausencia.vehiculo.nombre : "Sin vehiculo", 90, 160, { align: "left" });
                    doc.text(ausencia.autorizador ? ausencia.autorizador.persona.nombre_completo : "", 110, 180, { align: "left" });
                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                });
            }


            $scope.agregarTipoAusencia = function (clase, array) {
                if (clase.edit == true) {
                    $scope.guardarModificado(clase)
                } else {
                    array.push(clase)
                }
            }
            $scope.ModificarTipoAusencia = function (clase) {
                $scope.clase = {}
                clase.edit = true
                $scope.clase = clase
            }
            $scope.guardarModificado = function (clase) {
                clase.edit = false
                $scope.clase = {}
            }
            $scope.guardarClasesAusencias = function (array, tipo) {
                var promesa = GuardarClasesAusencias(array, tipo)
                promesa.then(function (dato) {
                    $scope.cerrarDialogTipoBaja()
                    $scope.cerrarDialogTipoAusencia()
                    $scope.obtenertiposAusenciaMedica()
                    $scope.obtenerTiposOtrasAusencias()
                    $scope.mostrarMensaje(dato.mensaje)

                })
            }
            //fin ausencias
            //inicio vacaciones
            $scope.obtenerConfiguracionVacaciones = function () {
                var promesa = ConfiguracionesVacacion()
                promesa.then(function (dato) {
                    $scope.configuracionesVacacion = dato
                })
            }


            $scope.obtenerHistorialGestionesVacacion = async function (empleado, tipo, beneficio) {
                $scope.totalVAplicadas = 0;
                $scope.totalVTomadas = 0;
                $scope.totalVRestantes = 0;
                var dato = await HistorialGestionesVacacion(empleado.id_ficha)
                $scope.historialGestionesVacacion = dato
                var fechaActual = new Date()
                if (empleado.fecha_expiracion) {
                    fechaActual = new Date(empleado.fecha_expiracion)
                }

                var fechaAnterior = new Date(empleado.fecha_inicio)
                var datow = $scope.diferenciaEntreDiasEnDias(fechaAnterior, fechaActual)
                var años = Math.round(datow / 360)
                $scope.vacacion.aniosDisponibles = años
                $scope.vacacion.historial = $scope.historialGestionesVacacion;
                $scope.diasDisponibles = 0
                $scope.historialGestionesVacacion.forEach(function (historial, index, array) {
                    if (historial.anio <= años) {
                        $scope.diasDisponibles += (historial.aplicadas - historial.tomadas)
                    }
                    $scope.totalVAplicadas += historial.aplicadas;
                    $scope.totalVTomadas += historial.tomadas;
                    var totalRestantev = historial.aplicadas - historial.tomadas;
                    $scope.totalVRestantes += totalRestantev;
                });
                if (datow > 360) {
                    $scope.usarVacacion = true
                    if (tipo) {
                        $scope.obtenerVehiculosViaje();
                        $scope.obtenerTiposOtrasAusencias();
                        $scope.obtenertiposAusenciaMedica();
                        $scope.abrirPopup($scope.idModalAusenciasVacaciones);
                    }
                } else {
                    $scope.usarVacacion = false
                    if (tipo) {
                        $scope.obtenerVehiculosViaje();
                        $scope.obtenerTiposOtrasAusencias();
                        $scope.obtenertiposAusenciaMedica();
                        $scope.abrirPopup($scope.idModalAusenciasVacaciones);

                        /*   $scope.$apply(function () {
                              $scope.mostrarMensaje("no cuenta con la antiguedad para usar vacaciones")
                          }) */
                        setTimeout(function () {
                            $scope.$apply(function () {
                                var m = "El empleado no cuenta con la antiguedad para asignar vacaciones"
                                $scope.mostrarMensaje(m)
                            });
                        }, 2000)
                    }
                }
                if (beneficio) {
                    var anio_fin_contrato = new Date($scope.empleado.fecha_expiracion).getFullYear()
                    $scope.beneficio.totalV = 0
                    var tomadas = 0
                    $scope.beneficio.meses = $scope.tiempoTrabajado.meses;
                    $scope.beneficio.dias = $scope.tiempoTrabajado.dias;
                    $scope.beneficio.anios = $scope.historialGestionesVacacion.reduce(function (anios, gestion) {
                        tomadas += gestion.tomadas
                        if (gestion.gestion < anio_fin_contrato) {
                            if (gestion.tomadas < gestion.aplicadas) {
                                anios++

                            }
                        } else if (gestion.gestion == anio_fin_contrato) {
                            if ($scope.beneficio.meses == 0) {
                                anios++
                            } else {
                                anios > 0 ? anios-- : anios

                            }
                        }
                        return anios
                    }, 0);


                    /*  $scope.beneficio.totalV = $scope.historialGestionesVacacion.reduce(function (totalV, gestion, index, array) {
                         if (index < $scope.beneficio.anios) {
                             if (gestion.tomadas < gestion.aplicadas) {
                                 totalV += (gestion.aplicadas)
                             }
                         } else if (index == $scope.beneficio.anios) {
                             var diasmeses = ($scope.beneficio.meses * (gestion.aplicadas)) / 12
                             totalV += diasmeses
                             var dias = ($scope.beneficio.dias * (gestion.aplicadas)) / 360
                             totalV += dias
                             if ($scope.beneficio.meses == 0) {
                                 if (gestion.gestion <= anio_fin_contrato) {
                                     if (gestion.tomadas < gestion.aplicadas) {
                                         totalV += (gestion.aplicadas)
                                     }
                                 }
                             }
                             totalV = Math.round(totalV)
                         }
                         return totalV
             
                     }, 0); */
                    $scope.beneficio.totalV = $scope.historialGestionesVacacion.reduce(function (totalV, historial, index) {
                        let aplicadas = historial.aplicadas
                        let tomadas = historial.tomadas
                        if (index == $scope.tiempoTrabajado.anios) {
                            aplicadas = Math.round(($scope.tiempoTrabajado.meses * aplicadas) / 12
                                + ($scope.tiempoTrabajado.dias * aplicadas) / 360);
                            //tomadas = 0;
                        } else if (index > $scope.tiempoTrabajado.anios) {
                            aplicadas = 0
                            tomadas = 0
                        }
                        var totalRestantev = aplicadas - tomadas;
                        return totalV += totalRestantev
                    }, 0);
                    // $scope.beneficio.totalV -= tomadas
                }
                $scope.$evalAsync()
            }
            $scope.agregarConceptoEdicion = function (clase) {
                if (clase.nombre && clase.nombre_corto) {
                    if ($scope.tipo_edicion.clases.indexOf(clase) == -1) {
                        clase.habilitado = true;
                        $scope.tipo_edicion.clases.push(clase);
                    }
                    $scope.clase = {}
                }
            }
            $scope.agregarConductor = function (conductor) {
                conductor.habilitado = true
                $scope.choferesViaje.push(conductor);
                $scope.conductor = {}
            }
            $scope.editarConductor = function (conductor) {
                $scope.conductor = conductor
            }
            $scope.filtrarConductor = function (tipo) {
                if (tipo) {
                    $scope.tipoConductor = { id_empleado: tipo }
                } else {
                    $scope.tipoConductor = {}
                }

            }
            $scope.guardarConductores = function () {
                var promesa = GuardarConductoresEmpresa($scope.usuario.id_empresa, $scope.choferesViaje)
                promesa.then(function (dato) {
                    $scope.mostrarMensaje(dato.mensaje)
                    $scope.obtenerChoferesViaje()
                    $scope.cerrarDialogConductoresViaje()
                })
            }
            $scope.modificarConceptoEdicion = function (clase) {
                $scope.clase = clase;
            }

            $scope.modificarConceptoEdicionVehiculo = function (clase) {
                var datosVehiculo = clase.nombre.split("-")
                clase.vehiculo = datosVehiculo[0]
                clase.placa = datosVehiculo[1]
                $scope.clase = clase;
            }

            $scope.removerConceptoEdicion = function (clase) {
                clase.eliminado = true;
            }

            $scope.guardarConceptoEdicion = function (tipo) {
                blockUI.start();
                Tipos.update({ id_tipo: tipo.id }, tipo, function (res) {
                    var promesa = ClasesTipo(tipo.nombre_corto);
                    promesa.then(function (entidad) {
                        $scope.tipo_edicion = entidad

                        if (entidad.nombre_corto == "RRHH_CARGO") {
                            var cargos = entidad.clases
                            $scope.listaCargos = entidad
                            $scope.llenarCargos(cargos)
                            if ($scope.ficha.cargos) {
                                $scope.seleccionarCargos($scope.ficha.cargos)
                            }
                        }

                        blockUI.stop();
                        $scope.cerrarDialogConceptoEdicion();
                        $scope.mostrarMensaje('Guardado Exitosamente!');
                    });
                });
            }
            $scope.guardarConceptoEdicionVehiculo = function (tipo) {
                blockUI.start();
                Tipos.update({ id_tipo: tipo.id }, tipo, function (res) {
                    var promesa = ClasesTipo(tipo.nombre_corto);
                    promesa.then(function (entidad) {
                        tipo = entidad
                        blockUI.stop();
                        $scope.cerrarDialogVehiculosViaje();
                        $scope.mostrarMensaje('Guardado Exitosamente!');
                    });
                });
            }
            $scope.CalcularDiferenciaDiasVacacion = function (vacacion, empleado) {
                vacacion.dias = 0
                vacacion.dias_descuento = 0
                vacacion.domingos = 0
                vacacion.sabados = 0

                var a = vacacion.fecha_inicio
                var b = vacacion.fecha_fin
                $scope.previewGestiones = [];
                if (a) a = new Date($scope.convertirFecha(a))
                if (b) b = new Date($scope.convertirFecha(b))
                if (a && b) {
                    if (vacacion.fecha_inicio.length >= 9 && vacacion.fecha_fin.length >= 9)
                        var rango = getDates(a, b);
                    /*          $scope.ListaDiasFeriado.concat(rango) */
                    rango.forEach(function (fecha, index, array) {
                        if (vacacion.sabado) {
                            var d = new Date(fecha);
                            if ((d.getDay() == 0)) {
                                vacacion.domingos += 1
                            }
                            var a = $scope.ListaDiasFeriado.indexOf(fecha)
                            if (a != -1) {
                                vacacion.dias_descuento += 1
                            }
                            if (index === (array.length - 1)) {
                                $scope.CalcularDiferenciaDiasV(vacacion, empleado)
                            }
                        } else {
                            var d = new Date(fecha);
                            if ((d.getDay() == 0)) {
                                vacacion.domingos += 1
                            }
                            if ((d.getDay() == 6)) {
                                vacacion.sabados += 1
                            }
                            var a = $scope.ListaDiasFeriado.indexOf(fecha)
                            var fechaFeriado = new Date(fecha)
                            if (a != -1 && fechaFeriado.getDay() != 6) {
                                vacacion.dias_descuento += 1
                            }
                            if (index === (array.length - 1)) {
                                $scope.CalcularDiferenciaDiasV(vacacion, empleado)
                            }
                        }
                    });


                    var gestiones = ""
                    $scope.vacacionPrev = {};
                    angular.copy(vacacion, $scope.vacacionPrev);
                    vacacion.historial.forEach(function (historial, index, array) {
                        if (historial.anio <= $scope.vacacionPrev.aniosDisponibles) {
                            var restante = historial.aplicadas - historial.tomadas
                            if (restante != 0) {
                                var tomadas = 0
                                if ($scope.vacacionPrev.dias >= restante) {
                                    $scope.vacacionPrev.dias = $scope.vacacionPrev.dias - restante
                                    tomadas = restante + historial.tomadas
                                } else {

                                    tomadas = $scope.vacacionPrev.dias + historial.tomadas
                                    $scope.vacacionPrev.dias = 0
                                }
                                if (tomadas != 0) {
                                    restantes = (historial.aplicadas - tomadas) + " días de la gestion " + historial.gestion + "-" + (historial.gestion + 1)
                                    gestiones += historial.gestion + "-" + (historial.gestion + 1) + ", ";

                                    $scope.previewGestiones.push({ gestion: historial.gestion + "-" + (historial.gestion + 1), saldo: (historial.aplicadas - tomadas), tomadas: tomadas });
                                }
                            }
                        }
                    });


                }

            }

            $scope.cambioTipoVacacionFechas = function (tipo, vacacion) {
                if (vacacion.fecha_inicio && vacacion.fecha_fin) {
                    var fechaInicio = new Date($scope.convertirFecha(vacacion.fecha_inicio));
                    var fechaFin = new Date($scope.convertirFecha(vacacion.fecha_fin));
                    var dato = $scope.diferenciaEntreDiasEnDias(fechaInicio, fechaFin)
                    if (dato == 0) {
                        if (tipo == "inicio") {
                            if (vacacion.inicio_tipo) {
                                vacacion.fin_tipo = true
                            } else if (!vacacion.inicio_tipo) {
                                vacacion.fin_tipo = false
                            }
                        } else if (tipo == "fin") {
                            if (vacacion.fin_tipo) {
                                vacacion.inicio_tipo = true
                            } else if (!vacacion.fin_tipo) {
                                vacacion.inicio_tipo = false
                            }
                        }
                    }
                }
            }

            $scope.fechaATextoYMD = function (fecha) {
                fech = new Date(fecha)
                var valor = (fech.getMonth() + 1)
                if (valor < 10) {
                    valor = "0" + valor
                }
                var valor2 = fech.getDate()
                if (valor2 < 10) {
                    valor2 = "0" + valor2
                }
                if (isNaN(valor)) {
                } else {
                    fecha = fech.getFullYear() + "/" + valor + "/" + valor2;
                }
                return fecha
            }

            $scope.verificarFeriadoV = function (fechaRetornoN, fechaRer) {
                // verificando feriados de 2 dias
                var fechaRetornoTexto = $scope.fechaATextoYMD(fechaRetornoN);
                var fechaFeriadoIndex = $scope.ListaDiasFeriado.indexOf(fechaRetornoTexto);
                var feriadoV = 0;
                if (fechaFeriadoIndex != -1) {
                    feriadoV = 1;
                    var fechaRetornoC = new Date(fechaRer);
                    fechaRetornoC.setDate(fechaRetornoN.getDate() + 1);
                    var fechaRetornoTexto2 = $scope.fechaATextoYMD(fechaRetornoC);
                    var fechaFeriadoIndex2 = $scope.ListaDiasFeriado.indexOf(fechaRetornoTexto2);
                    if (fechaFeriadoIndex2 != -1) {
                        feriadoV += 1;
                    }
                }
                return feriadoV;
            }

            $scope.CalcularDiferenciaDiasV = function (vacacion, empleado) {
                if (vacacion.fecha_inicio && vacacion.fecha_fin) {
                    var fechaInicio = new Date($scope.convertirFecha(vacacion.fecha_inicio));
                    var fechaFin = new Date($scope.convertirFecha(vacacion.fecha_fin));
                    var dato = $scope.diferenciaEntreDiasEnDias(fechaInicio, fechaFin)
                    if (dato == 0) {
                        dato = 0;
                        if (!vacacion.inicio_tipo && !vacacion.fin_tipo) {
                            dato = 0.5;
                        }
                    }
                    vacacion.dias = (dato + 1) - (vacacion.dias_descuento + vacacion.domingos + vacacion.sabados)
                    if (!vacacion.inicio_tipo && !vacacion.fin_tipo) {
                        vacacion.dias = vacacion.dias - 1
                    } else if (vacacion.inicio_tipo && !vacacion.fin_tipo) {
                        vacacion.dias = vacacion.dias - 0.5
                    } else if (!vacacion.inicio_tipo && vacacion.fin_tipo) {
                        vacacion.dias = vacacion.dias - 0.5
                    } else if (vacacion.inicio_tipo && vacacion.fin_tipo) {
                        vacacion.dias = vacacion.dias
                    }

                    var fechaRer = new Date().setTime(new Date($scope.convertirFecha(vacacion.fecha_fin)).getTime() + 1000 * 60 * 60 * 24);
                    var fechaRetornoN = new Date(fechaRer);
                    var fechaRerDay = fechaRetornoN.getDay();

                    // Domingo 0  Sábado 6
                    if (empleado.genero == "MASCULINO") {
                        if (fechaRerDay == 0) {
                            // sumar un dia
                            fechaRetornoN.setDate(fechaRetornoN.getDate() + 1);
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + cantFeriado);
                            }
                        }
                        if (fechaRerDay == 1) {
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + cantFeriado);
                            }
                        }
                        if (fechaRerDay == 2) {
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + cantFeriado);
                            }
                        }
                        if (fechaRerDay == 3) {
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + cantFeriado);
                            }
                        }
                        if (fechaRerDay == 4) {
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + cantFeriado);
                            }
                        }
                        if (fechaRerDay == 5) {
                            // sumar tres dias
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + 3);
                            }
                        }
                        if (fechaRerDay == 6) {
                            // sumar dos dias
                            var fechaRetornoC2 = new Date(fechaRer);
                            fechaRetornoC2.setDate(fechaRetornoN.getDate() - 1);
                            var fechaRetornoTexto3 = $scope.fechaATextoYMD(fechaRetornoC2);
                            var fechaFeriadoIndex3 = $scope.ListaDiasFeriado.indexOf(fechaRetornoTexto3);
                            if (fechaFeriadoIndex3 != -1) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + 2);
                            }
                        }
                    } else {
                        if (fechaRerDay == 0) {
                            // sumar un dia
                            fechaRetornoN.setDate(fechaRetornoN.getDate() + 1);
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + cantFeriado);
                            }
                        }
                        if (fechaRerDay == 1) {
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + cantFeriado);
                            }
                        }
                        if (fechaRerDay == 2) {
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + cantFeriado);
                            }
                        }
                        if (fechaRerDay == 3) {
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + cantFeriado);
                            }
                        }
                        if (fechaRerDay == 4) {
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + cantFeriado);
                            }
                        }
                        if (fechaRerDay == 5) {
                            // sumar tres dias
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + 3);
                            }
                        }
                        if (fechaRerDay == 6) {
                            // sumar dos dias
                            fechaRetornoN.setDate(fechaRetornoN.getDate() + 2);
                            var cantFeriado = $scope.verificarFeriadoV(fechaRetornoN, fechaRer);
                            if (cantFeriado > 0) {
                                fechaRetornoN.setDate(fechaRetornoN.getDate() + cantFeriado);
                            }
                        }
                    }

                    vacacion.fecha_Retorno = (!vacacion.fin_tipo) ? vacacion.fecha_fin : $scope.fechaATexto(fechaRetornoN)
                    vacacion.dias_reales = dato + 1;
                }
            }
            $scope.crearNuevaVacacion = function (datos) {
                if (datos.dias <= $scope.diasDisponibles) {
                    datos.fecha_inicio = new Date($scope.convertirFecha(datos.fecha_inicio));
                    datos.fecha_fin = new Date($scope.convertirFecha(datos.fecha_fin));
                    if (!datos.id) {
                        datos.id_usuario = $scope.usuario.id
                        datos.fecha_creacion = new Date()
                    }
                    var promesa = NuevaVacacionEmpleado($scope.empleado.id_ficha, datos)
                    promesa.then(function (dato) {
                        $scope.imprimirReciboVacacion(datos, $scope.empleado.nombre_completo, $scope.empleado.fecha_inicio, dato.gestiones, dato.restantes)
                        $scope.cerrarDialogAusenciasVacaciones()
                        $scope.obtenerRecursosHumanos($scope.filtro)
                        $scope.mostrarMensaje(dato.mensaje)
                    })
                } else {
                    $scope.mostrarMensaje("El empleado solo cuenta con " + $scope.diasDisponibles + " dias disponbles para asignar vacaciones")
                }
            }
            $scope.editarVacacionEmpleado = async function (datos) {
                try {
                    $scope.vacacion = datos
                    $scope.vacacion.fecha_inicio = $scope.fechaATexto($scope.vacacion.fecha_inicio)
                    $scope.vacacion.fecha_fin = $scope.fechaATexto($scope.vacacion.fecha_fin)
                    let dato = await HistorialGestionesVacacion($scope.empleado.id_ficha)
                    let fechaActual = new Date()
                    if ($scope.empleado.fecha_expiracion) {
                        fechaActual = new Date($scope.empleado.fecha_expiracion)
                    }
                    let fechaAnterior = new Date($scope.empleado.fecha_inicio)
                    let datow = $scope.diferenciaEntreDiasEnDias(fechaAnterior, fechaActual)
                    let años = Math.round(datow / 360)
                    $scope.vacacion.aniosDisponibles = años
                    $scope.vacacion.historial = dato;
                    let restante = 0
                    let dias = $scope.vacacion.dias
                    for (const historial of $scope.vacacion.detalleDescuentosVacacionHistorial) {
                        let vacacionh = $scope.vacacion.historial.find(x => {
                            return x.id == historial.id_historial_vacacion
                        })
                        dias = restante == 0 ? dias : restante
                        if (historial.historialVacacion.tomadas > dias) {
                            tomadas = historial.historialVacacion.tomadas - dias
                            restante = 0
                        } else {
                            restante = dias - historial.historialVacacion.tomadas
                            tomadas = historial.historialVacacion.tomadas - (dias - restante)
                        }
                        vacacionh.tomadas = tomadas
                    }
                    $scope.CalcularDiferenciaDiasVacacion($scope.vacacion, $scope.empleado)
                    $scope.cerrarDialogHitorialVacaciones()
                } catch (error) {
                    console.log(error)
                }
                $scope.$evalAsync()
            }
            $scope.eliminarVacacionEmpleado2 = function (vac) {
                var promesa = EliminarVacacionEmpleado(vac.id)
                promesa.then(function (res) {
                    $scope.mostrarMensaje(res.mensaje)
                    $scope.prorrateoVacaciones(false)
                    $scope.obtenerHistorialEmpleadVacacion($scope.filtroVacacion)
                })
            }
            $scope.eliminarVacacionEmpleado = function (vac) {
                // abrir condicion mensaje ==========
                SweetAlert.swal({
                    title: "esta seguro de eliminar el detalle?",
                    text: "",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si',
                    cancelButtonText: "No"
                }).then(function (result) {
                    if (result.value) {
                        $scope.eliminarVacacionEmpleado2(vac);
                    }
                });
                // $scope.abrirPopup($scope.idModalImpresionDetalleAlerta);

            }
            $scope.obtenerHistorialEmpleadVacacion = function (filtro) {
                var filtroVacaciones = { inicio: 0, fin: 0 }
                if (filtro.inicio) {
                    filtroVacaciones.inicio = new Date($scope.convertirFecha(filtro.inicio))
                    filtroVacaciones.fin = new Date($scope.convertirFecha(filtro.fin))

                }
                var promesa = HistorialEmpleadoVacaciones($scope.empleado.id_ficha, filtroVacaciones)
                promesa.then(function (datos) {
                    $scope.historialEmpleadoVacaciones = datos
                })
            }

            $scope.obtenerHistorialEmpresaVacacion = function (filtro) {
                var filtroVacaciones = { inicio: 0, fin: 0, estado: filtro.estado }
                if (filtro.inicio && filtro.fin) {
                    filtroVacaciones.inicio = new Date($scope.convertirFecha(filtro.inicio))
                    filtroVacaciones.fin = new Date($scope.convertirFecha(filtro.fin))
                }

                // if (filtro.estado) {
                //     filtroVacaciones.estado = filtro.estado
                // }
                var promesa = HistorialEmpresaVacaciones($scope.usuario.id_empresa, filtroVacaciones)
                promesa.then(function (datos) {
                    if (datos.length > 0) {
                        datos.forEach(function (dato, index, array) {
                            dato.diasRestantes = 0
                            for (var i = 0; i < dato.ficha.historialVacaciones.length; i++) {
                                var element = dato.ficha.historialVacaciones[i];
                                dato.diasRestantes += element.aplicadas - element.tomadas
                            }
                            if (index === (array.length - 1)) {
                                $scope.historialEmpresaVacaciones = datos
                            }
                        })
                    } else {
                        $scope.historialEmpresaVacaciones = [];
                    }

                })
            }
            //fin vacaciones
            //selecionar empleados

            $scope.selecionarEmpleados = function (empleado, todos, model) {
                if (model) {
                    $scope.paginator.itemsPerPage = "0";
                    $scope.empleadosSeleccionados = []
                } else {
                    $scope.paginator.itemsPerPage = "10";
                }
                if (todos) {
                    $scope.buscarRecursosHumanos(true, empleado, todos, model)
                } else {
                    if (empleado.select == false) {
                        empleado.select = false
                        $scope.empleadosSeleccionados.splice($scope.empleadosSeleccionados.indexOf(empleado))
                    } else {
                        empleado.select = true
                        $scope.empleadosSeleccionados.push(empleado)
                    }

                }
            }

            //fin seleccion empleados

            $scope.generarPdfEmpleados = function (empleados) {
                var listaEmpleados = empleados;

                var doc = new PDFDocument({ size: [612, 792], compress: false, margin: 10 });
                var stream = doc.pipe(blobStream());

                var y = 100, itemsPorPagina = 32, items = 0, pagina = 1, totalPaginas = Math.ceil(listaEmpleados.length / itemsPorPagina);

                $scope.dibujarCabeceraImpresionPDFRRHH(doc, listaEmpleados, pagina, totalPaginas);
                var index = 0;
                for (var i = 0; i < listaEmpleados.length; i++) {
                    index = index + 1;

                    doc.font("Helvetica", 7);
                    doc.text(index, 40, y);
                    doc.text(listaEmpleados[i].nombre_completo, 60, y, { width: 140 });
                    doc.text(listaEmpleados[i].ci, 210, y);
                    doc.text(listaEmpleados[i].extension, 260, y);
                    //doc.text(listaEmpleados[i].extension, 270, y);
                    var cargos = [];
                    for (let j = 0; j < listaEmpleados[i].cargos.length; j++) {
                        const element = listaEmpleados[i].cargos[j];
                        cargos.push(element)
                    }
                    cargos.join(",");
                    doc.text(cargos, 325, y, { width: 140 });
                    var fecha = new Date(listaEmpleados[i].fecha_inicio);
                    doc.text($scope.fechaATexto(fecha), 465, y);

                    y = y + 20;

                    items = items + 1;

                    if (items == itemsPorPagina) {
                        doc.addPage({ size: [612, 792], margin: 10 });
                        y = 100;
                        items = 0;
                        pagina = pagina + 1;
                        $scope.dibujarCabeceraImpresionPDFRRHH(doc, listaEmpleados, pagina, totalPaginas);
                    }
                }

                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
                blockUI.stop();
            }

            $scope.dibujarCabeceraImpresionPDFRRHH = function (doc, listaEmpleados, pagina, totalPaginas) {

                doc.font("Helvetica-Bold", 14);
                doc.text("LISTA DE TRABAJADORES", 0, 50, { align: 'center' });

                doc.font("Helvetica-Bold", 8);
                doc.text("N°", 40, 80);
                doc.text("Nombre Completo", 60, 80);
                doc.text("C.I.", 210, 80);
                doc.text("Extencion", 260, 80);
                doc.text("Campo", 350, 80);
                doc.text("Fecha Inicio", 460, 80);

                var usuario = $scope.usuario.nombre_usuario
                var fecha = new Date();
                doc.font("Helvetica", 8);
                doc.text("Usuario: " + usuario + " - " + $scope.fechaATexto(fecha) + " - " + fecha.getHours() + ":" + fecha.getMinutes() + ":" + fecha.getSeconds(), 430, 750)

                doc.text("Pagina " + pagina + " de " + totalPaginas, 0, 760, { align: 'center' });
            }

            //exportar en  y pdf empleados
            $scope.generarExcelEmpleados = function (empleados, configuracion) {
                blockUI.start();
                var data = [["N°", "ACTIVO", "NOMBRE COMPLETO", "EMPLEADO",
                    "CI", "EXTENSIÓN", "TIPO CONTRATO", "CAMPO", "CARGO", "FECHA INICIO", "AFP", "NUA-CUA", "JUBILADO", "REGIONAL DE SEGURO"]];
                var index = 0;
                for (var i = 0; i < empleados.length; i++) {
                    var columns = [];
                    index = index + 1
                    columns.push(index);
                    var activo = "";
                    if (empleados[i].activo == true) {
                        activo = "Activo";
                    } else if (empleados[i].activo == false) {
                        activo = "Inactivo"
                    } else {
                        activo = "";
                    }
                    columns.push(activo);
                    // columns.push(empleados[i].codigo);
                    columns.push(empleados[i].nombre_completo);
                    columns.push(empleados[i].designacion_empresa);
                    columns.push(empleados[i].ci);
                    columns.push(empleados[i].extension);
                    columns.push(empleados[i].tipoContrato);
                    columns.push(empleados[i].campamento);
                    var cargostexto = empleados[i].cargos.join(',');
                    columns.push(cargostexto);
                    columns.push($scope.fechaATexto(empleados[i].fecha_inicio));
                    // columns.push(empleados[i].fecha_expiracion ? empleados[i].fecha_expiracion : "");
                    columns.push(empleados[i].aporte_seguro_nombre ? empleados[i].aporte_seguro_nombre : "");
                    columns.push(empleados[i].nua_seguro_largo_plazo ? empleados[i].nua_seguro_largo_plazo : "");
                    columns.push(empleados[i].jubilacion ? empleados[i].fecha_jubilacion ? fechaATexto(empleados[i].fecha_jubilacion) : "" : '');
                    columns.push(empleados[i].lugar_seguro_salud ? empleados[i].lugar_seguro_salud : "");
                    //iu.push(i)
                    /*  empleados[i].cargos.forEach(function (cargo, index, array) {
                         if (cargostexto == "") {
                             cargostexto = cargo
                         } else {
                             cargostexto = cargostexto + "-" + cargo.cargo.nombre
                         }
                     }); */
                    data.push(columns);
                }


                var ws_name = "SheetJS";
                var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-RRHH.xlsx");
                blockUI.stop();
            }
            //fin exportar en  y pdf cuentas bancarias

            $scope.generarExcelEmpleadosCuentasBancarias = function (empleados, configuracion) {
                blockUI.start();
                var data = [["CODIGO", "NOMBRE COMPLETO", "BANCO", "CUENTA"]];
                var index = 0;
                for (var i = 0; i < empleados.length; i++) {
                    var columns = [];
                    index = index + 1
                    columns.push(empleados[i].codigo);
                    columns.push(empleados[i].nombre_completo);
                    columns.push(empleados[i].banco_cuenta);
                    columns.push(empleados[i].numero_cuenta);
                    data.push(columns);
                }

                var ws_name = "SheetJS";
                var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-CUENTAS-BANCARIAS.xlsx");
                blockUI.stop();
            }
            //fin exportar en  y pdf cuentas bancarias

            $scope.generarExcelTelefonosEmpleados = (empleados) => {
                blockUI.start();
                const data = [
                    [
                        "N°",
                        "ACTIVO",
                        "NOMBRE COMPLETO",
                        "CI",
                        "EXTENSIÓN",
                        "TELÉFONO FIJO",
                        "CELULAR",
                        "ÁREA",
                        "RESIDENCIA",
                        "BANCO",
                        "CTA BANCARIA"
                    ]
                ];
                for (let index = 0; index < empleados.length; index++) {
                    const columns = [];
                    const activo = (empleados[index].activo ? "Activo" : "Inactivo");
                    columns.push((index + 1));
                    columns.push(activo);
                    columns.push(empleados[index].nombre_completo);
                    columns.push(empleados[index].ci);
                    columns.push(empleados[index].extension);
                    columns.push(empleados[index].telefono);
                    columns.push(empleados[index].telefono_movil);
                    columns.push(empleados[index].area);
                    columns.push(empleados[index].residencia);
                    columns.push(empleados[index].banco_cuenta);
                    columns.push(empleados[index].numero_cuenta);
                    data.push(columns);
                }
                const ws_name = "SheetJS";
                const wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                ws['!cols'] = [
                    { wch: 6 }, //#
                    { wch: 12 }, // activo
                    { wch: 30 }, // EMPLEADO
                    { wch: 16 }, // CI
                    { wch: 8 }, // extencion
                    { wch: 16 }, // telefono fijo
                    { wch: 16 } // celular
                ];
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                const wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-TELÉFONOS-RRHH.xlsx");
                blockUI.stop();
            }

            $scope.reporteRRHHEmpleado = function () {

                blockUI.start();
                var idEmpresa = $scope.usuario.id_empresa;
                var promesa = rrhhReportesExcel(idEmpresa)
                promesa.then(function (data) {
                    var empleados = data.reportes;

                    var data = [["CÓDIGO", "APELLIDO PATERNO", "APELLIDO MATERNO", "PRIMER NOMBRE", "SEGUNDO NOMBRE",
                        "CI", "EXTENSIÓN", "TIPO CONTRATO", "FECHA NAC.", "SEXO", "TELEFONO 1", "TELEFONO 2",
                        "CELULAR", "ESTILO DE VIDA", "CARGO ACTUAL", "EMPRESA", "TELEFONO EMP.",
                        "CAMPAMENTO", "RIESGOS DE LOS PROCESOS DE TRABAJO", "CIUDAD REF", "ZONA REF.",
                        "CALLE/AV-REF.", "Nro REF.", "TELEFONOS REF.", "CELULAR REF.", "NOMBRES REF."
                        , "FECHA INICIO", "SALARIO BASICO", "MATRICULA SEGURO", "ESTADO", "FECHA RETIRO"]];
                    var index = 0;
                    for (var i = 0; i < empleados.length; i++) {
                        var empleado = empleados[i];
                        var columns = [];

                        columns.push(empleado.codigo);
                        columns.push(empleado.persona.apellido_paterno);
                        columns.push(empleado.persona.apellido_materno);
                        columns.push(empleado.persona.nombres);
                        columns.push(empleado.persona.segundo_nombre);
                        columns.push(empleado.persona.ci);
                        columns.push(empleado.extension.nombre);
                        var maxIdFicha = 0;
                        var datosFicha = [];
                        for (let i = 0; i < empleado.empleadosFichas.length; i++) {
                            const empleFicha = empleado.empleadosFichas[i];
                            if (maxIdFicha < empleFicha.id) {
                                maxIdFicha = empleFicha.id;
                                datosFicha = empleFicha
                            }
                        }
                        columns.push(datosFicha.tipoContrato.nombre);
                        columns.push($scope.fechaATexto(empleado.persona.fecha_nacimiento));
                        columns.push(empleado.persona.genero.nombre_corto)
                        if (empleado.persona.telefono) {
                            columns.push(empleado.persona.telefono);
                        } else {
                            columns.push("");
                        }
                        columns.push("");
                        if (empleado.persona.telefono_movil) {
                            columns.push(empleado.persona.telefono_movil);
                        } else {
                            columns.push("");
                        }
                        columns.push("Normal");
                        columns.push(empleado.cargo);
                        columns.push(empleado.empresa.razon_social)
                        if (empleado.empresa.telefono1) {
                            columns.push(empleado.empresa.telefono1)
                        } else if (empleado.empresa.telefono2) {
                            columns.push(empleado.empresa.telefono2)
                        } else if (empleado.empresa.telefono3) {
                            columns.push(empleado.empresa.telefono3)
                        } else {
                            columns.push("")
                        }
                        columns.push(empleado.campo.nombre)
                        columns.push("RIESGOS");
                        if (datosFicha.personaReferencia) {
                            var ciudad = datosFicha.personaReferencia.direccion_ciudad ? datosFicha.personaReferencia.direccion_ciudad : "";
                            columns.push(ciudad);
                            var zona = datosFicha.personaReferencia.direccion_zona ? datosFicha.personaReferencia.direccion_zona : "";
                            columns.push(zona);
                            var calle = datosFicha.personaReferencia.direccion ? datosFicha.personaReferencia.direccion : "";
                            columns.push(calle);
                            var nro = datosFicha.personaReferencia.direccion_numero ? datosFicha.personaReferencia.direccion_numero : "";
                            columns.push(nro);
                            var telefonoRef = datosFicha.personaReferencia.telefono ? datosFicha.personaReferencia.telefono : ""
                            columns.push(telefonoRef);
                            var celularRef = datosFicha.personaReferencia.telefono_movil ? datosFicha.personaReferencia.telefono_movil : "";
                            columns.push(celularRef);
                            var nomRef = datosFicha.personaReferencia.nombres ? datosFicha.personaReferencia.nombres : "";
                            columns.push(nomRef);
                        } else {
                            columns.push("");
                            columns.push("");
                            columns.push("");
                            columns.push("");
                            columns.push("");
                            columns.push("");
                            columns.push("");
                        }
                        columns.push(datosFicha.fecha_inicio);
                        columns.push(datosFicha.haber_basico);
                        columns.push(datosFicha.matricula_seguro);
                        if (empleado.eliminado == true) {
                            columns.push("inactivo");
                        } else {
                            columns.push("activo");
                        }
                        var fechaRetiro = datosFicha.fecha_expiracion ? $scope.fechaATexto(datosFicha.fecha_expiracion) : "";
                        columns.push(fechaRetiro);



                        data.push(columns);
                    }


                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                    /* add worksheet to workbook */
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-RRHH.xlsx");

                    blockUI.stop();
                });
            }

            $scope.reporteRRHHCuetasBancarias = function () {
                blockUI.start();
                var idEmpresa = $scope.usuario.id_empresa;
                var promesa = rrhhReportesExcel(idEmpresa)
                promesa.then(function (data) {
                    var cuentasBancarias = data.reportes;

                    var data = [["CÓDIGO", "NOMBRE COMPLETO", "BANCO", "CUENTA"]];
                    var index = 0;
                    for (var i = 0; i < cuentasBancarias.length; i++) {
                        var cuentaBancaria = cuentasBancarias[i];
                        var columns = [];

                        columns.push(cuentaBancaria.codigo);
                        columns.push(cuentaBancaria.persona.nombre_completo);

                        var maxIdFicha = 0;
                        var datosFicha = [];
                        for (let i = 0; i < cuentaBancaria.empleadosFichas.length; i++) {
                            const empleFicha = cuentaBancaria.empleadosFichas[i];
                            if (maxIdFicha < empleFicha.id) {
                                maxIdFicha = empleFicha.id;
                                datosFicha = empleFicha
                            }
                        }

                        if (datosFicha.banco) {
                            columns.push(datosFicha.banco.nombre);
                        } else {
                            columns.push("")
                        }
                        if (datosFicha.numero_cuenta) {
                            columns.push(datosFicha.numero_cuenta);
                        } else {
                            columns.push("");
                        }

                        data.push(columns);
                    }

                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                    /* add worksheet to workbook */
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-RRHH-CUENTAS-BANCARIAS.xlsx");

                    blockUI.stop();

                });
            }

            $scope.reporteRRHHFamiliares = function () {
                blockUI.start();
                var idEmpresa = $scope.usuario.id_empresa;
                var promesa = rrhhReportesExcel(idEmpresa)
                promesa.then(function (data) {
                    var familiares = data.reportes;

                    var data = [["CÓDIGO EMPLEADO", "NOMBRE EMPLEADO", "GENERO", "NOMBRES", "APELLIDO PATERNO",
                        "APELLIDO MATERNO", "FECHA DE NACIMIENTO", "RELACION", "OTROS DATOS"]];

                    for (var i = 0; i < familiares.length; i++) {
                        var familiar = familiares[i];

                        if (familiar.familiares.length > 0) {
                            for (let j = 0; j < familiar.familiares.length; j++) {
                                var columns = [];
                                const porFamilia = familiar.familiares[j];
                                columns.push(familiar.codigo);
                                columns.push(familiar.persona.nombres);
                                columns.push(familiar.persona.genero.nombre_corto);
                                columns.push(porFamilia.persona.nombres);
                                columns.push(porFamilia.persona.apellido_paterno);
                                columns.push(porFamilia.persona.apellido_materno);
                                if (porFamilia.persona.fecha_nacimiento) {
                                    columns.push($scope.fechaATexto(porFamilia.persona.fecha_nacimiento))
                                } else {
                                    columns.push("")
                                }

                                if (porFamilia.relacion) {
                                    columns.push(porFamilia.relacion.nombre);
                                } else {
                                    columns.push("");
                                }
                                if (porFamilia.referencia) {
                                    columns.push(porFamilia.referencia);
                                } else {
                                    columns.push("");
                                }
                                data.push(columns);
                            }
                        } else {
                            var columns = [];
                            columns.push(familiar.codigo);
                            columns.push(familiar.persona.nombres);
                            columns.push(familiar.persona.genero.nombre_corto);
                            columns.push("");
                            columns.push("");
                            columns.push("");
                            columns.push("");
                            columns.push("");
                            columns.push("");

                            data.push(columns);
                        }

                    }

                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                    /* add worksheet to workbook */
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-RRHH-FAMILIARES.xlsx");

                    blockUI.stop();

                });
            }

            $scope.reporteRRHHFichaEmpleado = function () {
                blockUI.start();
                var idEmpresa = $scope.usuario.id_empresa;
                var promesa = rrhhReportesExcel(idEmpresa)
                promesa.then(function (data) {
                    var fichasEmpleados = data.reportes;

                    var data = [["CÓDIGO", "APELLIDO PATERNO", "APELLIDO MATERNO", "PRIMER NOMBRE", "SEGUNDO NOMBRE",
                        "ESTADO CIVIL", "NACIONALIDAD", "DEPARTAMENTO", "PROVINCIA", "LOCALIDAD", "TIPO PERSONAL",
                        "CARGA HORARIA", "ÁREA", "UBICACIÓN", "LUGAR SEGURO", "NUA/CUA", "AFP_APORTE", "LUGAR AFP",
                        "SEGURO 1", "MONTO SEG1", "OBSERVACIONES 1", "SEGURO 2", "MONTO SEG2", "OBSERVACIONES 2",
                        "DIRECCION", "RESIDENCIA", "EMAIL"]];

                    for (var i = 0; i < fichasEmpleados.length; i++) {
                        var fichaEmpleado = fichasEmpleados[i];
                        var columns = [];
                        columns.push(fichaEmpleado.codigo);
                        columns.push(fichaEmpleado.persona.apellido_paterno);
                        columns.push(fichaEmpleado.persona.apellido_materno);
                        columns.push(fichaEmpleado.persona.nombres);
                        var segundoNombre = fichaEmpleado.persona.segundo_nombre ? fichaEmpleado.persona.segundo_nombre : "";
                        columns.push(segundoNombre);
                        var estadoCivil = fichaEmpleado.persona.estadoCivil ? fichaEmpleado.persona.estadoCivil.nombre : "";
                        columns.push(estadoCivil);
                        var nacionalidad = fichaEmpleado.persona.pais ? fichaEmpleado.persona.pais.nombre : "";
                        columns.push(nacionalidad);
                        var departamento = fichaEmpleado.persona.ciudad ? fichaEmpleado.persona.ciudad.nombre : "";
                        columns.push(departamento);
                        var provincia = fichaEmpleado.persona.provincia ? fichaEmpleado.persona.provincia.nombre : "";
                        columns.push(provincia);
                        var localidad = fichaEmpleado.persona.localidad ? fichaEmpleado.persona.localidad.nombre : "";
                        columns.push(localidad);

                        var maxIdFicha = 0;
                        var datosFicha = [];
                        for (let i = 0; i < fichaEmpleado.empleadosFichas.length; i++) {
                            const empleFicha = fichaEmpleado.empleadosFichas[i];
                            if (maxIdFicha < empleFicha.id) {
                                maxIdFicha = empleFicha.id;
                                datosFicha = empleFicha
                            }
                        }
                        var tipoPersonal = datosFicha.tipoPersonal ? datosFicha.tipoPersonal.nombre : "";
                        columns.push(tipoPersonal);
                        var cargaHoraria = datosFicha.cargaHorario ? datosFicha.cargaHorario.nombre : "";
                        columns.push(cargaHoraria);
                        var area = datosFicha.area ? datosFicha.area.nombre : "";
                        columns.push(area);
                        var ubicacion = datosFicha.ubicacion ? datosFicha.ubicacion.nombre : "";
                        columns.push(ubicacion);
                        var lugarSeguroSalud = datosFicha.lugarSeguroSalud ? datosFicha.lugarSeguroSalud.nombre : "";
                        columns.push(lugarSeguroSalud);
                        var nua = datosFicha.nua_seguro_largo_plazo ? datosFicha.nua_seguro_largo_plazo : "";
                        columns.push(nua);
                        var aporteSeguro = datosFicha.aporteSeguroLargoPlazo ? datosFicha.aporteSeguroLargoPlazo.nombre : "";
                        columns.push(aporteSeguro);
                        var lugarAporteSeguro = datosFicha.lugarSeguroLargoPlazo ? datosFicha.lugarSeguroLargoPlazo.nombre : "";
                        columns.push(lugarAporteSeguro);

                        if (datosFicha.otrosSeguros.length > 0 && datosFicha.otrosSeguros.length <= 1) {
                            for (let j = 0; j < datosFicha.otrosSeguros.length; j++) {
                                const element = datosFicha.otrosSeguros[j];
                                columns.push(element.tipoSeguro.nombre);
                                columns.push(element.monto);
                                if (element.observacion) {
                                    columns.push(element.observacion)
                                } else {
                                    columns.push("")
                                }

                            }
                            columns.push("")
                            columns.push("")
                            columns.push("")
                        } else if (datosFicha.otrosSeguros.length > 1) {
                            for (let j = 0; j < 2; j++) {
                                const element = datosFicha.otrosSeguros[j];
                                columns.push(element.tipoSeguro.nombre);
                                columns.push(element.monto);
                                if (element.observacion) {
                                    columns.push(element.observacion)
                                } else {
                                    columns.push("")
                                }

                            }
                        } else {
                            columns.push("")
                            columns.push("")
                            columns.push("")
                            columns.push("")
                            columns.push("")
                            columns.push("")
                        }
                        var direccion = fichaEmpleado.persona.direccion ? fichaEmpleado.persona.direccion : "";
                        columns.push(direccion);
                        var residencia = fichaEmpleado.persona.direccion_ciudad ? fichaEmpleado.persona.direccion_ciudad : "";
                        columns.push(residencia);
                        var email = fichaEmpleado.persona.correo_electronico ? fichaEmpleado.persona.correo_electronico : "";
                        columns.push(email);

                        data.push(columns);
                    }

                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                    /* add worksheet to workbook */
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-FICHAS-RRHH.xlsx");

                    blockUI.stop();

                });
            }

            $scope.reporteRRHHTURNO = function () {
                blockUI.start();
                var idEmpresa = $scope.usuario.id_empresa;
                var promesa = rrhhReportesExcel(idEmpresa)
                promesa.then(function (data) {
                    var turnos = data.reportes;

                    var data = [["CÓDIGO", "APELLIDO PATERNO", "APELLIDO MATERNO", "PRIMER NOMBRE", "SEGUNDO NOMBRE",
                        "TIPO", "CAMPO", "FECHA INICIO", "FECHA FINAL", "GRUPO", "DIAS TRABAJADOS", "DIAS DESCANSO"]];
                    var index = 0;
                    for (var i = 0; i < turnos.length; i++) {
                        var turno = turnos[i];
                        var columns = [];

                        columns.push(turno.codigo);
                        columns.push(turno.persona.apellido_paterno)
                        columns.push(turno.persona.apellido_materno)
                        columns.push(turno.persona.nombres);
                        columns.push(turno.persona.segundo_nombre);

                        var maxIdFicha = 0;
                        var datosFicha = [];
                        for (let i = 0; i < turno.empleadosFichas.length; i++) {
                            const empleFicha = turno.empleadosFichas[i];
                            if (maxIdFicha < empleFicha.id) {
                                maxIdFicha = empleFicha.id;
                                datosFicha = empleFicha
                            }
                        }
                        var tipoPersonal = datosFicha.tipoPersonal ? datosFicha.tipoPersonal.nombre : "";
                        columns.push(tipoPersonal);
                        var campo = turno.campo ? turno.campo.nombre : "";
                        columns.push(campo);
                        var fecha_inicio = datosFicha.fecha_inicio ? $scope.fechaATexto(datosFicha.fecha_inicio) : "";
                        columns.push(fecha_inicio);
                        var fecha_fin = datosFicha.fecha_fin ? $scope.fechaATexto(datosFicha.fecha_fin) : "";
                        columns.push(fecha_fin);
                        if (datosFicha.rolesTurno.length > 0) {
                            var grupo = datosFicha.rolesTurno[0].grupo ? datosFicha.rolesTurno[0].grupo.nombre_corto : "";
                            columns.push(grupo);
                            var diasTrabajados = datosFicha.rolesTurno[0].dias_trabajado ? Number(datosFicha.rolesTurno[0].dias_trabajado) : "";
                            columns.push(diasTrabajados);
                            var diasDescanso = datosFicha.rolesTurno[0].dias_descanso ? Number(datosFicha.rolesTurno[0].dias_descanso) : "";
                            columns.push(diasDescanso);
                        } else {
                            columns.push("");
                            columns.push("");
                            columns.push("");
                        }


                        data.push(columns);
                    }

                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                    /* add worksheet to workbook */
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-TURNO-RRHH.xlsx");

                    blockUI.stop();

                });
            }

            $scope.reporteRRHHPreRequisitos = function () {
                blockUI.start();
                var idEmpresa = $scope.usuario.id_empresa;
                var promesa = rrhhReportesExcel(idEmpresa)
                promesa.then(function (data) {
                    var preRequisitos = data.reportes;

                    var data = [["CÓDIGO", "NOMBRE", "PRE REQUISITO", "OBSERVACIÓN", "PUEDE MODIFICAR RRHH",
                        "ENTREGADO SI/NO", "FECHA DE RECEPTION"]];

                    for (var i = 0; i < preRequisitos.length; i++) {
                        var preRequisito = preRequisitos[i];

                        if (preRequisito.pacientesPrerequisitos.length > 0) {
                            for (var j = 0; j < preRequisito.pacientesPrerequisitos.length; j++) {
                                var porPreRequisito = preRequisito.pacientesPrerequisitos[j]

                                var columns = [];
                                columns.push(preRequisito.codigo);
                                columns.push(preRequisito.persona.nombres);
                                columns.push(porPreRequisito.preRequisito.nombre);
                                var observacion = porPreRequisito.preRequisito.observacion ? porPreRequisito.preRequisito.observacion : "";
                                columns.push(observacion);
                                if (porPreRequisito.preRequisito.puede_modificar_rrhh) {
                                    if (porPreRequisito.preRequisito.puede_modificar_rrhh == true) {
                                        columns.push("Si");
                                    } else {
                                        columns.push("No");
                                    }
                                } else {
                                    columns.push("");
                                }
                                var entregado = porPreRequisito.fecha_entrega ? "Si" : "No";
                                columns.push(entregado);
                                var fechaRecepcion = porPreRequisito.fecha_entrega ? $scope.fechaATexto(porPreRequisito.fecha_entrega) : "";
                                columns.push(fechaRecepcion);

                                data.push(columns);
                            }
                        } else {
                            var columns = [];
                            columns.push(preRequisito.codigo);
                            columns.push(preRequisito.persona.nombres);
                            columns.push("");
                            columns.push("");
                            columns.push("");
                            columns.push("");
                            columns.push("");

                            data.push(columns);
                        }

                    }

                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                    /* add worksheet to workbook */
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-PREREQUISITO-RRHH.xlsx");

                    blockUI.stop();

                });
            }

            $scope.obtenerGestiones = function () {
                blockUI.start();
                var promesa = ClasesTipo("GTN");
                promesa.then(function (entidad) {
                    $scope.gestiones = entidad.clases;
                    blockUI.stop();
                });
            }

            // desabilitar o habilitar empleados
            $scope.abrirModalVerificarCuentaRrhh = function (empleado) {
                $scope.empleado = empleado
                $scope.obtenerMotivosRetiro();
                $scope.abrirPopup($scope.IdModalVerificarCuentaRrhh);
            }


            $scope.abrirModalVerificarCuentaRrhhEdicionSueldo = function (data) {
                // $scope.empleado = empleado
                $scope.inputActivado = data
                $scope.funcionArealizar = $scope.verificarCuentaAdminRrhhEdicionSueldo
                $scope.abrirPopup($scope.IdModalVerificarCuentaRrhh);
            }
            $scope.verificarCuentaAdminRrhhEdicionSueldo = function (cuenta) {
                const promesa = VerificarUsuarioEmpresa($scope.usuario.id_empresa, cuenta)
                promesa.then(function (dato) {
                    if (dato.type) {
                        if ($scope.inputActivado === "fecha") {
                            $scope.ficha.editDatosLaboralesFecha = true;
                        } else {
                            $scope.ficha.editDatosLaboralesSueldo = true;
                        }
                        $scope.ficha.quienModifico = $scope.usuario.id
                        $scope.cerrarPopup($scope.IdModalVerificarCuentaRrhh);
                    } else {
                        $scope.mostrarMensaje(dato.message)
                    }
                })
            }

            $scope.cerrarModalVerificarCuentaRrhh = function (dato) {
                if (dato) {
                    $scope.empleado.activo = ($scope.empleado.activo == true) ? false : true
                }
                $scope.cerrarPopup($scope.IdModalVerificarCuentaRrhh);
            }
            $scope.abrirModalVerificacion = function (empleado) {

                if (empleado.activo == true) {
                    empleado.reactivado = true;
                    $scope.funcionCerrar = $scope.cerrarModalReingresoEmpleado
                    $scope.funcionArealizar = $scope.ActivarCuentaRrhh
                    $scope.abrirModalVerificarCuentaRrhh(empleado)
                } else {
                    $scope.funcionCerrar = $scope.cerrarMensajeConfirmacion
                    $scope.funcionArealizar = $scope.verificarCuentaAdminRrhh
                    $scope.abrirModalVerificarCuentaRrhh(empleado)
                    setTimeout(function () {
                        aplicarDatePickers();
                    }, 300);
                }
            }
            $scope.abrirMensajeConfirmacion = function (cuenta) {
                $scope.cuenta = cuenta
                $scope.abrirPopup($scope.idModalConfirmarDesabilitacion);
            }
            $scope.abrirModalReingresoEmpleado = function () {
                $scope.obtenerTiposBaja();
                $scope.abrirPopup($scope.idModalReingresoEmpleado)
            }
            $scope.cerrarModalReingresoEmpleado = function (dato) {
                if (dato) {
                    $scope.empleado.activo = ($scope.empleado.activo == true) ? false : true

                }
                $scope.cerrarPopup($scope.idModalReingresoEmpleado)
                if ($scope.empleado.tipoReincorporacion) {
                    if ($scope.empleado.tipoReincorporacion.nombre_corto == "NREING") {
                        $scope.abrirDialogEmpleado($scope.empleado)
                    }
                }
            }
            $scope.cerrarMensajeConfirmacion = function (dato) {
                if (dato) {
                    $scope.empleado.activo = ($scope.empleado.activo == true) ? false : true
                }
                $scope.cerrarPopup($scope.idModalConfirmarDesabilitacion);
            }



            $scope.verificarCuentaAdminRrhh = function (cuenta) {
                const promesa = VerificarUsuarioEmpresa($scope.usuario.id_empresa, cuenta)
                promesa.then(function (dato) {

                    if (dato.type) {
                        if (cuenta.fecha) {
                            $scope.empleado.nueva_fecha_expiracion = new Date($scope.convertirFecha($scope.cuenta.fecha))
                        } else {
                            $scope.empleado.nueva_fecha_expiracion = null
                        }
                        $scope.empleado.motivo_retiro = $scope.cuenta.motivo_retiro
                        $scope.empleado.quienModifico = $scope.usuario.id
                        $scope.abrirMensajeConfirmacion(cuenta)
                        $scope.cerrarModalVerificarCuentaRrhh();
                    } else {
                        $scope.mostrarMensaje(dato.message)
                    }
                })


            }
            $scope.ActivarCuentaRrhh = function (cuenta) {
                const promesa = VerificarUsuarioEmpresa($scope.usuario.id_empresa, cuenta)
                promesa.then(function (dato) {

                    if (dato.type) {

                        $scope.empleado.nueva_fecha_expiracion = null

                        /*  $scope.abrirMensajeConfirmacion(cuenta) */
                        $scope.abrirModalReingresoEmpleado(cuenta)
                        $scope.cerrarModalVerificarCuentaRrhh();
                    } else {
                        $scope.mostrarMensaje(dato.message)
                    }
                })
            }

            $scope.changeActivoEmpleado = function (empleado) {

                empleado.activo = (empleado.activo == false) ? true : false
                empleado.observacion = $scope.cuenta.observacion
                var promesa = UsuarioRecursosHUmanosActivo(empleado)
                promesa.then(function (dato) {

                    $scope.funcionCerrar()

                    $scope.cuenta = {}

                    $scope.mostrarMensaje(dato.mensaje)

                    if (empleado.tipoReincorporacion) {
                        $scope.ultimaAccion = empleado.tipoReincorporacion
                        empleado.activo = (empleado.activo == false) ? true : false
                        if (empleado.tipoReincorporacion.nombre_corto == "NREING") {
                            $scope.primeroGuardarParaCerrar = true
                            $scope.obtenerRecursosHumanos();
                            $scope.abrirDialogEmpleado(empleado, true)


                        } else {
                            $scope.obtenerRecursosHumanos();
                        }
                    } else {
                        $scope.obtenerRecursosHumanos();
                    }

                })
            }


            $scope.EliminarUsuarioRh = function (empleado) {
                if (empleado.activo) {
                    empleado.activo = false
                    $scope.abrirModalVerificacion(empleado)
                }
            }
            $scope.obtenerTiposBaja = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_TPRE", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tiposBajas = entidad
                    blockUI.stop();
                });
            }
            //fin desabilitar o habilitar empleado
            $scope.borrarSeleccionUnica = function (event) {
                $scope.filtroRolCal.campo = 0
                $scope.filtroRolCal.campoData = {}
            }
            //beneficios sociales
            $scope.obtenerTiposOtrosingresosYDeduccion = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_TPDOI", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tiposOtrosingresosYDeduccion = entidad
                    $scope.tiposOtrosingresosYDeduccion.clases.forEach(function (tipo, index, array) {
                        if (tipo.nombre_corto == "OTRING") {
                            $scope.tipoOtrosIngresos = tipo
                        } else {
                            $scope.tipoDeducciones = tipo
                        }
                    })
                    blockUI.stop();
                });
            }
            $scope.obtenerMotivosRetiro = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_TPMR", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tipoMotivo = entidad
                    blockUI.stop();
                });
            }

            $scope.agregarOtroIngreso = function (model) {
                model.tipo = $scope.tipoOtrosIngresos
                model.eliminado = false
                $scope.beneficio.ingresos.push(model);
                $scope.ingreso = { motivo: '', monto: '' }
                $scope.sumartotalOtrosIngresos($scope.beneficio)
            }

            $scope.eliminarOtroIngreso = function (index, ingreso) {
                if (ingreso.id) {
                    ingreso.eliminado = true
                    ingreso.motivo = ""
                    $scope.sumartotalOtrosIngresos($scope.beneficio)
                } else {
                    $scope.beneficio.ingresos.splice(index, 1)
                    $scope.sumartotalOtrosIngresos($scope.beneficio)
                }
            }
            $scope.agregarDeduccion = function (model) {
                model.tipo = $scope.tipoDeducciones
                $scope.beneficio.deducciones.push(model);
                $scope.deduccion = { motivo: '', monto: '' }
                $scope.sumarTotalDeducciones($scope.beneficio)
            }
            $scope.sumarTotalDeducciones = function (beneficio) {
                beneficio.total_deducciones = 0
                beneficio.deducciones.forEach(function (deduccion, index, array) {
                    if (!deduccion.eliminado) {
                        beneficio.total_deducciones += deduccion.monto
                    }
                })
            }
            $scope.eliminarDeduccion = function (index, deduccion) {
                if (deduccion.id) {
                    deduccion.eliminado = true
                    deduccion.motivo = ""
                } else {
                    $scope.beneficio.deducciones.splice(index, 1)
                    $scope.sumarTotalDeducciones($scope.beneficio)
                }
            }
            $scope.guardarBeneficioSocial = function (datos) {
                datos.fecha_elaboracion = new Date($scope.convertirFecha(datos.fecha_elaboracion))
                datos.fecha_asistensia = new Date($scope.convertirFecha(datos.fecha_asistensia))
                datos.fecha_ingreso = new Date($scope.convertirFecha(datos.fecha_ingreso))
                if (datos.fecha_retiro) {
                    datos.fecha_retiro = new Date($scope.convertirFecha(datos.fecha_retiro))
                } else {
                    datos.fecha_retiro = new Date()
                }
                // corregir guardado tipo_pago =============================================
                if (!datos.tipo_pago) {
                    datos.cuenta = null;
                }
                if (datos.cuenta) {
                    datos.cuenta = { id: datos.cuenta.id }
                }

                var promesa = CrearBeneficioSocial(datos, $scope.empleado.id_ficha)
                promesa.then(function (dato) {
                    const beneficioconId = { id: dato.id_beneficio }
                    $scope.obtenerDatosFiniquito(beneficioconId, false)
                    SweetAlert.swal("Guardado!", dato.mensaje, "success");
                    $scope.cerrarDialogBeneficiosSociales()
                }).catch(function (err) {
                    var men = (err.data !== undefined && err.data !== null) ? err.data : err.message
                    SweetAlert.swal("", 'Se produjo un error! > ' + men, "error");
                    blockUI.stop();
                })
            }
            $scope.seleccionarMesesFiniquito = function (beneficio) {
                if (beneficio.mes_uno.id == 10) {
                    beneficio.mes_dos = $scope.meses[11]
                    beneficio.mes_tres = $scope.meses[0]
                } else if (beneficio.mes_uno.id == 11) {
                    beneficio.mes_dos = $scope.meses[0]
                    beneficio.mes_tres = $scope.meses[1]
                } else {
                    beneficio.mes_dos = $scope.meses[beneficio.mes_uno.id + 1]
                    beneficio.mes_tres = $scope.meses[beneficio.mes_uno.id + 2]
                }
            }
            $scope.agregarQuinquenioAdelantado = function (beneficio) {
                var qA = 0
                if (beneficio.quinquenio_adelantado) {
                    qA = beneficio.quinquenio_adelantado
                    var deduccion2 = {
                        monto: qA,
                        motivo: "Quinquenio Adelantado",
                        tipo: $scope.tipoDeducciones
                    }
                    if (beneficio.deducciones.length > 0) {
                        var bandera = false

                        beneficio.deducciones.forEach(function (deduccion, index, array) {
                            if (deduccion.motivo == "Quinquenio Adelantado") {
                                deduccion.monto = qA
                                bandera = true
                            }
                            if (index === (array.length - 1)) {
                                if (!bandera) {
                                    beneficio.deducciones.push(deduccion2)
                                }
                                $scope.sumarTotalDeducciones(beneficio)
                            }
                        });
                    } else {
                        beneficio.deducciones.push(deduccion2)

                    }
                } else {
                    beneficio.deducciones.forEach(function (deduccion, index, array) {
                        bandera = false
                        if (deduccion.motivo == "Quinquenio Adelantado") {
                            beneficio.deducciones.splice(index, 1)
                            $scope.sumarTotalDeducciones(beneficio)
                        }
                    });
                }

            }
            /*      $scope.CalcularAguinaldoNavidad = function (beneficio) {
                     var mes = new Date(beneficio.fecha_retiro).getMonth()
                     var dias = new Date(beneficio.fecha_retiro).getDate()
                     var ultimoDia = new Date(date.getFullYear(), date.getMonth() + 1, 0);
                     if (dias === ultimoDia.getDate()) {
                         beneficio.diasAguinaldo = 0
                         beneficio.mesesAguinaldo = mes
                     } else {
                         beneficio.mesesAguinaldo = mes - 1
                         beneficio.diasAguinaldo = dias
                     }
                     var sueldomes = beneficio.promedio / 12
                     var sueldodia = sueldomes / 30
                     return sueldomes * beneficio.mesesAguinaldo + sueldodia * beneficio.diasAguinaldo
                 } */
            $scope.CalcularAguinaldoNavidad2 = function (beneficio) {
                var fechaini = new Date($scope.convertirFecha(beneficio.fecha_ingreso))
                var fecha = new Date($scope.convertirFecha(beneficio.fecha_retiro))
                var mes = fecha.getMonth() + 1
                var dias = fecha.getDate()
                var anioDos = fecha.getFullYear()
                var anioUno = fechaini.getFullYear()
                var ultimoDia = new Date(fecha.getFullYear(), fecha.getMonth() + 1, 0);

                if (dias === ultimoDia.getDate()) {
                    beneficio.diasAguinaldo = 0
                    beneficio.mesesAguinaldo = mes
                } else {
                    beneficio.mesesAguinaldo = mes - 1
                    beneficio.diasAguinaldo = dias
                }
                if (beneficio.fecha_retiro) {
                    fechaActual = new Date($scope.convertirFecha(beneficio.fecha_retiro))
                }
                if (anioDos == anioUno) {
                    var fechaAnterior = new Date($scope.convertirFecha(beneficio.fecha_ingreso))
                    $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual, 1)
                    $scope.tiempoTrabajado.dias
                    beneficio.mesesAguinaldo = $scope.tiempoTrabajado.meses
                    beneficio.diasAguinaldo = $scope.tiempoTrabajado.dias
                }
                /*  var fechaAnterior = new Date($scope.convertirFecha(beneficio.fecha_ingreso))
                 $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual,1)
                 beneficio.mesesAguinaldo = $scope.tiempoTrabajado.meses
                 beneficio.diasAguinaldo = $scope.tiempoTrabajado.dias */
                var sueldomes = beneficio.promedio / 12
                var sueldodia = sueldomes / 30
                return sueldomes * beneficio.mesesAguinaldo + sueldodia * beneficio.diasAguinaldo
            }
            $scope.obtenerCuentasBancos = function () {
                blockUI.start();
                var promesa = ListaBancos($scope.usuario.id_empresa);
                promesa.then(function (bancos) {
                    $scope.cuentasBancos = bancos;
                    blockUI.stop();
                });
            }
            $scope.calcularPromedioFiniquito = function (beneficio) {

                beneficio.promedio = ((beneficio.usar_primer_mes ? beneficio.primer_mes : 0) + (beneficio.usar_segundo_mes ? beneficio.segundo_mes : 0) + beneficio.tercer_mes) /
                    (!beneficio.usar_primer_mes ? !beneficio.usar_segundo_mes ? 1 : 2 : 3)
                if (beneficio.tipo_beneficio) {
                    if (!isNaN(beneficio.promedio)) {
                        if (beneficio.desahucio) {
                            beneficio = $scope.calcularDesaucio(beneficio, false)
                        }

                        beneficio.totalAguinaldo = $scope.CalcularAguinaldoNavidad2(beneficio)
                        var monto1 = $scope.añosRestantes * beneficio.promedio
                        var monto2 = (beneficio.promedio / 12) * $scope.tiempoTrabajado.meses
                        var monto3 = (beneficio.promedio / 360) * $scope.tiempoTrabajado.dias
                        var ingreso1 = {
                            monto: monto1,
                            motivo: "indemnizacion años",
                            tipo: $scope.tipoOtrosIngresos
                        }
                        var ingreso2 = {
                            monto: monto2,
                            motivo: "indemnizacion meses",
                            tipo: $scope.tipoOtrosIngresos
                        }
                        var ingreso3 = {
                            monto: monto3,
                            motivo: "indemnizacion dias",
                            tipo: $scope.tipoOtrosIngresos
                        }
                        var ingreso4 = {
                            monto: (beneficio.promedio / 30) * beneficio.totalV,
                            motivo: "Vacacion",
                            tipo: $scope.tipoOtrosIngresos
                        }
                        var ingreso5 = {
                            monto: beneficio.totalAguinaldo,
                            motivo: "Aguinaldo de navidad",
                            tipo: $scope.tipoOtrosIngresos
                        }
                        if (beneficio.ingresos.length > 0) {
                            var bandera = false, bandera2 = false, bandera3 = false, bandera4 = false, bandera5 = false;
                            beneficio.ingresos.forEach(function (ingreso, index, array) {
                                if (ingreso.motivo == "indemnizacion años") {
                                    ingreso.monto = monto1
                                    bandera = true
                                }
                                if (ingreso.motivo == "indemnizacion meses") {
                                    ingreso.monto = monto2
                                    bandera2 = true
                                }
                                if (ingreso.motivo == "indemnizacion dias") {
                                    ingreso.monto = monto3
                                    bandera3 = true
                                }
                                if (ingreso.motivo == "Vacacion") {
                                    ingreso.monto = (beneficio.promedio / 30) * beneficio.totalV,
                                        bandera4 = true
                                }
                                if (ingreso.motivo == "Aguinaldo de navidad") {
                                    ingreso.monto = beneficio.totalAguinaldo
                                    bandera5 = true
                                }
                                if (index === (array.length - 1)) {
                                    if (!bandera) {
                                        beneficio.ingresos.push(ingreso1)
                                    }
                                    if (!bandera2) {
                                        beneficio.ingresos.push(ingreso2)
                                    }
                                    if (!bandera3) {
                                        beneficio.ingresos.push(ingreso3)
                                    }
                                    if (!bandera4) {
                                        beneficio.ingresos.push(ingreso4)
                                    }
                                    if (!bandera5) {
                                        beneficio.ingresos.push(ingreso5)
                                    }
                                    beneficio = $scope.sumartotalOtrosIngresos(beneficio)
                                }
                            });
                        } else {
                            beneficio.ingresos.push(ingreso1)
                            beneficio.ingresos.push(ingreso2)
                            beneficio.ingresos.push(ingreso3)
                            beneficio.ingresos.push(ingreso4)
                            beneficio.ingresos.push(ingreso5)
                            beneficio = $scope.sumartotalOtrosIngresos(beneficio)
                        }

                    } else {
                        var arregloIndex = []
                        beneficio.ingresos.forEach(function (ingreso, index, array) {
                            if (ingreso.motivo == "Vacacion") {
                                arregloIndex.push(index)
                            }
                            if (ingreso.motivo == "indemnizacion años") {
                                arregloIndex.push(index)
                            }
                            if (ingreso.motivo == "indemnizacion meses") {
                                arregloIndex.push(index)
                            }
                            if (ingreso.motivo == "indemnizacion dias") {
                                arregloIndex.push(index)
                            }
                            if (ingreso.motivo == "Desahucio") {
                                arregloIndex.push(index)
                            }
                            if (index === (array.length - 1)) {
                                for (var i = (arregloIndex.length - 1); i >= 0; i--) {
                                    var element = arregloIndex[i];
                                    beneficio.ingresos.splice(element, 1)
                                    beneficio = $scope.sumartotalOtrosIngresos(beneficio)
                                }
                            }
                        });

                    }


                }
                return beneficio
            }
            $scope.sumartotalOtrosIngresos = function (beneficio) {
                beneficio.total_ingresos = 0
                beneficio.ingresos.forEach(function (ingreso, index, array) {
                    if (!ingreso.eliminado) {
                        beneficio.total_ingresos += ingreso.monto
                    }
                })
                return beneficio
            }
            $scope.calcularTotalQuiquenio = function (beneficio) {
                beneficio.total_quinquenio = beneficio.promedio * (beneficio.numero_quinquenio * 5)
                /* beneficio.total_quinquenio = parseFloat(beneficio.total_quinquenio.toFixed(2)) */
                beneficio.total_por_quinquenio = beneficio.total_quinquenio / beneficio.numero_quinquenio
            }
            //fin beneficios sociales

            $scope.calcularDesaucio = function (beneficio, update) {
                if (!isNaN(beneficio.promedio)) {
                    if (beneficio.desahucio) {
                        beneficio.total_desahucio = beneficio.promedio * 3
                        beneficio.total_desahucio = parseFloat(beneficio.total_desahucio.toFixed(2))
                        if (beneficio.tipo_beneficio) {

                            var ingreso1 = {
                                monto: beneficio.total_desahucio,
                                motivo: "Desahucio",
                                tipo: $scope.tipoOtrosIngresos

                            }
                            if (!update) {
                                if (beneficio.ingresos.length > 0) {
                                    var bandera = false
                                    beneficio.ingresos.forEach(function (ingreso, index, array) {
                                        if (ingreso.motivo == "Desahucio") {
                                            ingreso.monto = beneficio.total_desahucio
                                            bandera = true
                                        }
                                        if (index === (array.length - 1)) {
                                            if (!bandera) {
                                                beneficio.ingresos.push(ingreso1)
                                                $scope.sumartotalOtrosIngresos(beneficio)
                                            }
                                        }
                                    });
                                } else {
                                    beneficio.ingresos.push(ingreso1)
                                    $scope.sumartotalOtrosIngresos(beneficio)
                                }

                            } else {

                            }

                        }
                    } else {

                        var bandera = false
                        var indexCampo = 0
                        beneficio.ingresos.forEach(function (ingreso, index, array) {
                            if (ingreso.motivo == "Desahucio") {
                                bandera = true
                                indexCampo = index
                            }
                            if (index === (array.length - 1)) {
                                if (bandera) {
                                    beneficio.ingresos.splice(indexCampo, 1)
                                    $scope.sumartotalOtrosIngresos(beneficio)
                                }
                            }


                        });
                    }



                } else {
                    beneficio.ingresos.forEach(function (ingreso, index, array) {
                        if (ingreso.motivo == "Desahucio") {
                            beneficio.ingresos.splice(index, 1)
                            $scope.sumartotalOtrosIngresos(beneficio)
                        }
                    });
                }
                return beneficio
            }
            //inicio ropa de trabajo
            $scope.listaRopaTrabajoPorCargo = function () {
                var promesa = ListaConfiguracionRopaCargo($scope.usuario.id_empresa)
                promesa.then(function (dato) {
                    $scope.listaRopasDeTrabajo = dato
                    $scope.idCargoRopa = 0
                })
            }
            $scope.AsignarCargo = function (cargo) {
                $scope.ropaTrabajo.cargo = cargo
                $scope.idCargoRopa = cargo.id
                $scope.ropaTrabajo.id_cargo = cargo.id
            }
            $scope.GuardarlistaRopaTrabajoPorCargo = function (cargo) {
                var button = $('#siguiente-ca').text().trim()
                if (button != "Siguiente") {
                    var promesa = GuardarConfiguracionRopaCargo($scope.listaRopasDeTrabajo)
                    promesa.then(function (dato) {
                        $scope.mostrarMensaje(dato.mensaje)
                        $scope.cerrarModalConfiguracionRopaDeTrabajo()
                        $scope.listaRopasDeTrabajo = []
                        $scope.recargarItemsTabla()

                    })
                }
            }
            $scope.agregarRopaTrabajo = function (ropa) {
                var bandera = true
                if (ropa.edit) {
                    ropa.edit = false
                    $scope.ropaTrabajo = { cargo: ropa.cargo, id_cargo: ropa.id_cargo }
                } else {
                    if ($scope.listaRopasDeTrabajo.length > 0) {
                        $scope.listaRopasDeTrabajo.forEach(function (ropaT, index, array) {
                            if (ropa.ropaTrabajo.nombre == ropaT.ropaTrabajo.nombre && ropa.id_cargo == ropaT.id_cargo) {
                                bandera = false
                                if (ropaT.eliminado == true) {
                                    ropaT.eliminado = false
                                }
                            }
                            if (index === (array.length - 1)) {
                                if (bandera) {
                                    $scope.listaRopasDeTrabajo.push(ropa)
                                    $scope.ropaTrabajo = { cargo: ropa.cargo, id_cargo: ropa.id_cargo }
                                } else {
                                    $scope.mostrarMensaje("la ropa de trabajo asignada ya se encuentra registrada en el cargo")
                                }
                            }
                        });
                    } else {
                        $scope.listaRopasDeTrabajo.push(ropa)
                        $scope.ropaTrabajo = { cargo: ropa.cargo, id_cargo: ropa.id_cargo }
                    }
                }

            }

            $scope.editarRopaTrabajo = function (ropa) {
                $scope.ropaTrabajo = ropa
                $scope.ropaTrabajo.edit = true
            }
            $scope.eliminarRopaTrabajo = function (ropa) {
                ropa.eliminado = true;
            }
            $scope.generarPdfRopaTrabajo = function () {
                var promesa = DatosReporteConfiguracionRopa($scope.usuario.id_empresa)
                promesa.then(function (datos) {
                    var ropas = []
                    datos.forEach(function (dato, index, array) {
                        var datoArreglo = { nombre: dato.cargo.nombre, detalle: [] }
                        if (ropas.length > 0) {
                            var bandera = true
                            for (var i = 0; i < ropas.length; i++) {
                                datoArreglo = { nombre: dato.cargo.nombre, detalle: [] }
                                var element = ropas[i];
                                if (element.nombre == dato.cargo.nombre) {
                                    bandera = false
                                }
                                if (i === (ropas.length - 1)) {
                                    if (bandera) {
                                        ropas.push(datoArreglo)
                                    }
                                }
                            }

                        } else {
                            ropas.push(datoArreglo)
                        }
                        if (index === (array.length - 1)) {
                            datos.forEach(function (dato2, index2, array2) {
                                for (var i = 0; i < ropas.length; i++) {
                                    var element = ropas[i];
                                    if (element.nombre == dato2.cargo.nombre) {
                                        element.detalle.push(dato2)
                                    }
                                }
                                if (index2 === (array2.length - 1)) {
                                    var pormimg = ObtenerImagen($scope.usuario.empresa.imagen)
                                    pormimg.then(function (imagenEmpresa) {
                                        var imagen = imagenEmpresa;
                                        var doc = new PDFDocument({ compress: false, size: 'letter', margin: 10 });
                                        var stream = doc.pipe(blobStream());
                                        var totalCosto = 0, totalTransporte = 0;
                                        var y = 100, itemsPorPagina = 25, items = 0, pagina = 1, totalPaginas = Math.ceil((ropas.length * 2 + datos.length) / itemsPorPagina);
                                        $scope.DibujarCabeceraPDFConfigRopa(doc, pagina, totalPaginas, ropas, imagen);
                                        doc.font('Helvetica', 10);
                                        for (var i = 0; i < ropas.length && items <= itemsPorPagina; i++) {
                                            ropaTrabajo = ropas[i]
                                            doc.text(i + 1, 45, y);
                                            doc.text(ropaTrabajo.nombre, 80, y);
                                            y += 30
                                            items++
                                            if (items == itemsPorPagina) {
                                                doc.addPage({ margin: 0, bufferPages: true });
                                                y = 100;
                                                items = 0;
                                                pagina = pagina + 1;
                                                $scope.DibujarCabeceraPDFConfigRopa(doc, pagina, totalPaginas, ropas, imagen);
                                                doc.font('Helvetica', 10);
                                            }
                                            doc.font('Helvetica-Bold', 10);
                                            doc.text("ROPA", 80, y);
                                            doc.text("CANTIDAD", 250, y, { width: 70 });
                                            doc.font('Helvetica', 10);
                                            y += 30
                                            items++
                                            if (items == itemsPorPagina) {
                                                doc.addPage({ margin: 0, bufferPages: true });
                                                y = 100;
                                                items = 0;
                                                pagina = pagina + 1;
                                                $scope.DibujarCabeceraPDFConfigRopa(doc, pagina, totalPaginas, ropas, imagen);
                                                doc.font('Helvetica', 10);
                                            }
                                            for (var j = 0; j < ropaTrabajo.detalle.length; j++) {
                                                var element = ropaTrabajo.detalle[j];
                                                doc.text(element.ropaTrabajo.nombre, 80, y);
                                                doc.text(element.cantidad, 250, y, { width: 70 });
                                                y += 30
                                                items++
                                                if (items == itemsPorPagina) {
                                                    doc.addPage({ margin: 0, bufferPages: true });
                                                    y = 100;
                                                    items = 0;
                                                    pagina = pagina + 1;
                                                    $scope.DibujarCabeceraPDFConfigRopa(doc, pagina, totalPaginas, ropas, imagen);
                                                    doc.font('Helvetica', 10);
                                                }
                                            }
                                            items++
                                            if (items == itemsPorPagina) {
                                                doc.addPage({ margin: 0, bufferPages: true });
                                                y = 100;
                                                items = 0;
                                                pagina = pagina + 1;
                                                $scope.DibujarCabeceraPDFConfigRopa(doc, pagina, totalPaginas, ropas, imagen);
                                                doc.font('Helvetica', 10);
                                            }
                                        }
                                        doc.end();
                                        stream.on('finish', function () {
                                            var fileURL = stream.toBlobURL('application/pdf');
                                            window.open(fileURL, '_blank', 'location=no');
                                        });
                                        blockUI.stop();
                                    })
                                    // convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {

                                    // })
                                }
                            })

                        }

                    });

                })
            }

            $scope.DibujarCabeceraPDFConfigRopa = function (doc, pagina, totalPaginas, ropas, imagen) {
                doc.font('Helvetica-Bold', 14);
                doc.text("ROPA DE TRABAJO - POR CARGOS", 0, 20, { align: "center" });
                doc.image(imagen, 30, 10, { fit: [80, 80] });
                doc.rect(0, 65, 620, 0).stroke();
                doc.rect(130, 40, 500, 0).stroke();
                doc.rect(130, 0, 0, 65).stroke();
                doc.rect(460, 0, 0, 65).stroke();
                doc.font('Helvetica-Bold', 8);
                doc.text("Revicion:", 480, 20);
                doc.text("Fecha de aprobación:", 480, 45);
                doc.text("Código .", 0, 45, { align: "center" });
                doc.font('Helvetica', 8);
                var currentDate = new Date();
                doc.text("Usuario: " + $scope.usuario.persona.nombre_completo + "      Fecha :  " + $scope.fechaATexto(currentDate) + "   Hrs. " + currentDate.getHours() + ":" + currentDate.getMinutes(), 15, 765);
                doc.font('Helvetica-Bold', 8);
                doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 0, 740, { align: "center" });
            }

            $scope.generarExcelRopaTrabajo = function () {
                var promesa = DatosReporteConfiguracionRopa($scope.usuario.id_empresa)
                promesa.then(function (datos) {
                    var data = [["N°", "CARGO", "ROPA", "CANTIDAD"]]
                    for (var i = 0; i < datos.length; i++) {
                        var columns = [];
                        columns.push((i + 1));
                        columns.push(datos[i].cargo.nombre);
                        columns.push(datos[i].ropaTrabajo.nombre);
                        columns.push(datos[i].cantidad);
                        data.push(columns);
                    }

                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                    /* add worksheet to workbook */
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTES CONFIGURACION ROPA DE TRABAJO.xlsx");
                    blockUI.stop();
                })
            }
            $scope.obtenerCargosRopaTrabajo = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_CARGO", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    var cargos = entidad.clases
                    $scope.listaCargos = entidad
                    $scope.llenarCargos(cargos)
                    blockUI.stop();
                });
            }
            $scope.obtenerCargosEmpleado = function (edit, pocision, nuevo) {
                var promesa = ListaCargosEmpleado($scope.empleado.id_ficha)
                promesa.then(function (datos) {
                    $scope.cargosEmpleado = datos
                    var ropas = []
                    datos.forEach(function (dato1, index, array) {
                        dato1.cargo.ConfiguracionesCargo.forEach(function (dato, index, array) {
                            var datoArreglo = { nombre: dato.cargo.nombre, detalle: [] }
                            if (ropas.length > 0) {
                                var bandera = true
                                for (var i = 0; i < ropas.length; i++) {
                                    datoArreglo = { nombre: dato.cargo.nombre, detalle: [] }
                                    var element = ropas[i];
                                    if (element.nombre == dato.cargo.nombre) {
                                        bandera = false
                                    }
                                    if (i === (ropas.length - 1)) {
                                        if (bandera) {
                                            ropas.push(datoArreglo)
                                        }
                                    }
                                }

                            } else {
                                ropas.push(datoArreglo)
                            }
                            if (index === (array.length - 1)) {

                            }
                        })
                        if (index === (array.length - 1)) {
                            datos.forEach(function (dato1, index3, array3) {
                                dato1.cargo.ConfiguracionesCargo.forEach(function (dato2, index2, array2) {
                                    for (var i = 0; i < ropas.length; i++) {
                                        var element = ropas[i];
                                        if (element.nombre == dato2.cargo.nombre) {
                                            element.detalle.push(dato2)
                                        }
                                    }
                                })
                                if (index3 === (array3.length - 1)) {
                                    $scope.dotacionItems = []
                                    datos.forEach(function (dato1, index3, array3) {
                                        dato1.cargo.ConfiguracionesCargo.forEach(function (dato2, index2, array2) {
                                            if ($scope.dotacionItems.length > 0) {
                                                var bandera = true
                                                for (var i = 0; i < $scope.dotacionItems.length; i++) {
                                                    var element = $scope.dotacionItems[i];
                                                    if (element.ropaTrabajo.nombre == dato2.ropaTrabajo.nombre) {
                                                        bandera = false
                                                    }
                                                    if (i === ($scope.dotacionItems.length - 1)) {
                                                        if (bandera) {
                                                            dato2.editable = true
                                                            dato2.modificable = true
                                                            dato2.entregado = false
                                                            $scope.dotacionItems.push(dato2)
                                                        }
                                                    }
                                                }
                                            } else {
                                                dato2.editable = true
                                                dato2.modificable = true
                                                dato2.entregado = false
                                                $scope.dotacionItems.push(dato2)
                                            }
                                        })
                                        if (index3 === (array3.length - 1)) {
                                            var dotacionItems2 = []
                                            if (!edit) {
                                                var comparar = ($scope.listaDotaciones.length > 0) ? (nuevo) ? false : true : false
                                                if (comparar) {
                                                    //$scope.dotacionRopa.dotacionItems =  $scope.dotacionItems
                                                    var idsIndex = []
                                                    var ina = $scope.listaDotaciones.length - 1
                                                    if (pocision) {
                                                        ina = pocision
                                                    } 
                                                    $scope.listaDotaciones[ina].dotacionItems.forEach(function (dato, index, array) {
                                                        //$scope.dotacionRopa.dotacionItems
                                                        var bandera2 = false
                                                        for (var i = 0; i < $scope.dotacionItems.length; i++) {
                                                            var element = $scope.dotacionItems[i];
                                                            var bandera = (element.id_cargo == dato.id_cargo) ? (element.id_ropa_trabajo == dato.id_ropa_trabajo) ? true : false : false
                                                            if (bandera) {
                                                                element.producto = dato.producto
                                                                element.cantidad = dato.cantidad
                                                                element.entregado = dato.entregado
                                                                if (element.entregado) {
                                                                    element.modificable = false
                                                                }
                                                                if (edit) {
                                                                    element.modificable = true
                                                                }
                                                                idsIndex.push(dato.id)
                                                            } else {
                                                                bandera2 = true
                                                            }
                                                        }
                                                        if (bandera2) {

                                                            dotacionItems2.push(dato)
                                                        }
                                                        if (index === (array.length - 1)) {


                                                            idsIndex.forEach(function (dato, index3, array3) {
                                                                // dotacionItems2.splice(dato, 1)
                                                                for (var j = 0; j < dotacionItems2.length; j++) {
                                                                    var element2 = dotacionItems2[j];
                                                                    if (element2.id == dato) {
                                                                        dotacionItems2.splice(j, 1)
                                                                    } else {
                                                                        element2.editable = false
                                                                    }
                                                                }
                                                                if (index3 === (array3.length - 1)) {
                                                                    var arregloid = []
                                                                    $scope.dotacionItems.forEach(function (dotacion, index, array) {
                                                                        for (var i = 0; i < dotacionItems2.length; i++) {
                                                                            var element = dotacionItems2[i];
                                                                            if (dotacion.id_ropa_trabajo == element.id_ropa_trabajo) {
                                                                                dotacion.producto = element.producto
                                                                                dotacion.cantidad = element.cantidad
                                                                                dotacion.entregado = element.entregado
                                                                                arregloid.push(element.id)
                                                                            }
                                                                        }
                                                                        if (index === (array.length - 1)) {
                                                                            if (arregloid.length > 0) {
                                                                                arregloid.forEach(function (id, index, array) {
                                                                                    for (var j = 0; j < dotacionItems2.length; j++) {
                                                                                        var element2 = dotacionItems2[j];
                                                                                        if (element2.id == id) {
                                                                                            dotacionItems2.splice(j, 1)
                                                                                        } else {
                                                                                            element2.editable = false
                                                                                        }
                                                                                    }
                                                                                    if (index === (array.length - 1)) {
                                                                                        $scope.dotacionItemsDetalle = $scope.dotacionItems.concat(dotacionItems2)
                                                                                        $scope.dotacionRopa.dotacionItems = $scope.dotacionItemsDetalle
                                                                                        var fecha = new Date()
                                                                                        $scope.dotacionRopa.fecha = $scope.fechaATexto(fecha)
                                                                                        $scope.dotacionRopa.fecha_vencimiento = $scope.fechaATexto($scope.dotacionRopa.fecha_vencimiento)
                                                                                    }
                                                                                })
                                                                            } else {
                                                                                $scope.dotacionItemsDetalle = $scope.dotacionItems.concat(dotacionItems2)
                                                                                $scope.dotacionRopa.dotacionItems = $scope.dotacionItemsDetalle
                                                                                var fecha = new Date()
                                                                                $scope.dotacionRopa.fecha = $scope.fechaATexto(fecha)
                                                                                $scope.dotacionRopa.fecha_vencimiento = $scope.fechaATexto($scope.dotacionRopa.fecha_vencimiento)
                                                                            }
                                                                        }
                                                                    })

                                                                }
                                                            })



                                                        }
                                                    });
                                                } else {
                                                    $scope.dotacionRopa.dotacionItems = $scope.dotacionItems
                                                    var fecha = new Date()
                                                    $scope.dotacionRopa.fecha = $scope.fechaATexto(fecha)

                                                }
                                            } else {
                                                var ina = $scope.listaDotaciones.length - 1
                                                if (pocision != undefined) {
                                                    ina = pocision
                                                }
                                                $scope.dotacionRopa.dotacionItems = $scope.listaDotaciones[ina].dotacionItems
                                                var fecha = new Date();
                                                if ($scope.actualizarDotacion) {
                                                    fecha = $scope.listaDotaciones[ina].fecha;
                                                }

                                                $scope.dotacionRopa.fecha = $scope.fechaATexto(fecha)
                                                $scope.dotacionRopa.fecha_vencimiento = $scope.fechaATexto($scope.dotacionRopa.fecha_vencimiento)

                                            }
                                        }
                                    })
                                }
                            })
                        }
                    })
                    if($scope.listaDotaciones && $scope.listaDotaciones.length>0) {
                        $scope.dotacionRopa.almacen = $scope.listaDotaciones[$scope.listaDotaciones.length-1].almacen;
                        if($scope.dotacionRopa.almacen) $scope.obtenerListaRopaTrabajoProductos();
                    }
                    if($scope.cumplimientoDotacion && $scope.cumplimientoDotacion.clases) $scope.dotacionRopa.cumplimiento = $scope.cumplimientoDotacion.clases[0]
                })
            }
            $scope.obtenerEstadoDotacion = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_EDRT", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.estadoDotacion = entidad
                    blockUI.stop();
                });
            }
            $scope.obtenerCumplimientoDotacion =  () => {
                return new Promise(( resolve, reject )=>{
                    ClasesTipoEmpresa("RRHH_CDRT", $scope.usuario.id_empresa)
                    .then(entidad => {
                        $scope.cumplimientoDotacion = entidad
                        resolve($scope.cumplimientoDotacion)
                    })
                })
            }
            $scope.obtenerPeriodosDotacion =  () => {
                return new Promise((resolve, reject )=>{
                    ClasesTipoEmpresa("RRHH_PDR", $scope.usuario.id_empresa)
                    .then( entidad => {
                        $scope.periodoDotacion = entidad
                        resolve($scope.periodoDotacion)
                    })
                })
            }
            $scope.obtenerListaRopaTrabajoProductos = function () {
                blockUI.start();
                var subgrupos = ""
                $scope.dotacionRopa.dotacionItems.forEach(function (item, index, array) {
                    if (index === (array.length - 1)) {
                        subgrupos += item.id_ropa_trabajo
                        var promesa = ListaRopaTrabajoProductos(subgrupos, $scope.dotacionRopa.almacen.id);
                        promesa.then(function (entidad) {
                            $scope.productosRopaTrabajo = entidad
                            $scope.dotacionRopa.dotacionItems.forEach(function (item) {
                                if (item.producto) {
                                    $scope.calularInventarioItem(item)
                                }
                            })
                            blockUI.stop();
                        });
                    } else {
                        subgrupos += item.id_ropa_trabajo + ","
                    }
                });
            }
            $scope.calularInventarioItem = function (item) {
                item.cantidad_disponible = 0
                if (item.producto.inventarios.length > 0) {
                    item.producto.inventarios.forEach(function (inv, index, array) {
                        item.cantidad_disponible += inv.cantidad
                    })
                }
            }

            $scope.calularInventarioItemDetalle = function (item) {
                if ($scope.actualizarDotacion) {

                    item.cantidad_disponible = 0
                    if (item.producto.inventarios.length > 0) {
                        item.producto.inventarios.forEach(function (inv, index, array) {
                            item.cantidad_disponible += inv.cantidad
                        })
                    }
                    if (item.id_producto == item.producto.id) {
                        item.cantidad_disponible = item.cantidad_disponible == 0 ? item.cantidad : item.cantidad_disponible + item.cantidad;
                    }

                } else {
                    item.cantidad_disponible = 0
                    if (item.producto && item.producto.inventarios.length > 0) {
                        item.producto.inventarios.forEach(function (inv, index, array) {
                            item.cantidad_disponible += inv.cantidad
                        })
                    }
                }


            }
            $scope.seleccionarItem = function (item) {
                if (item.editable) {
                    if (item.modificable) {
                        if (item.entregado) {
                            item.entregado = (item.entregado) ? false : true
                        } else {
                            item.entregado = true
                        }
                    }
                } else if (!item.anterior) {
                    if (item.entregado) {
                        item.entregado = (item.entregado) ? false : true
                        if ($scope.actualizarDotacion) {
                            item.cantidad_disponible = item.cantidad_disponible + item.cantidad;
                        }
                    } else {
                        item.entregado = true
                        if ($scope.actualizarDotacion) {
                            item.cantidad_disponible = item.cantidad_disponible > 0 ? item.cantidad_disponible - item.cantidad : item.cantidad_disponible;
                        }
                    }
                }
            }
            $scope.guardarDotacionRopa = function (dotacion) {
                blockUI.start();
                let detalleRT = dotacion.dotacionItems.filter(e=>e.entregado)
                if(detalleRT.length == 0) {
                    blockUI.stop();
                    return SweetAlert.swal("", "No se seleccionó ningún item", "warning");
                }
                let detalleHTML = ``
                for (let i = 0; i < detalleRT.length; i++) {
                    const item = detalleRT[i];
                    detalleHTML += `<tr>
                                        <td class="small"><small>${ i + 1}</small></td>
                                        <td class="small"><small>${ item.ropaTrabajo? item.ropaTrabajo.nombre: '' }</small></td>
                                        <td class="small"><small>${ item.producto? item.producto.nombre: '' }</small></td>
                                        <td class="small"><small>${ item.cantidad }</small></td>
                                    </tr>`
                }
                blockUI.stop();
                SweetAlert.swal({
                    html: `<div class="table-header text-center">CONFIRME EL DETALLE DE LA ENTREGA</div>
                            <table class="table">
                            <thead>
                                <tr>
                                    <th class="center small">N°</th>
                                    <th class="center small">Item</th>
                                    <th class="center small">Detalle</th>
                                    <th class="center small">Cantidad</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${detalleHTML}
                            </tbody>
                        </table>`,
                    /* icon: 'info', */
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Confirmar',
                    cancelButtonText: 'Cancelar'
                })
                .then(async res => {
                    if(res.isConfirmed){
                        blockUI.start();
                        if (dotacion.id) {
                            dotacion.fecha = new Date($scope.convertirFecha(dotacion.fecha))
                            dotacion.id_ficha = $scope.empleado.id_ficha
                            //dotacion.fecha_vencimiento = new Date($scope.convertirFecha(dotacion.fecha_vencimiento))
                            var promesa = ActualizarDotacionRopa($scope.empleado.id, dotacion)
                            promesa.then(function (entidad) {
                                SweetAlert.swal("", entidad.message, entidad.messageType);
                                dotacion.numero = entidad.numero
                                $scope.imprimirRopaTrabajo(dotacion.id)
                                $scope.cerrarModalEdicionRopaTrabajo()
                                blockUI.stop();
                            });
                            blockUI.stop();
                        } else {
                            var q = await ObtenerConfiguracionIso(dotacion.sucursal.id)
                            if (q.configuracionesIso.length > 0) q = q.configuracionesIso.filter(cfg => cfg.tipoDocumento.nombre_corto === "ROPATRABAJO" && cfg.activo == true);
                            if ($scope.usuario.empresa.usar_configuracion_iso && q.length == 1) {
                                dotacion.configuracionesIso = q[0];
                                dotacion.config_doc_iso = q[0].id;
                            } else {
                                dotacion.configuracionesIso = undefined;
                                dotacion.config_doc_iso = undefined;
                            }
                            dotacion.id_ficha = $scope.empleado.id_ficha
                            dotacion.fecha = new Date($scope.convertirFecha(dotacion.fecha))
                            var promesa = GuardarDotacionRopa($scope.empleado.id, dotacion)
                            promesa.then(function (entidad) {
                                let errores = "<small>"
                                if(entidad.errores) {
                                    errores += entidad.errores.join("<br>")
                                }
                                errores += "</small>"
                                $scope.cerrarModalNuevaRopaTrabajo()
                                SweetAlert.swal("", entidad.message +"<br>"+errores, entidad.messageType);
                                if(!entidad.error) $scope.ObtenerDotacionesRopa($scope.empleado)
                                dotacion.configuracionesIso != undefined ? dotacion.configuracionesIso.predefinido ? $scope.printIsoDocRopaTrabajo(entidad.nuevo.id) : $scope.imprimirRopaTrabajo(entidad.nuevo.id) : $scope.imprimirRopaTrabajo(entidad.nuevo.id);
                                blockUI.stop();
                            });
                        }
                    }
                })
                
            }
            $scope.ObtenerDotacionesRopa = function ( empleado, filtro ) {
                var filtroRopa = { inicio: 0, fin: 0 }
                if (filtro) {
                    if (filtro.inicio != undefined) {
                        filtroRopa.inicio = filtro.inicio
                        filtroRopa.fin = filtro.fin
                    }
                }
                ListaDotacionRopa(empleado.id, filtroRopa)
                .then(function (entidad) {
                    if (entidad.length > 0) {
                        entidad.forEach(function (dato, index, array) {
                            dato.cargos = []
                            dato.ropas = []
                            dato.dotacionItems.forEach(function (dotacion, index, array) {
                                if (dato.cargos.length > 0) {
                                    var bandera = true
                                    for (var i = 0; i < dato.cargos.length; i++) {
                                        var element = dato.cargos[i];
                                        if (element.nombre == dotacion.cargo.nombre) {
                                            bandera = false
                                        }
                                    }
                                    if (bandera) {
                                        dato.cargos.push(dotacion.cargo)
                                    }
                                } else {
                                    dato.cargos.push(dotacion.cargo)
                                }
                                if (dato.ropas.length > 0) {
                                    var bandera = true
                                    for (var i = 0; i < dato.ropas.length; i++) {
                                        var element = dato.ropas[i];
                                        if (element.nombre == dotacion.ropaTrabajo.nombre) {
                                            bandera = false
                                        }
                                    }
                                    if (bandera) {
                                        dato.ropas.push(dotacion.ropaTrabajo)
                                    }
                                } else {
                                    dato.ropas.push(dotacion.ropaTrabajo)
                                }
                            })
                            if (index === (array.length - 1)) {
                                $scope.listaDotaciones = entidad
                            }
                        })
                    } else{
                        $scope.listaDotaciones = []
                    }
                    blockUI.stop();
                });
                
            }
            $scope.abrirDialogEliminarRopaTrabajo = function () {
                $scope.abrirPopup($scope.idModalEliminarRopaTrabajo)
            }
            $scope.cerrarDialogEliminarRopaTrabajo = function () {
                $scope.dato = {}
                $scope.cerrarPopup($scope.idModalEliminarRopaTrabajo)
            }
            $scope.abrirDialogRolTurnosNoche = function (rolTurno) {
                $scope.rolTurnoE = rolTurno
                $scope.rolTurnoNoche = {
                    eliminado: false, fecha_inicio: "",
                    fecha_fin: "",
                    comentario: ""
                }
                $scope.tipoRolTurnoExtra = {};
                if ($scope.tituloModalRolTurnoNoche === "Noches Trabajadas") {
                    $scope.tipoRolTurnoExtra = $scope.tiposRolTurnoExtra.find(function (x) {
                        return x.nombre_corto == "NOCHE"
                    })
                    $scope.obtenerRolesTurnosExtra();
                }
                else if ($scope.tituloModalRolTurnoNoche === "Días Trabajados") {
                    $scope.tipoRolTurnoExtra = $scope.tiposRolTurnoExtra.find(function (x) {
                        return x.nombre_corto == "DIA"
                    })
                    $scope.obtenerRolesTurnosExtra();
                }
                else if ($scope.tituloModalRolTurnoNoche === "Días Descansos") {
                    $scope.tipoRolTurnoExtra = $scope.tiposRolTurnoExtra.find(function (x) {
                        return x.nombre_corto == "DESCANSO"
                    })
                    $scope.obtenerRolesTurnosExtra();
                }
                $scope.abrirPopup($scope.idModalRolTurnosNoche)
            }
            $scope.cerrarDialogRolTurnosNoche = function () {
                $scope.dato = {}
                $scope.cerrarPopup($scope.idModalRolTurnosNoche)
            }
            $scope.eliminarRopaTrabajoEmpleado = function (ropa) {
                var promesa = EliminarDotacionRopa(ropa)
                promesa.then(function (dato) {
                    $scope.mostrarMensaje(dato.mensaje)
                    $scope.ObtenerDotacionesRopa($scope.empleado)
                    $scope.cerrarDialogEliminarRopaTrabajo()
                })
            }
            $scope.imprimirRopaTrabajo = function (id) {
                var promesa = ObtenerDotacionRopaEmpleado(id)
                promesa.then(function (datos) {
                    if (datos.hasError) {
                        SweetAlert.swal("", "No se encontraron datos de la Dotación", "warning");
                    } else {
                        var doc = new PDFDocument({ compress: false, size: 'letter', margin: 10 });
                        var stream = doc.pipe(blobStream());
                        var totalCosto = 0, totalTransporte = 0;
                        var datos = datos.dotacion;
                        var y = 215, itemsPorPagina = 18, items = 0, pagina = 1, totalPaginas = Math.ceil(datos.dotacionItems.length / itemsPorPagina);
                        $scope.DibujarCabeceraPDFRopaTrabajo(doc, pagina, totalPaginas, datos);
                        doc.font('Helvetica', 10);
                        for (var i = 0; i < datos.dotacionItems.length && items <= itemsPorPagina; i++) {
                            item = datos.dotacionItems[i]
                            if (item.entregado) {
                                var cargardatos = (item.anterior) ? false : true
                                if (cargardatos) {
                                    doc.text(item.producto.codigo, 45, y, { width: 70 }); codigo
                                    doc.text(item.ropaTrabajo.nombre, 175, y, { width: 70 });
                                    doc.text(item.producto.unidad_medida, 345, y, { width: 100 });
                                    doc.text(item.cantidad, 485, y, { width: 100 });
                                    y += 30
                                    items++
                                }
                            }
                            if (items == itemsPorPagina) {
                                doc.addPage({ margin: 0, bufferPages: true });
                                y = 215;
                                items = 0;
                                pagina = pagina + 1;
                                $scope.DibujarCabeceraPDFAnticipoRegular(doc, pagina, totalPaginas, datos);
                            }
                        }
                        doc.font('Helvetica', 10);
                        var currentDate = new Date();
                        if (y < 400) {
                            y = 335
                        } else {
                            y += 30
                        }
                        doc.rect(85, y - 5, 85, 0).dash(5, { space: 10 }).stroke()
                        doc.rect(300, y - 5, 85, 0).dash(5, { space: 10 }).stroke()
                        doc.rect(455, y - 5, 85, 0).dash(5, { space: 10 }).stroke()
                        doc.text("encargado Área", 85, y);
                        doc.text("Supervisor", 315, y);
                        doc.text("Recibó conforme", 455, y);
                        y += 30
                        doc.text("USUARIO: " + $scope.usuario.persona.nombre_completo + " FECHA:" + $scope.fechaATexto(currentDate), 15, y);
                        doc.end();
                        stream.on('finish', function () {
                            var fileURL = stream.toBlobURL('application/pdf');
                            window.open(fileURL, '_blank', 'location=no');
                        });
                        blockUI.stop();
                    }
                })

            }

            $scope.DibujarCabeceraPDFRopaTrabajo = function (doc, pagina, totalPaginas, dato) {
                doc.font('Helvetica-Bold', 12);
                doc.text("DOTACIÓN ROPA DE TRABAJO", 0, 45, { align: "center" });
                doc.font('Helvetica', 10);
                doc.text("Nro. " + dato.numero, 0, 65, { align: "center" });
                doc.text($scope.fechaATexto(new Date(dato.fecha)), 0, 85, { align: "center" });
                doc.font('Helvetica-Bold', 10);
                doc.text("Empleado: ", 45, 100);
                doc.text("Cargo: ", 400, 100)
                doc.text("Campamento: ", 45, 120);
                doc.text("Periodo: ", 45, 140);
                doc.text("Fecha Ing: ", 400, 140);
                doc.text("Retrasado", 45, 160);
                doc.rect(35, 175, 535, 0).dash(5, { space: 10 }).stroke()
                doc.rect(35, 200, 535, 0).dash(5, { space: 10 }).stroke()
                doc.text("Código", 45, 185, { width: 70 });
                doc.text("Descripcion", 175, 185, { width: 70 });
                doc.text("Unidad", 345, 185, { width: 70 });
                doc.text("Cant", 485, 185, { width: 70 });
                doc.font('Helvetica', 10);

                doc.text(dato.empleado ? dato.empleado.persona ? dato.empleado.persona.nombre_completo.toUpperCase() : '' : '', 100, 100);
                doc.text(dato.periodo ? dato.periodo.nombre : '', 100, 140);
                if (dato.empleado) doc.text(dato.empleado.campo ? dato.empleado.campo.nombre.toUpperCase() : '', 120, 120);

                doc.text(dato.ficha ? $scope.fechaATexto(dato.ficha.fecha_inicio) : '', 460, 140);
                var arregloCargos = ""
                if (dato.cargos) {
                    dato.cargos.forEach(function (cargo, index, array) {

                        if (index === (array.length - 1)) {
                            arregloCargos += cargo.nombre
                            doc.text(arregloCargos, 440, 100);
                        } else {
                            arregloCargos += cargo.nombre + ", "
                        }
                    })
                } else {
                    let cargo = dato.dotacionItems[0] ? dato.dotacionItems[0].cargo ? dato.dotacionItems[0].cargo.nombre.toUpperCase() : '' : '';
                    doc.text(cargo ? cargo : '', 440, 100);
                }

                //doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 0, 740, { align: "center" });


            }
            /* $scope.generarReporteRopaTrabajo = function (tipo, filtro,formato) {
                filtro.formato=formato
                switch (tipo) {
                    case 'pdf':
                        $scope.generarpdfRopaTrabajoEmpleados(filtro)
                        break;
                    case 'excel':
                        $scope.generarExcelRopaTrabajoEmpleados(filtro)
                        break;
                    case 'excelentregados':
                        $scope.generarExcelRopaTrabajoEmpleadosEntregado(filtro);
                        break;
                    default:
                        break;
                }
            } */
            $scope.generarComprobante = async function () {
                try {
                    $scope.filtroReporteRopa.inicio2 = new Date($scope.convertirFecha($scope.filtroReporteRopa.inicio))
                    $scope.filtroReporteRopa.fin2 = new Date($scope.convertirFecha($scope.filtroReporteRopa.fin))
                    var res = await ListaDotacionRopaEmpresaComprobante($scope.usuario.id_empresa, $scope.filtroReporteRopa)
                    let datos = { detalles: res, idsDetalles: res, fechaInicio: $scope.filtroReporteRopa.inicio, fechaFin: $scope.filtroReporteRopa.fin }
                    $scope.crearNuevoComprobante('ropaTrabajoRRHH', datos)
                } catch (error) {
                    console.log(error)
                }
            }
            $scope.generarExcelRopaTrabajoEmpleados = function (filtro) {
                filtro.inicio2 = filtro.inicio && new Date($scope.convertirFecha(filtro.inicio)) || 0
                filtro.fin2 = filtro.inicio && new Date($scope.convertirFecha(filtro.fin)) || 0
                var promesa = ListaDotacionRopaEmpresa($scope.usuario.id_empresa, filtro)
                promesa.then(function (datos) {
                    if (filtro.inicio == 0) {
                        filtro.inicio = ""
                        filtro.fin = ""
                    }
                    let cc = { nombre: "Todos" }
                    if (filtro.campo !== 0) {
                        let cc = $scope.centrosDeCostos.find(function (x) {
                            return x.id == filtro.campo
                        })
                    }
                    var cont = 1
                    var data = [["N°", "Asignado a:", "cargo", "Centro de Costo", "Fecha Ingreso", "Codigo de Artículo", "Descripción", "grupo", "subGrupo", "unidad", "cantidad", "PU", "TOTAL", "N° de Documento", "cumplimiento", "Fecha de Entrega", "tiempo de uso", "Proxima Entrega"]]
                    for (var i = 0; i < datos.length; i++) {
                        let dotacionRopaItem = datos[i]
                        if (dotacionRopaItem.dotacionRopa.empleado.id_campo == filtro.campo || filtro.campo === '') {
                            var columns = [];
                            columns.push(i + 1);
                            columns.push(dotacionRopaItem.dotacionRopa.empleado.persona.nombre_completo);
                            columns.push(dotacionRopaItem.cargo.nombre);
                            const centro_costo = dotacionRopaItem.dotacionRopa.empleado.campo && dotacionRopaItem.dotacionRopa.empleado.campo.nombre || null
                            columns.push(centro_costo && centro_costo || cc.nombre);
                            const fecha_ingreso = dotacionRopaItem.ficha && new Date(dotacionRopaItem.ficha.fecha_inicio) || new Date(dotacionRopaItem.dotacionRopa.empleado.empleadosFichas[0].fecha_inicio)
                            columns.push(fecha_ingreso);
                            columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.codigo || 'Error en el registro');
                            columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.nombre || 'Error en el registro');
                            columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.grupo ? dotacionRopaItem.producto && dotacionRopaItem.producto.grupo.nombre : "");
                            columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.subgrupo ? dotacionRopaItem.producto && dotacionRopaItem.producto.subgrupo.nombre : "");
                            columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.unidad_medida || 'Error en el registro');
                            columns.push(dotacionRopaItem.cantidad);
                            columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.precio_unitario || 'Error en el registro');
                            columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.precio_unitario * dotacionRopaItem.cantidad || 'Error en el registro');
                            columns.push(dotacionRopaItem.dotacionRopa.numero);
                            columns.push(dotacionRopaItem.dotacionRopa.cumplimiento.nombre);
                            columns.push(new Date(dotacionRopaItem.dotacionRopa.fecha));

                            data.push(columns);
                        }
                    }

                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTES CONFIGURACION ROPA DE TRABAJO.xlsx");
                    blockUI.stop();
                })
            }
            $scope.generarExcelRopaTrabajoEmpleadosEntregado = function (filtro) {
                filtro.inicio2 = filtro.inicio && new Date($scope.convertirFecha(filtro.inicio)) || 0
                filtro.fin2 = filtro.inicio && new Date($scope.convertirFecha(filtro.fin)) || 0
                var promesa = ListaDotacionRopaEmpresa($scope.usuario.id_empresa, filtro)
                promesa.then(function (datos) {
                    if (filtro.inicio == 0) {
                        filtro.inicio = ""
                        filtro.fin = ""
                    }
                    let cc = { nombre: "Todos" }
                    if (filtro.campo !== 0) {
                        let cc = $scope.centrosDeCostos.find(function (x) {
                            return x.id == filtro.campo
                        })
                    }
                    var cont = 1
                    var data = [["N°", "Nro. Doc", "Nro. ISO", "Asignado a:", "cargo", "Centro de Costo", "Fecha Ingreso", "Codigo de Artículo", "Descripción", "grupo", "subGrupo", "unidad", "cantidad", "PU", "TOTAL", "C/U", "TOTAL COSTO", "N° de Documento", "Doc/ISO", "cumplimiento", "Fecha de Entrega", "tiempo de uso", "Proxima Entrega"]]
                    for (var i = 0; i < datos.length; i++) {
                        let dotacionRopaItem = datos[i]
                        var columns = [];
                        columns.push(i + 1);
                        columns.push(dotacionRopaItem.dotacionRopa.numero);
                        columns.push(dotacionRopaItem.dotacionRopa.numero_iso_dotacion_ropa);
                        columns.push(dotacionRopaItem.dotacionRopa.empleado.persona.nombre_completo);
                        columns.push(dotacionRopaItem.cargo.nombre);
                        const centro_costo = dotacionRopaItem.dotacionRopa.empleado.campo && dotacionRopaItem.dotacionRopa.empleado.campo.nombre || null
                        columns.push(centro_costo && centro_costo || cc.nombre);
                        columns.push(new Date(dotacionRopaItem.dotacionRopa.empleado.empleadosFichas[0].fecha_inicio));
                        columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.codigo || 'Error en el registro');
                        columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.nombre || 'Error en el registro');
                        columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.grupo ? dotacionRopaItem.producto && dotacionRopaItem.producto.grupo.nombre : "");
                        columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.subgrupo ? dotacionRopaItem.producto && dotacionRopaItem.producto.subgrupo.nombre : "");
                        columns.push(dotacionRopaItem.producto && dotacionRopaItem.producto.unidad_medida || 'Error en el registro');
                        columns.push(dotacionRopaItem.cantidad);

                        if (dotacionRopaItem.producto) {
                            columns.push(dotacionRopaItem.movimiento ? dotacionRopaItem.movimiento.detallesMovimiento[0].costo_unitario : 'Error en el registro')
                            columns.push(dotacionRopaItem.movimiento ? dotacionRopaItem.movimiento.detallesMovimiento[0].costo_unitario * dotacionRopaItem.cantidad : 'Error en el registro');
                            columns.push(dotacionRopaItem.movimiento ? dotacionRopaItem.movimiento.detallesMovimiento[0].costo_unitario * 0.87 : 'Error en el registro')
                            columns.push(dotacionRopaItem.movimiento ? (dotacionRopaItem.movimiento.detallesMovimiento[0].costo_unitario * dotacionRopaItem.cantidad) * 0.87 : 'Error en el registro');
                        } else {
                            columns.push('Error en el registro')
                            columns.push('Error en el registro')
                            columns.push('Error en el registro')
                            columns.push('Error en el registro')
                        }

                        columns.push(dotacionRopaItem.dotacionRopa.numero);
                        columns.push(dotacionRopaItem.dotacionRopa.numero_iso_dotacion_ropa);
                        columns.push(dotacionRopaItem.dotacionRopa.cumplimiento.nombre);
                        columns.push(new Date(dotacionRopaItem.dotacionRopa.fecha));
                        data.push(columns);
                    }
                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTES CONSUMO/DOTACIÓN ROPA DE TRABAJO.xlsx");
                    blockUI.stop();
                })
            }
            $scope.generarpdfRopaTrabajoEmpleados = (filtro) => {
                if (filtro.inicio) {
                    filtro.inicio2 = new Date($scope.convertirFecha(filtro.inicio))
                    filtro.fin2 = new Date($scope.convertirFecha(filtro.fin))
                } else {
                    filtro.inicio2 = 0
                    filtro.fin2 = 0
                }
                //TODO: molestar a la lis
                const promesa = ListaDotacionRopaEmpresa($scope.usuario.id_empresa, filtro)
                promesa.then((datos) => {
                    const arregloNombres = []
                    for (let index = 0; index < datos.length; index++) {
                        if (arregloNombres.indexOf(datos[index].dotacionRopa.empleado.persona.nombre_completo) === -1) arregloNombres.push(datos[index].dotacionRopa.empleado.persona.nombre_completo)
                    }
                    const pormimg = ObtenerImagen($scope.usuario.empresa.imagen)
                    pormimg.then(function (imagenEmpresa) {
                        const imagen = imagenEmpresa;
                        if (filtro.inicio == 0) {
                            filtro.inicio = ""
                            filtro.fin = ""
                        }
                        const doc = new PDFDocument({ compress: false, size: 'letter', margin: 10 });
                        const stream = doc.pipe(blobStream());
                        let itemsforpagecount = 0;
                        let pageforcountpage = 1;
                        // El siguiente loop recorre todo el array de igual manera que al crear el pdf, se hizo para obtener el conteo de paginas correcto, otros metodos sin menor carga fallaron.
                        for (let index = 0; index < datos.length; index++) {
                            if (index === 0) {
                                itemsforpagecount += 2
                            } else {
                                if (datos[index].dotacionRopa.empleado.persona.nombre_completo === datos[index - 1].dotacionRopa.empleado.persona.nombre_completo) {

                                } else {
                                    itemsforpagecount += 2
                                }
                            }
                            itemsforpagecount += 1;
                            if (itemsforpagecount > 19) {
                                pageforcountpage += 1
                                itemsforpagecount = 0
                                const nextItemsExist = datos[index + 1] && datos[index + 1].dotacionRopa.empleado.persona.nombre_completo || null;
                                if (nextItemsExist === datos[index].dotacionRopa.empleado.persona.nombre_completo) {
                                    itemsforpagecount += 2
                                }
                            }
                        }
                        let y = 110, itemsPorPagina = 19, items = 0, pagina = 1//, totalPaginas = Math.ceil((datos.length + (arregloNombres.length * 2)) / itemsPorPagina);
                        const totalPaginas = pageforcountpage//Math.ceil(((totalPaginas * 2) + datos.length + (arregloNombres.length * 2)) / itemsPorPagina)
                        $scope.DibujarCabeceraPDFRopaTrabajoEmpleados(doc, pagina, totalPaginas, datos, imagen);
                        doc.font('Helvetica', 10);
                        for (let i = 0; i < datos.length; i++) {
                            item = datos[i]
                            if (i == 0) {
                                doc.font('Helvetica-Bold', 10);
                                doc.text("Asignado a:", 45, y)
                                doc.font('Helvetica', 8);
                                doc.text(item.dotacionRopa.empleado.persona.nombre_completo, 105, y)
                                y += 30
                                doc.rect(30, y - 10, 550, 0).stroke();
                                doc.rect(30, y - 10, 0, 30).stroke();
                                doc.rect(580, y - 10, 0, 30).stroke();
                                items++
                                $scope.dibujarCabeceraTablaPDFRT(doc, y)
                                y += 30
                                doc.rect(30, y - 10, 0, 30).stroke();
                                doc.rect(580, y - 10, 0, 30).stroke();
                                items++
                            }
                            if (i > 0) {
                                if (item.dotacionRopa.empleado.persona.nombre_completo === datos[i - 1].dotacionRopa.empleado.persona.nombre_completo) {
                                    doc.rect(30, y - 10, 0, 30).stroke();
                                    doc.rect(580, y - 10, 0, 30).stroke();
                                } else {
                                    doc.rect(30, y - 10, 550, 0).stroke();
                                    doc.font('Helvetica-Bold', 10);
                                    doc.text("Asignado a:", 45, y)
                                    doc.font('Helvetica', 8);
                                    doc.text(item.dotacionRopa.empleado.persona.nombre_completo, 105, y)
                                    y += 30
                                    doc.rect(30, y - 10, 550, 0).stroke();
                                    doc.rect(30, y - 10, 0, 30).stroke();
                                    doc.rect(580, y - 10, 0, 30).stroke();
                                    items++
                                    $scope.dibujarCabeceraTablaPDFRT(doc, y)
                                    y += 30
                                    doc.rect(30, y - 10, 0, 30).stroke();
                                    doc.rect(580, y - 10, 0, 30).stroke();
                                    items++
                                }
                            }
                            doc.text(i + 1, 35, y)
                            doc.text(item.producto && item.producto.codigo || 'Error de registro', 65, y)
                            doc.text(item.producto && item.producto.nombre || 'Error de registro', 125, y, { width: 100 })
                            doc.text(item.producto && item.producto.unidad_medida || 'Error de registro', 245, y)
                            doc.text(item.cantidad, 295, y)
                            doc.text(item.producto && item.producto.precio_unitario || 'Error de registro', 345, y)
                            doc.text(item.producto && (item.producto.precio_unitario * item.cantidad) || 'Error de registro', 400, y)
                            doc.text(item.dotacionRopa.numero, 460, y)
                            doc.text($scope.fechaATexto(new Date(item.dotacionRopa.fecha)), 500, y)
                            y += 30
                            items++
                            if (items > itemsPorPagina) {
                                doc.rect(30, y - 10, 550, 0).stroke();
                                doc.addPage({ margin: 0, bufferPages: true });
                                y = 110;
                                items = 0;
                                pagina = pagina + 1;
                                $scope.DibujarCabeceraPDFRopaTrabajoEmpleados(doc, pagina, totalPaginas, datos, imagen);
                                const nextItems = datos[i + 1] && datos[i + 1].dotacionRopa.empleado.persona.nombre_completo || null;
                                if (nextItems === datos[i].dotacionRopa.empleado.persona.nombre_completo) {
                                    doc.rect(30, y - 10, 550, 0).stroke();
                                    doc.font('Helvetica-Bold', 10);
                                    doc.text("Asignado a:", 45, y)
                                    doc.font('Helvetica', 8);
                                    doc.text(item.dotacionRopa.empleado.persona.nombre_completo, 105, y)
                                    y += 30
                                    doc.rect(30, y - 10, 550, 0).stroke();
                                    doc.rect(30, y - 10, 0, 30).stroke();
                                    doc.rect(580, y - 10, 0, 30).stroke();
                                    items++
                                    $scope.dibujarCabeceraTablaPDFRT(doc, y)
                                    y += 30
                                    doc.rect(30, y - 10, 0, 30).stroke();
                                    doc.rect(580, y - 10, 0, 30).stroke();
                                    items++
                                }
                            }
                        }
                        doc.rect(30, y - 10, 550, 0).stroke();
                        doc.end();
                        stream.on('finish', function () {
                            const fileURL = stream.toBlobURL('application/pdf');
                            window.open(fileURL, '_blank', 'location=no');
                        });
                        blockUI.stop();
                    }).catch((err) => {
                        blockUI.stop();
                        const msg = (err.stack !== undefined && err.stack !== null) ? err.stack : (err.message !== undefined && err.message !== null) ? err.message : 'Se perdió la conexión.';
                        $scope.mostrarMensaje(msg);
                    })
                }).catch((err) => {
                    blockUI.stop();
                    const msg = (err.stack !== undefined && err.stack !== null) ? err.stack : (err.message !== undefined && err.message !== null) ? err.message : 'Se perdió la conexión.';
                    $scope.mostrarMensaje(msg);
                })

            }
            $scope.dibujarCabeceraTablaPDFRT = function (doc, y) {
                doc.text('Nº', 35, y)
                doc.text('Codigo', 65, y)
                doc.text('Nombre', 125, y, { width: 100 })
                doc.text('Uni. M.', 245, y)
                doc.text('Cant.', 295, y)
                doc.text("P.U.", 345, y)
                doc.text("Total", 400, y)
                doc.text("Nº Doc.", 450, y)
                doc.text("Fecha", 500, y)
            }
            $scope.DibujarCabeceraPDFRopaTrabajoEmpleados = function (doc, pagina, totalPaginas, dato, imagen) {
                doc.font('Helvetica-Bold', 12);
                doc.text("DOTACION DE ROPA E IMPLEMENTOS DE TRABAJO", 0, 50, { align: "center" });
                doc.image(imagen, 40, 40, { fit: [80, 80] });
                doc.rect(30, 35, 550, 0).stroke();
                doc.rect(30, 95, 550, 0).stroke();
                doc.rect(130, 70, 450, 0).stroke();
                doc.rect(130, 35, 0, 60).stroke();
                doc.rect(460, 35, 0, 60).stroke();
                doc.rect(30, 35, 0, 60).stroke();
                doc.rect(580, 35, 0, 60).stroke();
                doc.font('Helvetica-Bold', 8);
                doc.text("Revicion:", 470, 50);
                doc.text("Fecha de aprobación:", 470, 75);
                doc.text("Código .", 0, 75, { align: "center" });
                doc.font('Helvetica', 8);
                var currentDate = new Date();
                doc.text("Usuario: " + $scope.usuario.persona.nombre_completo + "      Fecha :  " + $scope.fechaATexto(currentDate) + "   Hrs. " + currentDate.getHours() + ":" + currentDate.getMinutes(), 15, 765);
                doc.font('Helvetica-Bold', 8);
                doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 0, 740, { align: "center" });
            }

            $scope.imprimirFiniquito = async function (beneficio, historial, historial2, soloReporte) {

                if (historial2) {
                    $scope.vacacion = {}
                    $scope.beneficio = beneficio
                    $scope.empleado = beneficio.ficha.empleado
                    $scope.empleado.id_ficha = beneficio.ficha.id
                    $scope.empleado.haber_basico = beneficio.ficha.haber_basico
                    $scope.empleado.fecha_inicio = beneficio.ficha.fecha_inicio
                    $scope.empleado.fecha_Retiro_beneficio = new Date(beneficio.fecha_retiro)
                    $scope.empleado.nombre_completo = beneficio.ficha.empleado.persona.nombre_completo
                    $scope.empleado.estado = beneficio.ficha.empleado.persona.estadoCivil.nombre
                    $scope.empleado.direccion = beneficio.ficha.empleado.persona.direccion_zona
                    $scope.empleado.fecha_nacimiento = beneficio.ficha.empleado.persona.fecha_nacimiento
                    $scope.empleado.ci = beneficio.ficha.empleado.persona.ci
                    $scope.empleado.extension = beneficio.ficha.empleado.extension.nombre_corto
                    $scope.empleado.cargos = beneficio.ficha.cargos.map(function (dato) {
                        return dato.cargo.nombre
                    })

                    var fechaActual = new Date()
                    if (beneficio.fecha_retiro) {
                        fechaActual = new Date(beneficio.fecha_retiro)
                    }
                    var fechaAnterior = new Date(beneficio.fecha_ingreso)
                    $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual, 1)
                    $scope.tiempoTrabajado.dias
                    await $scope.obtenerHistorialGestionesVacacion($scope.empleado, false, true)
                    if (!beneficio.mes_uno.nombre) {
                        beneficio.mes_uno = $scope.meses[beneficio.mes_uno]
                    }
                    if (!beneficio.mes_dos.nombre) {
                        beneficio.mes_dos = $scope.meses[beneficio.mes_dos]
                    }
                    if (!beneficio.mes_tres.nombre) {
                        beneficio.mes_tres = $scope.meses[beneficio.mes_tres]
                    }
                    if (beneficio.fecha_retiro) {
                        beneficio.fecha_retiro = $scope.fechaATexto(beneficio.fecha_retiro)
                        beneficio.totalAguinaldo = $scope.CalcularAguinaldoNavidad2(beneficio)
                    }
                    beneficio.ingresos = []
                    beneficio.deducciones = []

                    beneficio.deduccionEingresos.forEach(function (deduccionEIngreso, index, array) {
                        if (deduccionEIngreso.tipo.nombre_corto == "OTRING") {
                            beneficio.ingresos.push(deduccionEIngreso)
                        } else {
                            beneficio.deducciones.push(deduccionEIngreso)
                        }
                        if (index === (array.length - 1)) {

                            beneficio = $scope.calcularDesaucio(beneficio, true)
                            $scope.sumarTotalDeducciones(beneficio)
                        }
                    });
                }
                convertUrlToBase64Image("./img/finiquito.png", function (imagenFiniquito) {
                    convertUrlToBase64Image("./img/finiquito2.png", function (imagenFiniquito2) {
                        var imagen = imagenFiniquito;
                        var imagen2 = imagenFiniquito2
                        var cont = 1
                        var doc = new PDFDocument({ compress: false, size: [612, 936], margin: 10 });
                        var y = 198
                        var stream = doc.pipe(blobStream());
                        var fechaActual = new Date()
                        //primera pagina
                        if (historial) {
                            if (beneficio.fecha_retiro) {
                                fechaActual = new Date(beneficio.fecha_retiro)
                            }
                            var fechaAnterior = new Date(beneficio.fecha_ingreso)
                            $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual, 1)
                            $scope.tiempoTrabajado.dias
                            if (!beneficio.mes_uno.nombre) {
                                beneficio.mes_uno = $scope.meses[beneficio.mes_uno]
                            }
                            if (!beneficio.mes_dos.nombre) {
                                beneficio.mes_dos = $scope.meses[beneficio.mes_dos]
                            }
                            if (!beneficio.mes_tres.nombre) {
                                beneficio.mes_tres = $scope.meses[beneficio.mes_tres]
                            }
                        }
                        doc.image(imagen, 30, 30, { fit: [572, 876] });
                        doc.font('Helvetica', 8);
                        doc.fillColor('#4183C4')
                        y = ($scope.usuario.empresa.razon_social.length > 50) ? 182 : 187
                        doc.text($scope.usuario.empresa.razon_social, 280, y, { width: 250 })
                        doc.text("Servicios", 230, 211, { width: 170 })
                        y = ($scope.usuario.empresa.direccion.length > 29) ? 205 : 211
                        doc.lineGap(-1.7).font('Helvetica', 7).text($scope.usuario.empresa.direccion, 387, y, { width: 170 })
                        y = ($scope.empleado.nombre_completo.length > 40) ? 231 : 236
                        doc.font('Helvetica', 8).text($scope.empleado.nombre_completo, 280, y, { width: 250 })
                        if ($scope.empleado.direccion) {
                            y = ($scope.empleado.direccion.length > 18) ? 254 : 260
                            doc.text($scope.empleado.direccion.charAt(0).toUpperCase() +
                                $scope.empleado.direccion.slice(1).toLowerCase(), 453, y, { width: 110 })
                        }
                        doc.text($scope.empleado.estado, 160, 260, { width: 250 })
                        var cargos = ""
                        if ($scope.empleado.cargos) {
                            $scope.empleado.cargos.forEach(function (cargo) {
                                cargos += cargo + ", "
                            })
                        }
                        doc.text(cargos, 220, 280, { width: 250 })
                        var fechaNacimiento = new Date($scope.empleado.fecha_nacimiento)
                        var dato = $scope.diferenciaEntreDiasEnDias(fechaNacimiento, fechaActual)
                        dato = Math.trunc(dato / 365);
                        doc.text(dato + " años", 325, 260, { width: 250 })
                        doc.text($scope.empleado.ci + " " + $scope.empleado.extension, 120, 298, { width: 250 })
                        const fechaInicioMasCantQuinquenio = new Date(beneficio.fecha_ingreso)
                        if (beneficio.tipo_beneficio) {
                            const anio = fechaInicioMasCantQuinquenio.getFullYear() + beneficio.cantidad_quinquenios * 5;
                            fechaInicioMasCantQuinquenio.setFullYear(anio)
                        }
                        doc.text($scope.fechaATexto(beneficio.fecha_ingreso), 325, 298, { width: 250 })
                        var mes = new Date().getMonth()
                        var anio = new Date().getFullYear()
                        if (beneficio.fecha_retiro) {
                            mes = new Date($scope.convertirFecha(beneficio.fecha_retiro)).getMonth()
                            anio = new Date($scope.convertirFecha(beneficio.fecha_retiro)).getFullYear()
                            dia = new Date($scope.convertirFecha(beneficio.fecha_retiro)).getDate()
                            if (soloReporte) {
                                mes = new Date(beneficio.fecha_retiro.split('/').reverse().join('/')).getMonth()
                                anio = new Date(beneficio.fecha_retiro.split('/').reverse().join('/')).getFullYear()
                            }
                            if (beneficio.tipo_beneficio) {
                                if (moment(fecha, 'DD/MM/YYYY', true).isValid()) {
                                    doc.text(beneficio.fecha_retiro, 490, 298, { width: 250 })
                                } else {
                                    doc.text($scope.fechaATexto(beneficio.fecha_retiro), 490, 298, { width: 250 })
                                }
                            }
                            if (mes == 0 && (beneficio.mes_tres.id) != mes) {
                                anio -= 1


                            }
                        }

                        if (beneficio.motivo) {
                            y = (beneficio.motivo.nombre.length > 18) ? 315 : 320
                            doc.text(beneficio.motivo.nombre, 178, y, { width: 120 })
                        } else {
                            doc.text("QUINQUENIO", 180, 320, { width: 250 })
                        }
                        doc.text($scope.number_format(beneficio.promedio, 2), 490, 320, { width: 250 })
                        if (beneficio.tipo_beneficio) {
                            doc.text($scope.tiempoTrabajado.anios, 195, 343, { width: 250 })
                            doc.text($scope.tiempoTrabajado.meses, 290, 343, { width: 250 })
                            doc.text($scope.tiempoTrabajado.dias, 400, 343, { width: 250 })
                        } else {
                            doc.text(beneficio.cantidad_quinquenios * 5, 195, 343, { width: 250 })
                        }

                        //liquidacion de la remunaracion
                        if (beneficio.mes_uno.id > beneficio.mes_tres.id) {
                            var año2 = anio - 1
                        } else {
                            var año2 = anio
                        }
                        if (beneficio.mes_dos.id > beneficio.mes_tres.id) {
                            var año3 = anio - 1
                        } else {
                            var año3 = anio
                        }
                        doc.font('Helvetica', 8);
                        doc.text(beneficio.usar_primer_mes ? (beneficio.mes_uno.nombre.toUpperCase() + " " + año2) : "", 210, 403)
                        doc.text(beneficio.usar_segundo_mes ? (beneficio.mes_dos.nombre.toUpperCase() + " " + año3) : "", 300, 403)
                        doc.text(beneficio.mes_tres.nombre.toUpperCase() + " " + anio, 390, 403)
                        doc.font('Helvetica', 8);
                        doc.text(beneficio.usar_primer_mes ? $scope.number_format(beneficio.primer_mes, 2) : "", 225, 421)
                        doc.text(beneficio.usar_segundo_mes ? $scope.number_format(beneficio.segundo_mes, 2) : "", 315, 421)
                        doc.text($scope.number_format(beneficio.tercer_mes, 2), 405, 421)
                        doc.text($scope.number_format((beneficio.promedio), 2), 500, 421)
                        doc.text(beneficio.usar_primer_mes ? $scope.number_format(beneficio.primer_mes, 2) : "", 225, 534)
                        doc.text(beneficio.usar_segundo_mes ? $scope.number_format(beneficio.segundo_mes, 2) : "", 315, 534)
                        doc.text($scope.number_format(beneficio.tercer_mes, 2), 405, 534)
                        doc.text($scope.number_format(beneficio.promedio, 2), 500, 534)
                        doc.text($scope.number_format(beneficio.promedio, 2), 500, 553)

                        if (beneficio.tipo_beneficio) {

                            /*  doc.text($scope.number_format(beneficio.promedio, 2), 435, 600) */

                            var totalOtros = 0, totalOtrosMotivo = "";
                            var totalIndemnizacion = 0
                            for (var i = 0; i < beneficio.ingresos.length; i++) {
                                var element = beneficio.ingresos[i];

                                if (element.motivo === "Desahucio") {
                                    doc.text($scope.number_format(beneficio.total_desahucio, 2), 503, 580)
                                } else if (element.motivo === "indemnizacion años") {
                                    doc.text($scope.tiempoTrabajado.anios - (beneficio.cantidad_quinquenios * 5), 325, 600)
                                    doc.text($scope.number_format(element.monto, 2), 435, 600)
                                    totalIndemnizacion += element.monto
                                    doc.text($scope.number_format(element.monto, 2), 503, 600)
                                } else if (element.motivo === "indemnizacion meses") {
                                    doc.text($scope.tiempoTrabajado.meses, 325, 620)
                                    doc.text($scope.number_format(element.monto, 2), 435, 620)
                                    totalIndemnizacion += element.monto
                                    doc.text($scope.number_format(element.monto, 2), 503, 620)
                                } else if (element.motivo === "indemnizacion dias") {
                                    doc.text($scope.tiempoTrabajado.dias, 325, 638)
                                    doc.text($scope.number_format(element.monto, 2), 435, 638)
                                    totalIndemnizacion += element.monto
                                    doc.text($scope.number_format(element.monto, 2), 503, 638)
                                } else if (element.motivo === "Vacacion") {
                                    doc.text(beneficio.totalV, 415, 672)
                                    doc.text($scope.number_format(element.monto, 2), 503, 672)
                                } else if (element.motivo === "Aguinaldo de navidad") {
                                    let anio1 = fechaInicioMasCantQuinquenio.getFullYear();
                                    let anioActual = new Date().getFullYear()
                                    let tiempoTrabajado = 0
                                    if (anio1 === anioActual) {
                                        tiempoTrabajado = duration(fechaInicioMasCantQuinquenio, new Date($scope.convertirFecha(beneficio.fecha_retiro)), 1)
                                    } else {
                                        let fechaInicio = new Date(2020, 0, 1)
                                        tiempoTrabajado = duration(fechaInicio, new Date($scope.convertirFecha(beneficio.fecha_retiro)), 1)
                                    }
                                    beneficio.mesesAguinaldo = tiempoTrabajado.meses
                                    beneficio.diasAguinaldo = tiempoTrabajado.dias
                                    doc.text(beneficio.mesesAguinaldo, 325, 654)
                                    doc.text(beneficio.diasAguinaldo, 415, 654)
                                    doc.text($scope.number_format(element.monto, 2), 503, 654)
                                } else {
                                    totalOtros += element.monto
                                    totalOtrosMotivo += element.motivo + ", "
                                }
                                if (i === (beneficio.ingresos.length - 1)) {
                                    if (totalOtrosMotivo.length > 72) {
                                        totalOtrosMotivo = totalOtrosMotivo.substring(0, 72);
                                        totalOtrosMotivo += "..."
                                    }
                                    doc.text(totalOtrosMotivo, 100, 709)
                                    doc.text($scope.number_format(totalOtros, 2), 503, 709)
                                }
                            }
                            doc.text($scope.number_format(beneficio.total_ingresos, 2), 503, 745)
                            if (beneficio.deducciones.length > 0) {
                                y = 795
                                let totalDeduccion = 0
                                for (var i = 0; i < beneficio.deducciones.length; i++) {
                                    var element = beneficio.deducciones[i]
                                    doc.text($scope.number_format(element.monto, 2), 365, y)
                                    doc.text(element.motivo, 55, y)
                                    y += 18
                                    totalDeduccion = totalDeduccion + element.monto
                                    beneficio.total_ingresos = beneficio.total_ingresos - element.monto
                                    if (i === (beneficio.deducciones.length - 1)) {
                                        if (beneficio.tipo_beneficio) {
                                            doc.text(beneficio.cantidad_quinquenios + " Quinquenios pagados.", 55, 867)
                                            doc.text($scope.number_format(beneficio.total_ingresos, 2), 503, 885)
                                        }
                                        doc.text($scope.number_format(totalDeduccion, 2), 503, 867)
                                    }
                                }
                            } else {
                                if (beneficio.tipo_beneficio) {
                                    doc.text(beneficio.cantidad_quinquenios + " Quinquenios pagados.", 55, 867)
                                }
                                doc.text($scope.number_format(beneficio.total_ingresos, 2), 503, 885)
                            }
                        } else {
                            doc.text($scope.number_format(beneficio.cantidad_quinquenios * 5, 0), 325, 600)
                            doc.text($scope.number_format(beneficio.promedio, 2), 435, 600)
                            doc.text($scope.number_format(beneficio.total_quinquenio, 2), 503, 600)
                            doc.text($scope.number_format(beneficio.total_quinquenio, 2), 503, 745)
                            doc.text($scope.number_format(beneficio.total_quinquenio, 2), 503, 885)
                        }
                        //segunda pagina
                        doc.addPage({ margin: 0, size: [612, 936], bufferPages: true });
                        doc.image(imagen2, 30, 30, { fit: [572, 876] });
                        doc.font('Helvetica', 8);
                        doc.fillColor('#4183C4')


                        doc.text($scope.empleado.nombre_completo, 70, 130)
                        doc.text($scope.empleado.ci + " " + $scope.empleado.extension, 215, 148)
                        if (beneficio.tipo_beneficio) {
                            doc.text(ConvertirALiteral(beneficio.total_ingresos.toFixed(2)), 250, 73, { width: 470, lineGap: 8 })
                            doc.text("Bs. " + $scope.number_format(beneficio.total_ingresos, 2), 220, 167)
                        } else {
                            doc.text(ConvertirALiteral(beneficio.total_quinquenio.toFixed(2)), 250, 73, { width: 470, lineGap: 8 })
                            doc.text("Bs. " + $scope.number_format(beneficio.total_quinquenio, 2), 220, 167)
                        }
                        if (beneficio.cuenta == undefined) {
                            doc.text("X", 215, 53)
                        } else {
                            doc.text("X", 315, 53)
                            doc.text(beneficio.cuenta.numero, 500, 53)
                        }
                        doc.text($scope.usuario.empresa.departamento.nombre, 155, 240)
                        let dia2 = new Date(beneficio.fecha_asistensia).getDate()
                        doc.text(dia2, 255, 240)
                        let mesAsistio = new Date(beneficio.fecha_asistensia).getMonth()
                        doc.text($scope.meses[mesAsistio].nombre.toUpperCase(), 330, 240)
                        let anio2 = new Date(beneficio.fecha_asistensia).getFullYear()
                        doc.text(anio2.toString().substr(-2), 515, 240)

                        doc.text($scope.empleado.nombre_completo.toUpperCase(), 65, 325, { width: 250, align: "center" })
                        doc.text(beneficio.empleado_cargo_impresion.toUpperCase(), 320, 325, { width: 250, align: "center" })
                        doc.fillColor('#000000')
                        doc.text(beneficio.cargo_imprecion.toUpperCase(), 400, 335)
                        doc.end();
                        stream.on('finish', function () {

                            var fileURL = stream.toBlobURL('application/pdf');
                            window.open(fileURL, '_blank', 'location=no');
                        });
                        /*   if (historial2) {
                              $scope.paginator.getSearch($scope.paginator.search, $scope.filtroBeneficioEmpresa, null)
                          } */
                        blockUI.stop();


                    })
                })
            }

            $scope.imprimirFiniquitoSegundoFormato = async function (beneficio, historial, historial2, soloReporte) {
                $scope.vacacion = {}
                $scope.beneficio = beneficio
                $scope.empleado = beneficio.ficha.empleado
                $scope.empleado.id_ficha = beneficio.ficha.id
                $scope.empleado.haber_basico = beneficio.ficha.haber_basico
                $scope.empleado.fecha_inicio = beneficio.ficha.fecha_inicio
                $scope.empleado.fecha_Retiro_beneficio = new Date(beneficio.fecha_retiro)
                $scope.empleado.nombre_completo = beneficio.ficha.empleado.persona.nombre_completo
                $scope.empleado.estado = beneficio.ficha.empleado.persona.estadoCivil.nombre
                $scope.empleado.direccion = beneficio.ficha.empleado.persona.direccion_zona
                $scope.empleado.fecha_nacimiento = beneficio.ficha.empleado.persona.fecha_nacimiento
                $scope.empleado.ci = beneficio.ficha.empleado.persona.ci
                $scope.empleado.extension = beneficio.ficha.empleado.extension.nombre_corto
                $scope.empleado.cargos = beneficio.ficha.cargos.map(function (dato) {
                    return dato.cargo.nombre
                })

                let fechaActual = new Date()
                if ($scope.beneficio.fecha_retiro) {
                    fechaActual = new Date(beneficio.fecha_retiro)
                }
                const fechaAnterior = new Date(beneficio.fecha_ingreso)
                $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual, 1)
                $scope.tiempoTrabajado.dias
                await $scope.obtenerHistorialGestionesVacacion($scope.empleado, false, true)
                if ($scope.beneficio.mes_uno && !$scope.beneficio.mes_uno.nombre) {
                    $scope.beneficio.mes_uno = $scope.meses[beneficio.mes_uno]
                }
                if ($scope.beneficio.mes_dos && !$scope.beneficio.mes_dos.nombre) {
                    $scope.beneficio.mes_dos = $scope.meses[beneficio.mes_dos]
                }
                if ($scope.beneficio.mes_tres && !$scope.beneficio.mes_tres.nombre) {
                    $scope.beneficio.mes_tres = $scope.meses[beneficio.mes_tres]
                }
                if ($scope.beneficio.fecha_retiro) {
                    $scope.beneficio.fecha_retiro = $scope.fechaATexto(beneficio.fecha_retiro)
                    $scope.beneficio.totalAguinaldo = $scope.CalcularAguinaldoNavidad2(beneficio)
                }
                $scope.beneficio.ingresos = []
                $scope.beneficio.deducciones = []

                for (let index = 0; index < $scope.beneficio.deduccionEingresos.length; index++) {
                    if ($scope.beneficio.deduccionEingresos[index].tipo.nombre_corto == "OTRING") {
                        $scope.beneficio.ingresos.push($scope.beneficio.deduccionEingresos[index])
                    } else {
                        $scope.beneficio.deducciones.push($scope.beneficio.deduccionEingresos[index])
                    }
                }
                $scope.beneficio = $scope.calcularDesaucio($scope.beneficio, true)
                const doc = new PDFDocument({ compress: false, size: [612, 936], margin: 60 });
                let y = 40
                let alineacionTituloDato = 40
                let alineacionDatoIzquierda = 140
                const stream = doc.pipe(blobStream());
                const fechaNacimiento = new Date($scope.empleado.fecha_nacimiento)
                let dato = $scope.diferenciaEntreDiasEnDias(fechaNacimiento, fechaActual)
                dato = Math.trunc(dato / 365);
                //primera pagina
                if (historial) {
                    let fechaActual = new Date()
                    if (beneficio.fecha_retiro) {
                        fechaActual = new Date(beneficio.fecha_retiro)
                    }
                    let fechaAnterior = new Date(beneficio.fecha_ingreso)
                    $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual, 1)
                    $scope.tiempoTrabajado.dias
                    if (!beneficio.mes_uno.nombre) {
                        beneficio.mes_uno = $scope.meses[beneficio.mes_uno]
                    }
                    if (!beneficio.mes_dos.nombre) {
                        beneficio.mes_dos = $scope.meses[beneficio.mes_dos]
                    }
                    if (!beneficio.mes_tres.nombre) {
                        beneficio.mes_tres = $scope.meses[beneficio.mes_tres]
                    }
                }
                doc.font('Helvetica-Bold', 16);
                doc.text('"' + $scope.usuario.empresa.razon_social + '"', 0, y, { align: "center" });
                y += 20

                doc.font('Helvetica', 14);
                doc.text("F I N I Q U I T O", 0, y, { align: "center" });
                y += 20

                doc.font('Helvetica', 10);
                doc.text("Nombre y Apellido:", alineacionTituloDato, y);
                doc.font('Helvetica-Bold', 10);
                doc.font('Helvetica', 8);
                doc.text($scope.empleado.nombre_completo.toUpperCase(), alineacionDatoIzquierda, y)
                y += 20

                doc.font('Helvetica', 10);
                doc.text("Campamento:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text(($scope.empleado.campo ? $scope.empleado.campo.nombre : '- -'), alineacionDatoIzquierda, y)
                y += 20

                doc.font('Helvetica', 10);
                doc.text("Fecha de ingreso:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                const fechaInicioMasCantQuinquenio = new Date(beneficio.fecha_ingreso)
                if (beneficio.tipo_beneficio) {
                    const anio = fechaInicioMasCantQuinquenio.getFullYear() + beneficio.cantidad_quinquenios * 5;
                    fechaInicioMasCantQuinquenio.setFullYear(anio)
                }
                doc.text((beneficio.fecha_ingreso ? $scope.fechaATexto(fechaInicioMasCantQuinquenio, true) : ' - - - '), alineacionDatoIzquierda, y, { align: "right" })
                doc.text((beneficio.fecha_ingreso ? $scope.fechaATexto(beneficio.fecha_ingreso, true) : ' - - - '), alineacionDatoIzquierda + 300, y)
                y += 20

                doc.font('Helvetica', 10);
                doc.text("Fecha de retiro:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text((beneficio.fecha_retiro ? $scope.fechaATexto(beneficio.fecha_retiro, true) : ' - - - '), alineacionDatoIzquierda, y, { align: "right" })
                y += 10

                doc.text("años", -80, y, { align: "center" })
                doc.text("meses", 0, y, { align: "center" })
                doc.text("días", 80, y, { align: "center" })
                y += 10
                doc.font('Helvetica', 10);
                doc.text("T. Trabajado:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                if (beneficio.tipo_beneficio) {
                    doc.text($scope.tiempoTrabajado.anios - (beneficio.cantidad_quinquenios * 5), -80, y, { align: "center" })
                    doc.text($scope.tiempoTrabajado.meses, 0, y, { align: "center" })
                    doc.text($scope.tiempoTrabajado.dias, 80, y, { align: "center" })
                } else {
                    doc.text(beneficio.cantidad_quinquenios * 5, -80, y, { align: "center" })
                    doc.text("-", 0, y, { align: "center" })
                    doc.text("-", 80, y, { align: "center" })
                }
                y += 20

                doc.font('Helvetica', 10);
                doc.text("Vacaciones:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                /* doc.text("0", -80, y, { align: "center" })
                doc.text("0", 0, y, { align: "center" }) */
                let vacacionIngreso = beneficio.ingresos.find((x) => {
                    return x.motivo === "Vacacion"
                })
                if (vacacionIngreso) { doc.text(($scope.beneficio.totalV ? beneficio.totalV : '0'), 80, y, { align: "center" }) }
                y += 20

                doc.font('Helvetica', 10);
                doc.text("T. Trabajado último año:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text('0', -80, y, { align: "center" })
                if ($scope.filtroBeneficioEmpresa.tipo == 1) {
                    let anio1 = fechaInicioMasCantQuinquenio.getFullYear();
                    let anioActual = new Date().getFullYear()
                    let tiempoTrabajado = 0
                    if (anio1 === anioActual) {
                        tiempoTrabajado = duration(fechaInicioMasCantQuinquenio, new Date($scope.convertirFecha(beneficio.fecha_retiro)), 1)
                    } else {
                        let fechaInicio = new Date(2020, 0, 1)
                        tiempoTrabajado = duration(fechaInicio, new Date($scope.convertirFecha(beneficio.fecha_retiro)), 1)
                    }
                    beneficio.mesesAguinaldo = tiempoTrabajado.meses
                    beneficio.diasAguinaldo = tiempoTrabajado.dias
                }
                doc.text((beneficio.mesesAguinaldo ? beneficio.mesesAguinaldo : '0'), 0, y, { align: "center" })
                doc.text((beneficio.diasAguinaldo ? beneficio.diasAguinaldo : '0'), 80, y, { align: "center" })
                y += 20

                doc.font('Helvetica', 10);
                doc.text("Motivo de retiro:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text((beneficio.motivo ? beneficio.motivo.nombre : "QUINQUENIO"), alineacionDatoIzquierda, y)
                y += 20
                if (beneficio.tipo_beneficio) {
                    doc.font('Helvetica', 10);
                    doc.text("Total quinquenios:", alineacionTituloDato, y);
                    doc.font('Helvetica', 8);
                    doc.text(beneficio.cantidad_quinquenios, alineacionDatoIzquierda, y)
                    y += 20
                }
                doc.font('Helvetica', 10);
                doc.text("Sueldo promedio:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text(beneficio.usar_primer_mes ?  $scope.number_format(beneficio.primer_mes, 2) : "0.00", -80, y, { align: "center" })
                doc.text( beneficio.usar_segundo_mes ? $scope.number_format(beneficio.segundo_mes, 2)  : "0.00", 0, y, { align: "center" })
                doc.text($scope.number_format(beneficio.tercer_mes, 2), 80, y, { align: "center" })
                doc.text($scope.number_format(beneficio.promedio, 2), alineacionDatoIzquierda, y, { align: "right" })
                y += 20

                doc.font('Helvetica', 10);
                doc.text("Valor duodécima:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text($scope.number_format(beneficio.promedio / 12, 2), alineacionDatoIzquierda, y, { align: "right" })
                y += 20

                doc.font('Helvetica-Bold', 16);
                doc.text("L I Q U I D A C I Ó N", 0, y, { align: "center" });
                y += 20

                let totalOtros = 0, totalOtrosMotivo = "";
                let totalVacaciones = 0;
                let totalIndemnizacion = 0, total_deducciones = 0, totalAguinaldo = 0;
                if (beneficio.tipo_beneficio) {
                    for (let i = 0; i < beneficio.ingresos.length; i++) {
                        const element = beneficio.ingresos[i];
                        if (element.motivo === "Desahucio") {
                        } else if (element.motivo === "indemnizacion años") {
                            totalIndemnizacion += element.monto
                        } else if (element.motivo === "indemnizacion meses") {
                            totalIndemnizacion += element.monto
                        } else if (element.motivo === "indemnizacion dias") {
                            totalIndemnizacion += element.monto
                        } else if (element.motivo === "Vacacion") {
                            totalVacaciones += element.monto
                        } else if (element.motivo === "Aguinaldo de navidad") {
                            totalAguinaldo += element.monto
                        } else {
                            totalOtros += element.monto
                        }
                    }
                    if (beneficio.deducciones.length > 0) {
                        for (let i = 0; i < beneficio.deducciones.length; i++) {
                            const element = beneficio.deducciones[i]
                            total_deducciones += element.monto
                        }
                    }
                } else {
                    totalIndemnizacion += beneficio.total_quinquenio
                }

                var total_desahucioGet = 0;
                if (typeof beneficio.total_desahucio != 'undefined') {
                    total_desahucioGet = beneficio.total_desahucio;
                }
                const subtotal = totalOtros + totalVacaciones + totalIndemnizacion + totalAguinaldo + total_desahucioGet;
                const totalApagar = subtotal - total_deducciones;
                doc.font('Helvetica', 10);
                doc.text("Desahucio:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text(($scope.beneficio.total_desahucio ? $scope.number_format($scope.beneficio.total_desahucio, 2) : '0.00'), alineacionDatoIzquierda, y, { align: "right" })
                y += 20

                doc.font('Helvetica', 10);
                doc.text("Indemnización:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text($scope.number_format(totalIndemnizacion, 2), alineacionDatoIzquierda, y, { align: "right" })
                y += 20


                doc.font('Helvetica', 10);
                doc.text("Aguinaldo:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text((totalAguinaldo ? $scope.number_format(totalAguinaldo, 2) : '0.00'), alineacionDatoIzquierda, y, { align: "right" })
                y += 20

                doc.font('Helvetica', 10);
                doc.text("Vacación:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text((totalVacaciones ? $scope.number_format(totalVacaciones, 2) : '0.00'), alineacionDatoIzquierda, y, { align: "right" })
                y += 20

                doc.font('Helvetica', 10);
                doc.text("Prima legal:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text("0.00", alineacionDatoIzquierda, y, { align: "right" })
                y += 20
                //** */
                doc.font('Helvetica', 10);
                doc.text("Otros ingresos:", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                doc.text((totalOtros ? $scope.number_format(totalOtros, 2) : '0.00'), alineacionDatoIzquierda, y, { align: "right" })
                y += 20

                doc.font('Helvetica', 10);
                doc.text("SUB TOTAL", 0, y, { align: "center" })
                doc.font('Helvetica', 8);
                doc.text((subtotal ? $scope.number_format(subtotal, 2) : '0.00'), alineacionDatoIzquierda, y, { align: "right" })
                y += 20

                doc.font('Helvetica', 10);
                doc.text("DESCUENTOS: 13 % IVA s/P. Legal", alineacionTituloDato, y);
                doc.font('Helvetica', 8);
                y += 20
                doc.font('Helvetica-Bold', 10);
                let = arrayTextoMotivosDeducciones = beneficio.deducciones.reduce((val, x, i, a) => {
                    if (i === (a.length - 1)) {
                        val = val + x.motivo + "."
                    } else {
                        val = val + x.motivo + ","
                    }
                    return val
                }, "Total deducciones de ")
                doc.text("Nota: ", alineacionTituloDato, y);
                doc.font('Helvetica', 10);
                doc.text(arrayTextoMotivosDeducciones, alineacionTituloDato + 40, y, { width: 400 });
                doc.text((total_deducciones ? $scope.number_format(total_deducciones, 2) : '0.00'), alineacionDatoIzquierda, y, { align: "right" })
                y += arrayTextoMotivosDeducciones.length > 87 ? 40 : 20

                doc.rect(375, y - 5, 180, 15, { align: "right" }).stroke();
                doc.text("LIQUIDO A PAGAR", 60, y, { align: "center" })
                doc.text(((totalApagar ? $scope.number_format(totalApagar, 2) : '0.00')), alineacionDatoIzquierda, y, { align: "right" })
                y += 20

                let montoTotalLiteral = ConvertirALiteral(totalApagar.toFixed(2))
                doc.font('Helvetica-Bold', 10);
                doc.text("SON: ", alineacionTituloDato, y);
                doc.font('Helvetica', 10);
                doc.text(montoTotalLiteral, alineacionTituloDato + 40, y);
                y += 20

                doc.font('Helvetica', 10);
                doc.text("Yo, " + $scope.empleado.nombre_completo + ", declaro que la suma de Bs." + (totalApagar ? $scope.number_format(totalApagar, 2) : '0.00') + " es correcta y de acuerdo a lo que estipula la Ley General del Trabajo, y manifiesto mi conformidad con este finiquito, renunciando a cualquier reclamación posterior o acción legal por pago de Beneficios Sociales u otros.", alineacionTituloDato, y, { width: 500 });
                y += 60

                var fechaElaboracion = new Date(beneficio.fecha_elaboracion)
                let dia2 = new Date(beneficio.fecha_asistensia).getDate()
                let mesAsistio = new Date(beneficio.fecha_asistensia).getMonth()
                let anio2 = new Date(beneficio.fecha_asistensia).getFullYear()
                doc.text($scope.usuario.empresa.departamento.nombre + ". " + dia2 + " DE " + $scope.meses[mesAsistio].nombre.toUpperCase() + " " + anio2.toString(), 0, y, { align: "center" })
                y += 80

                doc.rect(40, y - 5, 140, 0, { align: "left" }).stroke();
                doc.text($scope.usuario.empresa.razon_social.toUpperCase(), 80, y, { align: "left" })
                doc.rect(210, y + 35, 140, 0, { align: "center" }).stroke();
                doc.text('INSPECTOR DEL TRABAJO', 0, y + 40, { align: "center" })
                doc.rect(400, y - 5, 140, 0, { align: "right" }).stroke();
                doc.text($scope.empleado.nombre_completo, -40, y, { align: "right" })

                doc.end();
                stream.on('finish', function () {

                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
                blockUI.stop();
            }



            var mes_text = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];

            var dia_text = ["Dom", "Lun", "Mar", "Mie", "Juv", "Vie", "Sab"];



            $scope.obtenerChoferesViaje = function () {
                var promesa = ListaChoferesViaje($scope.usuario.id_empresa)
                promesa.then(function (dato) {
                    $scope.choferesViaje = dato
                })
            }

            $scope.CalendarioRolTurnosViajes = function (anio, filtro) {
                $scope.mesesRolTurno = []
                var diasAnio = []
                if (filtro) {
                    if (filtro.inicio) {
                        var inicio = new Date($scope.convertirFecha(filtro.inicio)).getMonth()
                        var fin = new Date($scope.convertirFecha(filtro.fin)).getMonth()
                        var diaInicio = new Date($scope.convertirFecha(filtro.inicio)).getDate()
                        var diafin = new Date($scope.convertirFecha(filtro.fin)).getDate()
                        var anioInicio = new Date($scope.convertirFecha(filtro.inicio)).getFullYear()
                        var aniofin = new Date($scope.convertirFecha(filtro.fin)).getFullYear()
                        if (filtro.inicio2) {
                            inicio = new Date($scope.convertirFecha(filtro.inicio2)).getMonth()
                            diaInicio = new Date($scope.convertirFecha(filtro.inicio2)).getDate()
                            var anioInicio = new Date($scope.convertirFecha(filtro.inicio2)).getFullYear()
                        }
                        if (filtro.fin2) {
                            var fin = new Date($scope.convertirFecha(filtro.fin2)).getMonth()
                            var diafin = new Date($scope.convertirFecha(filtro.fin2)).getDate()
                            var aniofin = new Date($scope.convertirFecha(filtro.fin2)).getFullYear()
                        }
                    }
                }
                for (var l = 0; l < anio.length; l++) {
                    var elementanio = anio[l];
                    var meses = Object.assign([], $scope.meses)
                    meses.forEach(function (mes, index, array) {
                        var cmes = Object.assign({}, mes)
                        cmes.dias = []
                        cmes.anio = elementanio
                        if (filtro) {
                            if (filtro.inicio) {
                                if (elementanio >= anioInicio && elementanio <= aniofin) {
                                    if (cmes.id > inicio - 1 && cmes.id <= fin) {
                                        cmes.visible = true
                                    } else {
                                        cmes.visible = false
                                    }
                                } else {
                                    cmes.visible = false
                                }
                            } else {
                                cmes.visible = true
                            }
                        } else {
                            cmes.visible = true
                        }
                        $scope.mesesRolTurno.push(cmes)
                        if (index === (array.length - 1)) {
                            let diasDelAño = moment([elementanio]).isLeapYear()?366:365;
                            for (var i = 1; i <= diasDelAño; i++) {
                                var fecha = $scope.fechaPorDia(elementanio, i);
                                var mes = fecha.getMonth();
                                var dia = fecha.getDate()
                                var anio = fecha.getFullYear()
                                var dia_semana = fecha.getDay();
                                var mesRolT = $scope.mesesRolTurno.find(function (rol) {
                                    return (rol.anio == anio && rol.id == mes)
                                })
                                var compareDate = moment($scope.fechaATexto(fecha), "DD/MM/YYYY");
                                var startDate = moment(filtro.inicio2, "DD/MM/YYYY");
                                var endDate = moment(filtro.fin2, "DD/MM/YYYY");
                                var value = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
                                if (value && mesRolT) {
                                    mesRolT.visible = true
                                }
                                var diaactual = { id: i, dia: dia, visible: true, texto: "", fecha: $scope.fechaATexto(fecha), mes: mesRolT }
                                if (value) {
                                    diasAnio.push(diaactual)
                                } else {
                                    diaactual.visible = false
                                    diasAnio.push(diaactual)
                                }
                                for (var j = 0; j < $scope.mesesRolTurno.length; j++) {
                                    var element = $scope.mesesRolTurno[j];
                                    if (element.anio == elementanio) {
                                        if (element.id == mes) {
                                            if (element.id == inicio) {
                                                if (dia >= diaInicio) {
                                                    element.dias.push(dia)
                                                }
                                            } else if (element.id == fin) {
                                                if (dia <= diafin) {
                                                    element.dias.push(dia)
                                                }
                                            } else {
                                                element.dias.push(dia)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
            
                return diasAnio
            }
            
            $scope.realizarCalendarioTrabajoViajes = function (filtro, empleadosRolTurno) {
                var anio = []
                if (filtro) {
                    if (filtro.inicio) {
                        var inicio = new Date($scope.convertirFecha(filtro.inicio)).getFullYear();
                        var fin = new Date($scope.convertirFecha(filtro.fin2)).getFullYear();
                        while (inicio <= fin) {
                            anio.push(inicio)
                            inicio++
                        }
                    }
                } else {
                    anio.push(new Date().getFullYear())
                }
            
                $scope.diasAnio = $scope.CalendarioRolTurnosViajes(anio, filtro)
            
                if (empleadosRolTurno) {
                    for (rol of empleadosRolTurno) {
                        rol.contador_dias_Trabajados = 0
                        rol.contador_dias_vacaciones = 0
                        rol.contador_dias_descanso = 0
                        rol.contador_noche_trabajadas = 0
                        rol.contador_dias_ausencia_medica = 0
                        rol.contador_dias_otras_ausencia = 0
                        rol.contador_suma_total = 0
                        var anio = []
                        if (filtro) {
                            if (filtro.inicio) {
                                var inicio = new Date($scope.convertirFecha(filtro.inicio)).getFullYear();
                                var fin = new Date($scope.convertirFecha(filtro.fin2)).getFullYear();
                                while (inicio <= fin) {
                                    anio.push(inicio)
                                    inicio++
                                }
                            }
                        } else {
                            anio.push(new Date().getFullYear())
                        }
                        // rol.diasAnio =  $scope.CalendarioRolTurnos(anio, filtro, rol)
                        rol.diasAnio = angular.copy($scope.diasAnio);
                        var rolturno = rol
                        var fechaFin = ""
                        if (rolturno.fecha_fin) {
                            fechaFin = $scope.fechaATexto(rolturno.fecha_fin)
                        }
                        var bandera = false
                        var a = 1
            
                        for (var i = 0; i < rol.diasAnio.length; i++) {
                            var element = rol.diasAnio[i];
                            var compareDate = moment(element.fecha, "DD/MM/YYYY");
                            var startDate = moment($scope.fechaATexto(rol.fecha_inicio), "DD/MM/YYYY");
                            var endDate = moment(rol.fecha_fin ? $scope.fechaATexto(rol.fecha_fin) : filtro.fin2, "DD/MM/YYYY");
                            var value = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
                            var startDate = moment(filtro.inicio2, "DD/MM/YYYY");
                            var endDate = moment(filtro.fin2, "DD/MM/YYYY");
                            var value2 = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
                            if (element.fecha == $scope.fechaATexto(rolturno.fecha_inicio)) {
                                bandera = true
                            } else if (value) {
                                bandera = true
                            }
                            if (bandera) {
                                if (a <= rolturno.dias_trabajado) {
                                    if (rolturno.fecha_fin) {
                                        if (fechaFin == element.fecha) {
                                            i = rol.diasAnio.length
                                            // element.texto = "T"
                                            if (rolturno.turno_dia) {
                                                element.texto = "T"
                                                if (value && value2) {
                                                    rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                                }
                                            } else {
                                                element.texto = "NT"
                                                if (value && value2) {
                                                    rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                                }
                                            }
                                        } else {
                                            var anio = fechaFin.split("/")[2]
                                            var anioInicio = element.fecha.split("/")[2]
                                            var mes = fechaFin.split("/")[1]
                                            var mesInicio = element.fecha.split("/")[1]
                                            var dia = fechaFin.split("/")[0]
                                            var diaInicio = element.fecha.split("/")[0]
                                            if (anio >= anioInicio) {
            
                                                // element.texto = "T"
                                                if (rolturno.turno_dia) {
                                                    element.texto = "T"
                                                    if (value && value2) {
                                                        rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                                    }
                                                } else {
                                                    element.texto = "NT"
                                                    if (value && value2) {
                                                        rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                                    }
                                                }
                                            }
                                        }
                                        a++
                                    } else {
                                        // element.texto = "T"
                                        var finFiltro = new Date($scope.convertirFecha(filtro.fin2))
                                        var fechaInicioRol = new Date(rolturno.fecha_inicio)
                                        if (fechaInicioRol <= finFiltro) {
                                            if (rolturno.turno_dia) {
                                                element.texto = "T"
                                                if (value && value2) {
                                                    rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                                }
                                            } else {
                                                element.texto = "NT"
                                                if (value && value2) {
                                                    rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                                }
                                            }
                                        }
                                        a++
                                    }
                                } else if (a <= (rolturno.dias_trabajado + rolturno.dias_descanso)) {
                                    if (rolturno.fecha_fin) {
                                        if (fechaFin == element.fecha) {
                                            i = rol.diasAnio.length
                                            element.texto = "D"
                                            if (value && value2) {
                                                rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                            }
                                        }
                                        else {
                                            var anio = fechaFin.split("/")[2]
                                            var anioInicio = element.fecha.split("/")[2]
                                            var mes = fechaFin.split("/")[1]
                                            var mesInicio = element.fecha.split("/")[1]
                                            var dia = fechaFin.split("/")[0]
                                            var diaInicio = element.fecha.split("/")[0]
                                            if (anio >= anioInicio) {
            
                                                element.texto = "D"
                                                if (value && value2) {
                                                    rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                                }
                                            }
                                        }
                                        if (a === (rolturno.dias_trabajado + rolturno.dias_descanso)) {
                                            a = 0
                                        }
                                        a++
                                    } else {
                                        element.texto = "D"
                                        if (a === (rolturno.dias_trabajado + rolturno.dias_descanso)) {
                                            a = 0
                                        }
                                        if (value && value2) {
                                            rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                        }
                                        a++
                                    }
                                }
                            }
                            // inicio roles extras
                            if (rol.turnosExtra) {
                                if (rol.turnosExtra.length > 0) {
                                    for (const turnoExtra of rol.turnosExtra) {
                                        var compareDate = moment(element.fecha, "DD/MM/YYYY");
                                        var startDate = moment($scope.fechaATexto(turnoExtra.fecha_inicio), "DD/MM/YYYY");
                                        var endDate = moment($scope.fechaATexto(turnoExtra.fecha_fin), "DD/MM/YYYY");
                                        var value = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
                                        if (value && value2) {
                                            let tipoRolTurnoExtra = $scope.tiposRolTurnoExtra.find(function (x) {
                                                return x.id == turnoExtra.id_tipo
                                            })
                                            if (tipoRolTurnoExtra.nombre_corto == "NOCHE") {
                                                if (element.texto == "D") {
                                                    element.texto = "NT"
                                                    rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                                    rol.contador_dias_descanso = rol.contador_dias_descanso - 1
                                                } else if (element.texto == "T") {
                                                    element.texto = "NT"
                                                    rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                                    rol.contador_dias_Trabajados = rol.contador_dias_Trabajados - 1
                                                } else {
                                                    element.texto = "NT"
                                                    rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                                }
                                            }
                                            else if (tipoRolTurnoExtra.nombre_corto == "DIA") {
                                                if (element.texto == "D") {
                                                    element.texto = "T"
                                                    rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                                    rol.contador_dias_descanso = rol.contador_dias_descanso - 1
                                                } else if (element.texto == "NT") {
                                                    element.texto = "T"
                                                    rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                                    rol.contador_noche_trabajadas = rol.contador_noche_trabajadas - 1
                                                } else {
                                                    element.texto = "T"
                                                    rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                                }
                                            }
                                            else if (tipoRolTurnoExtra.nombre_corto == "DESCANSO") {
                                                if (element.texto == "NT") {
                                                    element.texto = "D"
                                                    rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                                    rol.contador_noche_trabajadas = rol.contador_noche_trabajadas - 1
                                                } else if (element.texto == "T") {
                                                    element.texto = "D"
                                                    rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                                    rol.contador_dias_Trabajados = rol.contador_dias_Trabajados - 1
                                                } else {
                                                    element.texto = "D"
                                                    rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            // fin roles extras
                            if (rol.ficha.ausencias.length > 0) {
                                for (var j = 0; j < rol.ficha.ausencias.length; j++) {
                                    var element1 = rol.ficha.ausencias[j];
                                    var startDate = new Date(element1.fecha_inicio);
                                    var endDate = new Date(element1.fecha_fin);
                                    var fechasausencias = getDates(startDate, endDate);
            
                                    if (fechasausencias.length > 0) {
                                        var element2 = fechasausencias.find(function (x) {
                                            return x == $scope.formatofecha(element.fecha)
                                        })
                                        var compareDate = moment(element.fecha, "DD/MM/YYYY");
                                        var startDate = moment($scope.fechaATexto(rol.fecha_inicio), "DD/MM/YYYY");
                                        var endDate = moment(rol.fecha_fin ? $scope.fechaATexto(rol.fecha_fin) : filtro.fin2, "DD/MM/YYYY");
                                        var value = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
                                        var startDate = moment(filtro.inicio2, "DD/MM/YYYY");
                                        var endDate = moment(filtro.fin2, "DD/MM/YYYY");
                                        var value2 = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
            
                                        if (element2 && element1.eliminado === false) {
                                            if (element.texto == "D") {
                                                if (element1.horas) {
                                                    element.texto += "OA"
                                                    if (value && value2) {
                                                        rol.contador_dias_otras_ausencia = rol.contador_dias_otras_ausencia + 1
                                                        rol.contador_dias_descanso = rol.contador_dias_descanso - 1
                                                    }
                                                } else {
                                                    element.texto += "BD"
                                                    if (value && value2) {
                                                        rol.contador_dias_ausencia_medica = rol.contador_dias_ausencia_medica + 1
                                                        rol.contador_dias_descanso = rol.contador_dias_descanso - 1
                                                    }
                                                }
                                            } else if (element.texto == "T") {
                                                if (element1.horas) {
                                                    element.texto += "OA"
                                                    if (value && value2) {
                                                        rol.contador_dias_otras_ausencia = rol.contador_dias_otras_ausencia + 1
                                                        rol.contador_dias_Trabajados = rol.contador_dias_Trabajados - 1
                                                    }
                                                } else {
                                                    element.texto += "BM"
                                                    if (value && value2) {
                                                        rol.contador_dias_ausencia_medica = rol.contador_dias_ausencia_medica + 1
                                                        rol.contador_dias_Trabajados = rol.contador_dias_Trabajados - 1
                                                    }
                                                }
                                            } else if (element.texto == "NT") {
                                                if (element1.horas) {
                                                    element.texto += "A"
                                                    if (value && value2) {
                                                        rol.contador_dias_otras_ausencia = rol.contador_dias_otras_ausencia + 1
                                                        rol.contador_noche_trabajadas = rol.contador_noche_trabajadas - 1
                                                    }
                                                } else {
                                                    element.texto += "B"
                                                    if (value && value2) {
                                                        rol.contador_dias_ausencia_medica = rol.contador_dias_ausencia_medica + 1
                                                        rol.contador_noche_trabajadas = rol.contador_noche_trabajadas - 1
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
            
                            if (rol.ficha.vacaciones.length > 0) {
                                for (var j = 0; j < rol.ficha.vacaciones.length; j++) {
                                    var element1 = rol.ficha.vacaciones[j];
                                    var startDate = new Date(element1.fecha_inicio);
                                    var endDate = new Date(element1.fecha_fin);
                                    var fechasvacacion = getDates(startDate, endDate);
            
                                    if (fechasvacacion.length > 0) {
                                        var element2 = fechasvacacion.find(function (x) {
                                            return x == $scope.formatofecha(element.fecha)
                                        })
            
                                        if (element2) {
                                            if (element.texto == "D") {
                                                element.texto += "V"
                                            }
                                            else if (element.texto == "T") {
                                                element.texto += "V"
                                            }
                                            else if (element.texto == "NT") {
                                                element.texto += "V"
                                            }
                                            if (value && value2) {
                                                rol.contador_dias_vacaciones = rol.contador_dias_vacaciones + 1
                                                if (element.texto == "DV") {
                                                    rol.contador_dias_descanso = rol.contador_dias_descanso - 1
                                                }
                                                else if (element.texto == "TV") {
                                                    rol.contador_dias_Trabajados = rol.contador_dias_Trabajados - 1
                                                }
                                                else if (element.texto == "NTV") {
                                                    rol.contador_noche_trabajadas = rol.contador_noche_trabajadas - 1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        rol.contador_suma_total = rol.contador_dias_Trabajados +
                            rol.contador_dias_descanso +
                            rol.contador_noche_trabajadas +
                            rol.contador_dias_vacaciones +
                            rol.contador_dias_otras_ausencia +
                            rol.contador_dias_ausencia_medica
                    }
                }
            }
            
            async function realizarCalculosTurnos(empleado, viaje, fechaComparar, destinosEmpleados, fecha, tiposDescanso, tipoViaje, countE) {
                await esperandoCalculo();
                SweetAlert.getContent().querySelector('strong').textContent = Number(countE) + "%";
                SweetAlert.getContent().querySelector('.swal2-timer-progress-bar').style.width = Number(countE) * 5.2;
                blockUI.noOpen = true;
            
                promesa = RecursosHumanosViajesRolTurnosEmpleados(empleado.id_ficha, fechaComparar.getFullYear(), fechaComparar.getMonth(), empleado.id, destinosEmpleados);
                await promesa.then(function (dato) {
                    empleado.sueldoBasico = empleado.haber_basico;
                    $scope.diasRolTurnos = 0;
                    $scope.nochesRolTurnos = 0;
                    $scope.descansosRolTurnos = 0;
                  
                    if (dato.rolesTurno.length > 0) {
                        empleado.rolesTurno = dato.rolesTurno;
                        
                        $scope.empleadosRolTurno = dato.rolesTurno;
                        var fechaHoy = new Date()
                        var ultimoDiaMes = new Date(fechaHoy.getFullYear(), 12, 0).getDate();
                        var mesfiltro = new Date(fechaComparar.getFullYear(), parseInt(fechaComparar.getMonth()), 0);
            
                        var primerDia = new Date(fechaComparar.getFullYear(), parseInt(fechaComparar.getMonth()), 1, 0, 0, 0);
                        var ultimoDia = new Date(fechaComparar.getFullYear(), parseInt(fechaComparar.getMonth()), mesfiltro.getDate(), 23, 59, 59);
            
                        var fechaINIROL = new Date(dato.rolesTurno[0].fecha_inicio);
                        $scope.filtroRolCal = { fin: ultimoDiaMes + "/12/" + fechaHoy.getFullYear(), fin2: $scope.fechaString(ultimoDia), inicio: "01/01/" + fechaINIROL.getFullYear(), inicio2: $scope.fechaString(primerDia) }
            
                        $scope.realizarCalendarioTrabajoViajes($scope.filtroRolCal, $scope.empleadosRolTurno);
                        var df = $scope.parseDate($scope.filtroRolCal.inicio2); //desde
                        var dt = $scope.parseDate($scope.filtroRolCal.fin2); // hasta
                        var result = [];
                        var countTD = 0;
                        var countNT = 0;
                        var countDD = 0;
            
                        for (var index = 0; index < $scope.empleadosRolTurno.length; index++) {
                            var rolesT = $scope.empleadosRolTurno[index];
                            if(rolesT.diasAnio){
                                for (var i = 0; i < rolesT.diasAnio.length; i++) {
                                    var tf = $scope.parseDate(rolesT.diasAnio[i].fecha),
                                        tt = $scope.parseDate(rolesT.diasAnio[i].fecha);
                                    if (tf >= df && tt <= dt) {
                                        let indexDescanso = tiposDescanso.findIndex(el=>el.tipo===rolesT.diasAnio[i].texto)
                                        let fechaAnterior = new Date($scope.convertirFecha(fecha));
                                        fechaAnterior.setDate(fechaAnterior.getDate() - 1);
                                        var fechaAntConv = $scope.formatoFechaPDF(fechaAnterior)
                                        var rolAnterior = {}
                                        if( $scope.empleadosRolTurno.length>1){
                                            let compararIndex = ($scope.empleadosRolTurno.length) - 2
                                            rolAnterior = $scope.empleadosRolTurno[compararIndex]   
                                        }else{
                                            rolAnterior = $scope.empleadosRolTurno[index]
                                        }
                                       let rolDia = rolAnterior.diasAnio.filter(diaAnt => diaAnt.fecha === fechaAntConv);
                                       var roldiaTexto = rolDia[0] ? rolDia[0].texto:'';
                                        if ((rolesT.diasAnio[i].texto == "T") && (roldiaTexto !== "T")) {
                                           if ($scope.fechaATexto(fechaComparar) == rolesT.diasAnio[i].fecha && !viaje.salida && (tiposDescanso.findIndex(el=>el.tipo==rolesT.diasAnio[i - 1].texto) < 0)) {
                                                empleado.habilitado = true;
                                                empleado.campo = rolesT.campo;
                                                empleado.tipoViaje = tipoViaje;
                                                empleado.estado = $scope.tiposPasajerosViaje.find(tipo => tipo.nombre == "HABILITADO");
                                                viaje.empleadosEntrada.push(empleado);
                                            }
                                            countTD = countTD + 1;
                                        } else if ((rolesT.diasAnio[i].texto == "NT" ) && (roldiaTexto !== "NT")) {
                                            if ($scope.fechaATexto(fechaComparar) == rolesT.diasAnio[i].fecha && !viaje.salida && roldiaTexto !== "T") {
                                                empleado.habilitado = true;
                                                empleado.campo = rolesT.campo;
                                                empleado.tipoViaje = tipoViaje;
                                                empleado.estado = $scope.tiposPasajerosViaje.find(tipo => tipo.nombre == "HABILITADO");
                                                viaje.empleadosEntrada.push(empleado);
                                            }
                                            countNT = countNT + 1;
                                        } else if (indexDescanso >= 0) {
                                            if(viaje.salida){
                                                var fechaDescanso = new Date($scope.convertirFecha(fecha));
                                                fechaDescanso.setDate(fechaDescanso.getDate() + 1);
                                                if ((tiposDescanso.findIndex(el=>el.tipo==rolesT.diasAnio[i - 1].texto) < 0) && $scope.fechaATexto(fechaDescanso) == rolesT.diasAnio[i].fecha) {
                                                    empleado.habilitado = true;
                                                    empleado.campo = rolesT.campo;
                                                    empleado.tipoViaje = tipoViaje;
                                                    empleado.estado = tiposDescanso[indexDescanso].estado;
                                                    viaje.empleadosSalida.push(empleado);
                                                }
                                            }
                                            countDD = countDD + 1
                                        }
                                        // D, DBD, DOA, DV, TBM, TOA, TV ==== descansos para salidas
                                        // T, NT === trabajos para ingreoso
                                        result.push(rolesT.diasAnio[i]);
                                    }
                                }
                            }
                        }
            
                        $scope.nochesRolTurnos = countNT;
                        $scope.diasRolTurnos = countTD;
                        $scope.descansosRolTurnos = countDD;
                    }
            
                }).catch(function (err) {
                    var msg = (err.stack !== undefined && err.stack !== null) ? err.message + '<br />' + err.stack : (err.message !== undefined && err.message !== null) ? err.message : 'Se perdió la conexión.'
                    SweetAlert.swal("", msg, "error");
                    return new Promise(function (fullfil, reject) {
                        fullfil({ hasErr: true, mensaje: msg, tipo: 'Error' })
                    })
                });
            }
            
            async function procesarDatosEmpleados(array, viaje, fechaComparar, destinosEmpleados, fecha, tiposDescanso, tipoViaje) {
                SweetAlert.update({ title: "Verificando Rol de Turnos Empleados....." })
            
                var countE = 0;
                for (const empleado of array) {
                    countE = countE + 1;
                    await realizarCalculosTurnos(empleado, viaje, fechaComparar, destinosEmpleados, fecha, tiposDescanso, tipoViaje, getPercentageChange(array.length, countE));
                }
                if ((viaje.empleadosEntrada.length > 0 && !viaje.salida) || (viaje.empleadosSalida.length > 0 && viaje.salida)) {
                    var textMsg = 'se encontro '
                    SweetAlert.swal({
                        title: 'Finalizado!',
                        text: textMsg + (viaje.salida ? (viaje.empleadosSalida.length + ' Empleados de Salida!') : (viaje.empleadosEntrada.length + ' Empleados de Ingreso!')),
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    })
                }else{
                    var textTitle = 'No se Encontro ningun Empleado de '
                    SweetAlert.swal({
                        title: textTitle + (viaje.salida ? 'Salida!' : 'Ingreso!'),
                        icon: 'warning',
                        timer: 2000,
                        showConfirmButton: false
                    })
                }
                
            }
            
            $scope.CargarEmpleadosViaje = function (fecha, destinos, salida) {
                $scope.viaje.salida = salida?salida:false;
                if(!fecha && !salida) return SweetAlert.swal("", "ingrese fecha de ingreso", 'warning')
                if(!fecha && salida) return SweetAlert.swal("", "ingrese fecha de salida", 'warning')
                if(destinos.length == 0) return SweetAlert.swal("", "ingrese algun destino", 'warning')
                var destinosEmpleados = destinos.map(function (campo){return campo.id}).join()
     
                SweetAlert.swal({
                    title: 'Obteniendo empleados...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
            
                let estadoHabilitado = $scope.tiposPasajerosViaje.find(tipo => tipo.nombre == "HABILITADO");
                let estadoVacacion = $scope.tiposPasajerosViaje.find(tipo => tipo.nombre == "VACACION");
                let estadoAusencia = $scope.tiposPasajerosViaje.find(tipo => tipo.nombre == "AUSENCIA");
                var tiposDescanso = [
                    {tipo:"D", estado: estadoHabilitado}, 
                    {tipo:"DBD", estado: estadoAusencia}, 
                    {tipo:"DOA", estado: estadoAusencia}, 
                    {tipo:"DV", estado: estadoVacacion}, 
                    {tipo:"TBM", estado: estadoAusencia}, 
                    {tipo:"TOA", estado: estadoAusencia}, 
                    {tipo:"TV", estado: estadoVacacion}
                ]
                let tipoViaje = $scope.tiposViaje.clases.find(tipo => tipo.nombre == "INGRESO");
                if($scope.viaje.salida){
                    tipoViaje = $scope.tiposViaje.clases.find(tipo => tipo.nombre == "SALIDA");
                    $scope.viaje.empleadosSalida = []
                }else{
                    $scope.viaje.empleadosEntrada = []
                }
            
                var fechaComparar = new Date($scope.convertirFecha(fecha))
                blockUI.noOpen = true;
                var promesa = RecursosHumanosEmpleados($scope.usuario.id_empresa, fechaComparar.getFullYear(), fechaComparar.getMonth());
                promesa.then(function (dato) {
                    procesarDatosEmpleados(dato.empleados, $scope.viaje, fechaComparar, destinosEmpleados, fecha, tiposDescanso, tipoViaje);
                });
                    
            }

            $scope.localStorageSpace = function () {
                var data = ''; 
                for (var key in window.localStorage) {

                    if (window.localStorage.hasOwnProperty(key)) {
                        data += window.localStorage[key];
                    }

                } 
            };

            $scope.CargarEmpleadosViajeSalida = function (fecha, destinos) {
                $scope.viaje.empleadosSalida = [];
                $scope.CargarEmpleadosViaje(fecha, destinos, true)
            }

            $scope.CopiarEmpleadosViaje = function () {
                $scope.viaje.empleadosSalida = []
                // $scope.viaje.fecha_salida=$scope.fechaATexto($scope.sumaFecha(14,$scope.convertirFecha($scope.viaje.fecha_ingreso)))
                $scope.viaje.empleadosSalida = $scope.viaje.empleadosEntrada.map(function (pasajero) {
                    return Object.assign({}, pasajero)
                })
                $scope.viaje.empleadosSalida.forEach(function (pasajero, index, array) {
                    for (var i = 0; i < $scope.tiposViaje.clases.length; i++) {
                        var tipo = $scope.tiposViaje.clases[i];
                        if (tipo.nombre == "SALIDA") {
                            pasajero.tipoViaje = tipo
                        }
                    }
                })
            }
            $scope.cambiarEstadoPasajero = function (pasajero) {
                pasajero.activo = (pasajero.eliminado == 0) ? true : false
                pasajero.fecha_inicio = pasajero.empleadosFichas[pasajero.empleadosFichas.length - 1].fecha_inicio
                pasajero.nombre_completo = pasajero.persona.nombre_completo
                $scope.cerrarModalDesabilitarPasajero()
                $scope.abriirmodelAusenciasVacas(pasajero)
                if (pasajero.estado.nombre == "OTRA AUSENCIA") {
                    $("#otra-ausencia").click()
                }
                if (pasajero.estado.nombre == "AUSENCIA MEDICA") {
                    $("#ausencia-medica").click()
                }
                if (pasajero.estado.nombre == "VACACION") {
                    $("vacacion").click()
                }
            }



            function getDates(startDate, stopDate) {
                var dateArray = [];
                var currentDate = moment(startDate);
                var stopDate = moment(stopDate);
                while (currentDate <= stopDate) {
                    dateArray.push(moment(currentDate).format('YYYY/MM/DD'))
                    currentDate = moment(currentDate).add(1, 'days');
                }
                return dateArray;
            }

            function getPercentageChange(oldNumber, newNumber) {
                var decreaseValue = oldNumber - newNumber;
                var porcentage = 100 - (decreaseValue / oldNumber) * 100;
                return porcentage.toFixed();
            }

            function esperandoCalculo() {
                return new Promise(resolve => setTimeout(resolve, 5));
            }

            async function realizarCalculosRolTurnos(rol, filtro, countE) {
                await esperandoCalculo();
                SweetAlert.getContent().querySelector('strong').textContent = Number(countE) + "%";
                SweetAlert.getContent().querySelector('.swal2-timer-progress-bar').style.width = Number(countE) * 5.2;
                rol.contador_dias_Trabajados = 0
                rol.contador_dias_vacaciones = 0
                rol.contador_dias_descanso = 0
                rol.contador_noche_trabajadas = 0
                rol.contador_dias_ausencia_medica = 0
                rol.contador_dias_otras_ausencia = 0
                rol.contador_suma_total = 0
                var anio = []
                if (filtro) {
                    if (filtro.inicio) {
                        var inicio = new Date($scope.convertirFecha(filtro.inicio)).getFullYear();
                        var fin = new Date($scope.convertirFecha(filtro.fin2)).getFullYear();
                        while (inicio <= fin) {
                            anio.push(inicio)
                            inicio++
                        }
                    }
                } else {
                    anio.push(new Date().getFullYear())
                }
                rol.diasAnio = await $scope.CalendarioRolTurnos(anio, filtro, rol)
                var rolturno = rol
                var fechaFin = ""
                if (rolturno.fecha_fin) {
                    fechaFin = $scope.fechaATexto(rolturno.fecha_fin)
                }
                var bandera = false
                var a = 1
                /*  var element = rol.diasAnio.find(function(x){
                        var compareDate = moment(element.fecha, "DD/MM/YYYY");
                        var startDate = moment(filtro.inicio2, "DD/MM/YYYY");
                        var endDate = moment(filtro.fin2, "DD/MM/YYYY");
                        var value = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
                        return compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
            
                    }) */
                for (var i = 0; i < rol.diasAnio.length; i++) {
                    var element = rol.diasAnio[i];
                    var compareDate = moment(element.fecha, "DD/MM/YYYY");
                    var startDate = moment($scope.fechaATexto(rol.fecha_inicio), "DD/MM/YYYY");
                    var endDate = moment(rol.fecha_fin ? $scope.fechaATexto(rol.fecha_fin) : filtro.fin2, "DD/MM/YYYY");
                    var value = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
                    var startDate = moment(filtro.inicio2, "DD/MM/YYYY");
                    var endDate = moment(filtro.fin2, "DD/MM/YYYY");
                    var value2 = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
                    if (element.fecha == $scope.fechaATexto(rolturno.fecha_inicio)) {
                        bandera = true
                    } else if (value) {
                        bandera = true
                    }
                    if (bandera) {
                        if (a <= rolturno.dias_trabajado) {
                            if (rolturno.fecha_fin) {
                                if (fechaFin == element.fecha) {
                                    i = rol.diasAnio.length
                                    // element.texto = "T"
                                    if (rolturno.turno_dia) {
                                        element.texto = "T"
                                        if (value && value2) {
                                            rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                        }
                                    } else {
                                        element.texto = "NT"
                                        if (value && value2) {
                                            rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                        }
                                    }
                                } else {
                                    var anio = fechaFin.split("/")[2]
                                    var anioInicio = element.fecha.split("/")[2]
                                    var mes = fechaFin.split("/")[1]
                                    var mesInicio = element.fecha.split("/")[1]
                                    var dia = fechaFin.split("/")[0]
                                    var diaInicio = element.fecha.split("/")[0]
                                    if (anio >= anioInicio) {

                                        // element.texto = "T"
                                        if (rolturno.turno_dia) {
                                            element.texto = "T"
                                            if (value && value2) {
                                                rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                            }
                                        } else {
                                            element.texto = "NT"
                                            if (value && value2) {
                                                rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                            }
                                        }

                                    }
                                }
                                a++
                            } else {
                                // corregido calculo de dias trabajados si no tiene fecha fin ========
                                // element.texto = "T"
                                var finFiltro = new Date($scope.convertirFecha(filtro.fin2))
                                var fechaInicioRol = new Date(rolturno.fecha_inicio)
                                if (fechaInicioRol <= finFiltro) {
                                    if (rolturno.turno_dia) {
                                        element.texto = "T"
                                        if (value && value2) {
                                            rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                        }
                                    } else {
                                        element.texto = "NT"
                                        if (value && value2) {
                                            rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                        }
                                    }
                                }

                                a++
                            }
                        } else if (a <= (rolturno.dias_trabajado + rolturno.dias_descanso)) {
                            if (rolturno.fecha_fin) {
                                if (fechaFin == element.fecha) {
                                    i = rol.diasAnio.length
                                    element.texto = "D"
                                    if (value && value2) {
                                        rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                    }
                                }
                                else {
                                    var anio = fechaFin.split("/")[2]
                                    var anioInicio = element.fecha.split("/")[2]
                                    var mes = fechaFin.split("/")[1]
                                    var mesInicio = element.fecha.split("/")[1]
                                    var dia = fechaFin.split("/")[0]
                                    var diaInicio = element.fecha.split("/")[0]
                                    if (anio >= anioInicio) {

                                        element.texto = "D"
                                        if (value && value2) {
                                            rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                        }
                                    }

                                }
                                if (a === (rolturno.dias_trabajado + rolturno.dias_descanso)) {
                                    a = 0
                                }
                                a++
                            } else {
                                element.texto = "D"
                                if (a === (rolturno.dias_trabajado + rolturno.dias_descanso)) {
                                    a = 0
                                }
                                if (value && value2) {
                                    rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                }
                                a++
                            }

                        }

                    }
                    // inicio roles extras
                    if (rol.turnosExtra) {
                        if (rol.turnosExtra.length > 0) {
                            for (const turnoExtra of rol.turnosExtra) {
                                var compareDate = moment(element.fecha, "DD/MM/YYYY");
                                var startDate = moment($scope.fechaATexto(turnoExtra.fecha_inicio), "DD/MM/YYYY");
                                var endDate = moment($scope.fechaATexto(turnoExtra.fecha_fin), "DD/MM/YYYY");
                                var value = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
                                if (value && value2) {
                                    let tipoRolTurnoExtra = $scope.tiposRolTurnoExtra.find(function (x) {
                                        return x.id == turnoExtra.id_tipo
                                    })
                                    if (tipoRolTurnoExtra.nombre_corto == "NOCHE") {
                                        if (element.texto == "D") {
                                            element.texto = "NT"
                                            rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                            rol.contador_dias_descanso = rol.contador_dias_descanso - 1
                                        } else if (element.texto == "T") {
                                            element.texto = "NT"
                                            rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                            rol.contador_dias_Trabajados = rol.contador_dias_Trabajados - 1
                                        } else {
                                            element.texto = "NT"
                                            rol.contador_noche_trabajadas = rol.contador_noche_trabajadas + 1
                                        }

                                    }
                                    else if (tipoRolTurnoExtra.nombre_corto == "DIA") {
                                        if (element.texto == "D") {
                                            element.texto = "T"
                                            rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                            rol.contador_dias_descanso = rol.contador_dias_descanso - 1
                                        } else if (element.texto == "NT") {
                                            element.texto = "T"
                                            rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                            rol.contador_noche_trabajadas = rol.contador_noche_trabajadas - 1
                                        } else {
                                            element.texto = "T"
                                            rol.contador_dias_Trabajados = rol.contador_dias_Trabajados + 1
                                        }
                                    }
                                    else if (tipoRolTurnoExtra.nombre_corto == "DESCANSO") {
                                        if (element.texto == "NT") {
                                            element.texto = "D"
                                            rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                            rol.contador_noche_trabajadas = rol.contador_noche_trabajadas - 1
                                        } else if (element.texto == "T") {
                                            element.texto = "D"
                                            rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                            rol.contador_dias_Trabajados = rol.contador_dias_Trabajados - 1
                                        } else {
                                            element.texto = "D"
                                            rol.contador_dias_descanso = rol.contador_dias_descanso + 1
                                        }
                                    }

                                }
                            }
                        }
                    }
                    // fin roles extras
                    if (rol.ficha.ausencias.length > 0) {
                        for (var j = 0; j < rol.ficha.ausencias.length; j++) {
                            var element1 = rol.ficha.ausencias[j];
                            var startDate = new Date(element1.fecha_inicio);
                            var endDate = new Date(element1.fecha_fin);
                            var fechasausencias = getDates(startDate, endDate);

                            if (fechasausencias.length > 0) {
                                var element2 = fechasausencias.find(function (x) {
                                    return x == $scope.formatofecha(element.fecha)
                                })
                                var compareDate = moment(element.fecha, "DD/MM/YYYY");
                                var startDate = moment($scope.fechaATexto(rol.fecha_inicio), "DD/MM/YYYY");
                                var endDate = moment(rol.fecha_fin ? $scope.fechaATexto(rol.fecha_fin) : filtro.fin2, "DD/MM/YYYY");
                                var value = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
                                var startDate = moment(filtro.inicio2, "DD/MM/YYYY");
                                var endDate = moment(filtro.fin2, "DD/MM/YYYY");
                                var value2 = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)

                                if (element2 && element1.eliminado === false) {
                                    element.mensaje = $sce.trustAsHtml(element1.tipoAusencia.tipo.nombre + '<br> motivo:' + element1.tipoAusencia.nombre);
                                    if (element.texto == "D") {
                                        if (element1.horas) {
                                            element.texto += "OA"
                                            if (value && value2) {
                                                rol.contador_dias_otras_ausencia = rol.contador_dias_otras_ausencia + 1
                                                rol.contador_dias_descanso = rol.contador_dias_descanso - 1
                                            }
                                        } else {
                                            element.texto += "BD"
                                            if (value && value2) {
                                                rol.contador_dias_ausencia_medica = rol.contador_dias_ausencia_medica + 1
                                                rol.contador_dias_descanso = rol.contador_dias_descanso - 1
                                            }
                                        }
                                    } else if (element.texto == "T") {
                                        if (element1.horas) {
                                            element.texto += "OA"
                                            if (value && value2) {
                                                rol.contador_dias_otras_ausencia = rol.contador_dias_otras_ausencia + 1
                                                rol.contador_dias_Trabajados = rol.contador_dias_Trabajados - 1
                                            }
                                        } else {
                                            element.texto += "BM"
                                            if (value && value2) {
                                                rol.contador_dias_ausencia_medica = rol.contador_dias_ausencia_medica + 1
                                                rol.contador_dias_Trabajados = rol.contador_dias_Trabajados - 1
                                            }
                                        }
                                    } else if (element.texto == "NT") {
                                        if (element1.horas) {
                                            element.texto += "A"
                                            if (value && value2) {
                                                rol.contador_dias_otras_ausencia = rol.contador_dias_otras_ausencia + 1
                                                rol.contador_noche_trabajadas = rol.contador_noche_trabajadas - 1
                                            }
                                        } else {
                                            element.texto += "B"
                                            if (value && value2) {
                                                rol.contador_dias_ausencia_medica = rol.contador_dias_ausencia_medica + 1
                                                rol.contador_noche_trabajadas = rol.contador_noche_trabajadas - 1
                                            }
                                        }
                                    }
                                }

                            }

                        }
                    }

                    if (rol.ficha.vacaciones.length > 0) {
                        for (var j = 0; j < rol.ficha.vacaciones.length; j++) {
                            var element1 = rol.ficha.vacaciones[j]; 
                            var startDate = new Date(element1.fecha_inicio);
                            var endDate = new Date(element1.fecha_fin); 
                            var fechasvacacion = getDates(startDate, endDate);

                            if (fechasvacacion.length > 0) {
                                var element2 = fechasvacacion.find(function (x) {
                                    return x == $scope.formatofecha(element.fecha)
                                })

                                if (element2) {
                                    element.mensaje = $sce.trustAsHtml("vacacion del <br>" + $scope.fechaATexto(element1.fecha_inicio) + " al " + $scope.fechaATexto(element1.fecha_fin));
                                    if (element.texto == "D") {
                                        element.texto += "V"
                                    }
                                    else if (element.texto == "T") {
                                        element.texto += "V"
                                    }
                                    else if (element.texto == "NT") {
                                        element.texto += "V"
                                    }
                                    if (value && value2) {
                                        rol.contador_dias_vacaciones = rol.contador_dias_vacaciones + 1
                                        if (element.texto == "DV") {
                                            rol.contador_dias_descanso = rol.contador_dias_descanso - 1
                                        }
                                        else if (element.texto == "TV") {
                                            rol.contador_dias_Trabajados = rol.contador_dias_Trabajados - 1
                                        }
                                        else if (element.texto == "NTV") {
                                            rol.contador_noche_trabajadas = rol.contador_noche_trabajadas - 1
                                        }
                                    }
                                }

                            }

                        }
                    }
                    var diaPie = $scope.diasAnioPieTrabajos.find(function (x) {
                        return x.fecha == element.fecha
                    })

                    if (diaPie) {
                        if (element.texto == "T" || element.texto == "NT") {
                            var val = (diaPie.texto == "") ? 0 : parseInt(diaPie.texto)
                            diaPie.texto = val + 1
                        }
                    }
                    var diaPieA = $scope.diasAnioPieAusencias.find(function (x) {
                        return x.fecha == element.fecha
                    })
                    if (diaPieA) {
                        if (element.texto == "A" || element.texto == "TBM" || element.texto == "DBD" || element.texto == "NTB") {
                            var val = (diaPieA.texto == "") ? 0 : parseInt(diaPieA.texto)
                            diaPieA.texto = val + 1
                        }
                    }
                    var diaPieV = $scope.diasAnioPieVacaciones.find(function (x) {
                        return x.fecha == element.fecha
                    })
                    if (diaPieV) {
                        if (element.texto == "V" || element.texto == "TV" || element.texto == "DV" || element.texto == "NTV") {
                            var val = (diaPieV.texto == "") ? 0 : parseInt(diaPieV.texto)
                            diaPieV.texto = val + 1
                        }
                    }
                    var diaPieD = $scope.diasAnioPieDescansos.find(function (x) {
                        return x.fecha == element.fecha
                    })
                    if (diaPieD) {
                        if (element.texto == "D") {
                            var val = (diaPieD.texto == "") ? 0 : parseInt(diaPieD.texto)
                            diaPieD.texto = val + 1
                        }
                    }
                }
                rol.contador_suma_total = rol.contador_dias_Trabajados +
                    rol.contador_dias_descanso +
                    rol.contador_noche_trabajadas +
                    rol.contador_dias_vacaciones +
                    rol.contador_dias_otras_ausencia +
                    rol.contador_dias_ausencia_medica

                $scope.$evalAsync()
            }


            $scope.realizarCalendarioTrabajo = async function (filtro) {
                var elemIcon = document.querySelector('.swal2-icon-content');
                elemIcon.innerHTML = '';
                elemIcon.innerHTML = '<i class="fa fa-calculator size-icon"></i>';
                SweetAlert.update({
                    title: "Realizando Cálculos....."
                })
                var anio = []
                if (filtro) {
                    if (filtro.inicio) {
                        var inicio = new Date($scope.convertirFecha(filtro.inicio)).getFullYear();
                        var fin = new Date($scope.convertirFecha(filtro.fin2)).getFullYear();
                        while (inicio <= fin) {
                            anio.push(inicio)
                            inicio++
                        }
                    }
                    /*  if (filtro.gestion) {
                         anio = parseInt(filtro.gestion.nombre)
                     } */
                } else {

                    anio.push(new Date().getFullYear())
                }

                $scope.diasAnio = await $scope.CalendarioRolTurnos(anio, filtro)
                $scope.diasAnioPieTrabajos = await $scope.CalendarioRolTurnos(anio, filtro)
                $scope.diasAnioPieDescansos = await $scope.CalendarioRolTurnos(anio, filtro)
                $scope.diasAnioPieAusencias = await $scope.CalendarioRolTurnos(anio, filtro)
                $scope.diasAnioPieVacaciones = await $scope.CalendarioRolTurnos(anio, filtro)
                $scope.diasAnioPieProtectadas = await $scope.CalendarioRolTurnos(anio, filtro)
                $scope.diasAnioPiediferencia = await $scope.CalendarioRolTurnos(anio, filtro)
                if ($scope.filtroRolCal.campo) {
                    var parametroCampamento = await $scope.obtenerParametroEmpleadosCampamento()
                    if (parametroCampamento) {
                        for (const PieProtectadas of $scope.diasAnioPieProtectadas) {
                            PieProtectadas.texto = parametroCampamento.comensales
                        }
                    }

                }
                if ($scope.empleadosRolTurno) {
                    var countE = 0;
                    for (rol of $scope.empleadosRolTurno) {
                        countE = countE + 1;
                        await realizarCalculosRolTurnos(rol, filtro, getPercentageChange($scope.empleadosRolTurno.length, countE));
                    }
                    SweetAlert.swal({
                        title: 'Finalizado!',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    })
                } else {
                    SweetAlert.swal({
                        title: 'Finalizado!',
                        text: 'No se encontraron datos',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    })
                }
                if ($scope.filtroRolCal.campo && parametroCampamento) {
                    for (var x = 0; x < $scope.diasAnioPieTrabajos.length; x++) {
                        var diaPie = $scope.diasAnioPieTrabajos[x];

                        var pieDif = $scope.diasAnioPiediferencia.find(function (x) {
                            return x.fecha == diaPie.fecha
                        })
                        pieDif.texto = diaPie.texto - parametroCampamento.comensales
                    }
                }

                // $scope.$evalAsync()
            }

            $scope.CalendarioRolTurnos = async function (anio, filtro) {
                $scope.mesesRolTurno = []
                var diasAnio = []
                if (filtro) {
                    if (filtro.inicio) {
                        var inicio = new Date($scope.convertirFecha(filtro.inicio)).getMonth()
                        var fin = new Date($scope.convertirFecha(filtro.fin)).getMonth()
                        var diaInicio = new Date($scope.convertirFecha(filtro.inicio)).getDate()
                        var diafin = new Date($scope.convertirFecha(filtro.fin)).getDate()
                        var anioInicio = new Date($scope.convertirFecha(filtro.inicio)).getFullYear()
                        var aniofin = new Date($scope.convertirFecha(filtro.fin)).getFullYear()
                        if (filtro.inicio2) {
                            inicio = new Date($scope.convertirFecha(filtro.inicio2)).getMonth()
                            diaInicio = new Date($scope.convertirFecha(filtro.inicio2)).getDate()
                            var anioInicio = new Date($scope.convertirFecha(filtro.inicio2)).getFullYear()

                        }
                        if (filtro.fin2) {
                            var fin = new Date($scope.convertirFecha(filtro.fin2)).getMonth()
                            var diafin = new Date($scope.convertirFecha(filtro.fin2)).getDate()
                            var aniofin = new Date($scope.convertirFecha(filtro.fin2)).getFullYear()
                        }
                    }
                }
                for (var l = 0; l < anio.length; l++) {
                    var elementanio = anio[l];
                    var meses = Object.assign([], $scope.meses)
                    meses.forEach(function (mes, index, array) {
                        var cmes = Object.assign({}, mes)
                        cmes.dias = []
                        cmes.anio = elementanio
                        if (filtro) {
                            if (filtro.inicio) {
                                if (elementanio >= anioInicio && elementanio <= aniofin) {
                                    if (cmes.id > inicio - 1 && cmes.id <= fin) {
                                        cmes.visible = true
                                    } else {
                                        cmes.visible = false
                                    }
                                } else {
                                    cmes.visible = false
                                }
                            } else {
                                cmes.visible = true
                            }
                        } else {
                            cmes.visible = true
                        }
                        $scope.mesesRolTurno.push(cmes)
                        if (index === (array.length - 1)) {
                            let diasDelAño = moment([elementanio]).isLeapYear()?366:365;
                            for (var i = 1; i <= diasDelAño; i++) {
                                var fecha = $scope.fechaPorDia(elementanio, i);
                                var mes = fecha.getMonth();
                                var dia = fecha.getDate()
                                var anio = fecha.getFullYear()
                                var dia_semana = fecha.getDay();
                                var mesRolT = $scope.mesesRolTurno.find(function (rol) {
                                    return (rol.anio == anio && rol.id == mes)
                                })
                                var compareDate = moment($scope.fechaATexto(fecha), "DD/MM/YYYY");
                                var startDate = moment(filtro.inicio2, "DD/MM/YYYY");
                                var endDate = moment(filtro.fin2, "DD/MM/YYYY");
                                var value = compareDate.isBetween(startDate, endDate) || compareDate.isSame(startDate) || compareDate.isSame(endDate)
                                if (value && mesRolT) {
                                    mesRolT.visible = true
                                }
                                var diaactual = { id: i, dia: dia, visible: true, texto: "", fecha: $scope.fechaATexto(fecha), mes: mesRolT }
                                if (value) {
                                    diasAnio.push(diaactual)
                                } else {
                                    diaactual.visible = false
                                    diasAnio.push(diaactual)
                                }
                                for (var j = 0; j < $scope.mesesRolTurno.length; j++) {
                                    var element = $scope.mesesRolTurno[j];
                                    if (element.anio == elementanio) {
                                        if (element.id == mes) {
                                            if (element.id == inicio) {
                                                if (dia >= diaInicio) {
                                                    element.dias.push(dia)
                                                }
                                            } else if (element.id == fin) {
                                                if (dia <= diafin) {
                                                    element.dias.push(dia)
                                                }
                                            } else {
                                                element.dias.push(dia)
                                            }
                                        }
                                    }
                                }
                            }


                        }
                    });
                }


                return diasAnio
            }

            $scope.guardarViaje = async (datos) => {
                if($scope.usuario.empresa.usar_configuracion_iso){
                    var { error, message, configuracionIso }= await ObtenerConfiguracionIsoEmpresa($scope.usuario.id_empresa, "LIVIA");
                    if(error) SweetAlert.swal("","<b>Ocurrió un error</b><br><small>" + message + "<small>", "error")
                    if(!configuracionIso) SweetAlert.swal("","<b>Configuración no encontrada</b><br><small>No se encontró configuración ISO activa para lista de viajes.<small>", "warning")
                    datos.configuracionIso = configuracionIso;
                    datos.config_doc_iso = configuracionIso.id;
                }
                datos.fecha = new Date()
                if(datos.destinos.length == 0) return SweetAlert.swal("", "Seleccione un Destino", "warning");
                if(datos.empleadosEntrada.length == 0 && datos.empleadosSalida.length == 0) return SweetAlert.swal("", "Seleccione a los Empleados de Ingreso o Salida", "warning");
                if(datos.empleadosEntrada.length == 0 && datos.fecha_ingreso) return SweetAlert.swal("", "Seleccione a los Empleados de Ingreso", "warning");
                if(datos.empleadosSalida.length == 0 && datos.fecha_salida) return SweetAlert.swal("", "Seleccione a los Empleados de Salida", "warning");
                if (datos.fecha_ingreso) datos.fecha_ingreso = new Date($scope.convertirFecha(datos.fecha_ingreso))
                if (datos.fecha_salida) {
                    datos.fecha_salida = new Date($scope.convertirFecha(datos.fecha_salida))
                }
                var promesa = GuardarViajeRrhh(datos, $scope.usuario.id_empresa)
                promesa.then(function (dato) {
                    $scope.cerrarDialogViajes()
                    $scope.imprimirReporteViaje(datos)
                    $scope.mostrarMensaje(dato.mensaje)
                })
            }
            $scope.listaViajesPasajero = function () {
                if ($scope.paginator.filter.inicio != 0) {
                    $scope.paginator.filter.inicio = new Date($scope.convertirFecha($scope.paginator.filter.inicio))
                    $scope.paginator.filter.fin = new Date($scope.convertirFecha($scope.paginator.filter.fin))
                }
                var promesa = ListaViajeRrhh($scope.paginator)
                promesa.then(function (datos) {
                    if ($scope.paginator.filter.inicio != 0) {
                        $scope.paginator.filter.inicio = $scope.fechaATexto($scope.paginator.filter.inicio)
                        $scope.paginator.filter.fin = $scope.fechaATexto($scope.paginator.filter.fin)
                    }
                    $scope.paginator.setPages(datos.paginas);
                    $scope.viajesEmpresa = datos.viajes
                })
            }
            $scope.listaViajes = function () {
                if ($scope.paginator.filter.inicio != 0) {
                    $scope.paginator.filter.inicio = new Date($scope.convertirFecha($scope.paginator.filter.inicio))
                    $scope.paginator.filter.fin = new Date($scope.convertirFecha($scope.paginator.filter.fin))
                }
                var promesa = ViajeRrhhLista($scope.paginator)
                promesa.then(function (datos) {
                    if ($scope.paginator.filter.inicio != 0) {
                        $scope.paginator.filter.inicio = $scope.fechaATexto($scope.paginator.filter.inicio)
                        $scope.paginator.filter.fin = $scope.fechaATexto($scope.paginator.filter.fin)
                    }
                    $scope.paginator.setPages(datos.paginas);
                    $scope.viajesEmpresa = datos.viajes
                })
            }

            $scope.obtenerViajesPasajeros = function () {
                $scope.paginator = Paginator();
                $scope.paginator.column = "id";
                $scope.paginator.direccion = "asc";
                $scope.filtroViaje = {
                    empresa: $scope.usuario.id_empresa,
                    inicio: "",
                    fin: "",
                    tipoPasajero: "",
                    destino: "",
                    vehiculo: "",
                    conductor: "",
                    tipoViaje: "",
                }
                $scope.paginator.callBack = $scope.listaViajesPasajero;
                $scope.paginator.getSearch("", $scope.filtroViaje, null);


            }
            $scope.obtenerViajes = function () {
                $scope.paginator = Paginator();
                $scope.paginator.column = "id";
                $scope.paginator.direccion = "asc";
                $scope.filtroViaje = {
                    empresa: $scope.usuario.id_empresa,
                    inicio: "",
                    fin: "",
                    destino: "",
                    vehiculo: "",
                    conductor: "",
                    relevo: "",
                }
                $scope.paginator.callBack = $scope.listaViajes;
                $scope.paginator.getSearch("", $scope.filtroViaje, null);


            }
            $scope.imprimirDesteHistorialReporteVIaje = function (datos) {
                datos.empleadosEntrada = []
                datos.empleadosSalida = []
                var destinos = []
                var destinos2 = Object.assign([], datos.destinos)
                datos.destinos.forEach(function (destino, index, array) {
                    destinos.push(destino.destino)
                    if (index === (array.length - 1)) {
                        datos.destinos = destinos
                        datos.viajeDetalles.forEach(function (detalle, index, array) {
                            detalle.persona = detalle.ficha.empleado.persona
                            if (detalle.tipoViaje.nombre == "INGRESO") {
                                datos.empleadosEntrada.push(detalle)
                            } else {
                                datos.empleadosSalida.push(detalle)
                            }

                            if (index === array.length - 1) {
                                $scope.imprimirReporteViaje(datos)
                                datos.destinos = destinos2
                            }

                        })
                    }
                })


            }
            $scope.imprimirReporteViaje = function (datos) {
                if (datos.empleadosEntrada.length > 0) {
                    var arregloDestinos = []
                    var destinos = datos.destinos.map(function (destino) {
                        return Object.assign({}, destino)
                    })
                    var arreglo = datos.empleadosEntrada
                    var tipo = " (Ingreso)"
                    do {
                        destinos2 = destinos.slice(0, 6);
                        arregloDestinos.push(destinos2)
                        destinos = destinos.slice(6, destinos.length);
                    } while (destinos.length - 1 > 6)
                    if (destinos.length > 0) {
                        arregloDestinos.push(destinos)
                    }
                    arregloDestinos.forEach(function (destinos, index, array) {
                        $scope.generarPdfViaje(datos, arreglo, destinos, tipo)
                    })

                }
                if (datos.empleadosSalida.length > 0) {
                    var arregloDestinos = []
                    var destinos = datos.destinos.map(function (destino) {
                        return Object.assign({}, destino)
                    })
                    var arreglo = datos.empleadosSalida
                    var tipo = " (Salida)"
                    do {
                        destinos2 = destinos.slice(0, 6);
                        arregloDestinos.push(destinos2)
                        destinos = destinos.slice(6, destinos.length);
                    } while (destinos.length - 1 > 6)
                    if (destinos.length > 0) {
                        arregloDestinos.push(destinos)
                    }
                    arregloDestinos.forEach(function (destinos, index, array) {
                        $scope.generarPdfViaje(datos, arreglo, destinos, tipo)
                    })
                }
            }
            $scope.generarPdfViaje = function (datos, arreglo, destinos, tipo) {
                destinos.forEach(function (destino, index, array) {
                    destino.y = 215
                    if (index === (array.length - 1)) {
                        var pormimg = ObtenerImagen($scope.usuario.empresa.imagen)
                        pormimg.then(function (imagenEmpresa) {
                            var imagen = imagenEmpresa;
                            var doc = new PDFDocument({ compress: false, size: 'letter', margin: 10 });
                            var stream = doc.pipe(blobStream());
                            // draw some text

                            $scope.dibujarCabeceraPDFViaje(doc, datos, 1, imagen, destinos, tipo);
                            doc.font('Helvetica', 5);
                            itemsPorPagina = 12, items = 0, pagina = 1;
                            for (var i = 0; i < arreglo.length; i++) {
                                var x = 35,
                                    empleado = arreglo[i]
                                for (var j = 0; j < destinos.length; j++) {
                                    var destino = destinos[j];
                                    if (j === (destinos.length - 1)) {
                                        if (empleado.campo.id === destino.id) {
                                            doc.text(empleado.persona.nombre_completo, x, destino.y, { width: 91, align: "center" });
                                            destino.y += 10
                                        }
                                    } else if (j == 1) {
                                        if (empleado.campo.id === destino.id) {
                                            doc.text(empleado.persona.nombre_completo, x, destino.y, { width: 91, align: "center" });
                                            destino.y += 10
                                        }
                                    } else {
                                        if (empleado.campo.id === destino.id) {
                                            doc.text(empleado.persona.nombre_completo, x, destino.y, { width: 91, align: "center" });
                                            destino.y += 10
                                        }
                                    }
                                    x += 91

                                }
                            }
                            doc.end();
                            stream.on('finish', function () {
                                var fileURL = stream.toBlobURL('application/pdf');
                                window.open(fileURL, '_blank', 'location=no');
                            });
                        })
                        // convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {


                        // })
                    }
                })

            }

            $scope.dibujarCabeceraPDFViaje = function (doc, datos, pagina, imagen, destinos, tipo) {
                doc.font('Helvetica-Bold', 12);
                doc.text("LISTA DE PASAJEROS", 0, 50, { align: "center" });
                doc.image(imagen, 40, 40, { fit: [80, 80] });
                doc.rect(30, 35, 550, 0).stroke();
                doc.rect(30, 95, 550, 0).stroke();
                doc.rect(130, 70, 450, 0).stroke();
                doc.rect(130, 35, 0, 60).stroke();
                doc.rect(440, 35, 0, 60).stroke();
                doc.rect(30, 35, 0, 60).stroke();
                doc.rect(580, 35, 0, 60).stroke();
                doc.font('Helvetica', 10);
                doc.text("Revición:", 450, 50);
                doc.text("Fecha de aprobación:", 450, 72);
                doc.text("Código .", 0, 75, { align: "center" });
                doc.font('Helvetica-Bold', 10);
                doc.rect(30, 105, 550, 0).stroke();
                doc.text("Conductor 1:", 35, 110);
                doc.text("licencia 1:", 345, 110);
                doc.rect(30, 120, 550, 0).stroke();
                doc.text("Conductor 2:", 35, 125);
                doc.text("licencia 2:", 345, 125);
                doc.rect(30, 135, 550, 0).stroke();
                doc.text("Vehículo:", 35, 140);
                doc.text("Placa:", 345, 140);
                doc.rect(30, 150, 550, 0).stroke();
                doc.text("Fecha:", 35, 160);
                doc.font('Helvetica', 10);
                doc.text(datos.conductor.nombre, 135, 110);
                doc.text(datos.relevo.nombre, 135, 125);
                var datosVehiculo = datos.vehiculo.nombre.split("-")
                doc.text(datosVehiculo[0], 135, 140);
                doc.text(datos.conductor.licencia + " " + datos.conductor.tipoLicencia?.nombre, 415, 110);
                doc.text(datos.relevo.licencia + " " + datos.relevo.tipoLicencia?.nombre, 415, 125);
                doc.text(datosVehiculo[1], 415, 140);
                doc.text($scope.fechaATexto(datos.fecha) + tipo, 135, 160);
                doc.rect(30, 105, 0, 45).stroke();
                doc.rect(115, 105, 0, 45).stroke();
                doc.rect(340, 105, 0, 45).stroke();
                doc.rect(410, 105, 0, 45).stroke();
                doc.rect(580, 105, 0, 45).stroke();
                doc.rect(30, 170, 550, 590).stroke();
                doc.rect(30, 190, 550, 0).stroke();
                doc.font('Helvetica-Bold', 8);
                doc.text("Campamentos", 0, 177, { align: "center" });
                var x = 125
                var xx = 30
                var xxx = 125
                destinos.forEach(function (destino, index, array) {
                    doc.rect(x, 190, 0, 570).stroke();
                    //doc.rect(xx, 212, 91, 0).stroke();

                    if (index == 0) {
                        doc.text(destino.nombre, xx, 195, { width: 91, align: "center" });
                        doc.rect(xx, 212, 95, 0).stroke();
                    } else {
                        doc.text(destino.nombre, x - 91, 195, { width: 91, align: "center" });
                        doc.rect(xxx, 212, 91, 0).stroke();
                        xxx += 91
                    }
                    x += 91
                    xx += 95
                })
            }
            $scope.obtenerbeneficiosSocialesEmpresa = function () {
                $scope.paginator = Paginator();
                $scope.paginator.column = "id";
                $scope.paginator.direccion = "asc";
                $scope.filtroBeneficioEmpresa = {
                    empresa: $scope.usuario.id_empresa,
                    inicio: "",
                    fin: "",
                    motivo: "",
                    tipo: 0,
                }
                $scope.paginator.callBack = $scope.listaBeneficiosEmpresa;
                $scope.paginator.getSearch("", $scope.filtroBeneficioEmpresa, null);
            }
            $scope.listaBeneficiosEmpresa = function () {
                if ($scope.paginator.filter.inicio != 0) {
                    $scope.paginator.filter.inicio = new Date($scope.convertirFecha($scope.paginator.filter.inicio))
                    $scope.paginator.filter.fin = new Date($scope.convertirFecha($scope.paginator.filter.fin))
                }
                var promesa = BeneficioEmpresa($scope.paginator)
                promesa.then(function (datos) {
                    if ($scope.paginator.filter.inicio != 0) {
                        $scope.paginator.filter.inicio = $scope.fechaATexto($scope.paginator.filter.inicio)
                        $scope.paginator.filter.fin = $scope.fechaATexto($scope.paginator.filter.fin)
                    }
                    $scope.paginator.setPages(datos.paginas);
                    $scope.beneficiosEmpresa = datos.beneficios
                })
            }

            $scope.imprimirReciboVacacionH = function (vacacion, nombre, fechaIngreso) {
                convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {
                    var doc = new PDFDocument({ compress: false, size: 'letter', margin: 10, bufferPages: true });
                    var stream = doc.pipe(blobStream());
                    var fechaActual = new Date(vacacion.fecha_creacion);
                    var y = 30
                    var currentDate = new Date()
                    $scope.dibujarCabeceraPDFImpresionVacacion(doc, vacacion, imagenEmpresa, y, nombre);
                    doc.font('Helvetica', 10);
                    if (vacacion.fecha_creacion) {
                        doc.text($scope.fechaATexto(vacacion.fecha_creacion), 80, y + 80);
                    } else {
                        doc.text($scope.fechaATexto(currentDate), 80, y + 80);
                    }
                    doc.text(nombre, 90, y + 110);
                    doc.text($scope.fechaATexto(fechaIngreso), 410, y + 110);

                    var gestiones = ""
                    var gestion = 0
                    var arregloGestion = []
                    var aplicadas = 0
                    if (vacacion.detalleDescuentosVacacionHistorial) {
                        for (var i = 0; i < vacacion.detalleDescuentosVacacionHistorial.length; i++) {
                            var element = vacacion.detalleDescuentosVacacionHistorial[i]
                            aplicadas += element.historialVacacion.aplicadas
                            if (gestiones.length > 0) {
                                gestiones += " | " + element.historialVacacion.gestion + "-" + (element.historialVacacion.gestion + 1)
                            } else {
                                gestiones = element.historialVacacion.gestion + "-" + (element.historialVacacion.gestion + 1)
                            }
                            gestion = element.historialVacacion.gestion > gestion ? element.historialVacacion.gestion : gestion
                            arregloGestion.push(element.historialVacacion.gestion)
                        }

                        if (vacacion.detalleDescuentosVacacionHistorial.length > 0) {
                            var cantDias = 0;
                            var restHistorialV = vacacion.detalleDescuentosVacacionHistorial[vacacion.detalleDescuentosVacacionHistorial.length - 1];
                            var endDate = moment($scope.fechaATexto(vacacion.fecha_inicio), "DD/MM/YYYY");
                            for (var h = 0; h < $scope.historialEmpleadoVacaciones.length; h++) {
                                var arrH = $scope.historialEmpleadoVacaciones[h];
                                var startDate = moment($scope.fechaATexto(arrH.fecha_inicio), "DD/MM/YYYY");

                                if (arrH.detalleDescuentosVacacionHistorial.length > 0) {
                                    for (const dArrH of arrH.detalleDescuentosVacacionHistorial) {
                                        for (const gestion of arregloGestion) {


                                            if (dArrH.historialVacacion.gestion == gestion && startDate.isBefore(endDate)) {
                                                cantDias += Number(arrH.dias);
                                            }
                                        }
                                    }

                                }
                                if (arrH.id == vacacion.id) {
                                    break;
                                }
                            }

                            restanteText = Number(vacacion.dias_restante) + " días de la Gestion " + vacacion.detalleDescuentosVacacionHistorial[vacacion.detalleDescuentosVacacionHistorial.length - 1].historialVacacion.gestion + "-" + (vacacion.detalleDescuentosVacacionHistorial[vacacion.detalleDescuentosVacacionHistorial.length - 1].historialVacacion.gestion + 1);

                            doc.text(restanteText, 430, y + 140);
                        }

                    } else {
                        doc.text(restante, 430, y + 140);
                    }

                    doc.text(gestiones, 100, y + 140);

                    doc.text((vacacion.inicio_tipo) ? $scope.fechaATexto(vacacion.fecha_inicio) + " (dia)" : $scope.fechaATexto(vacacion.fecha_inicio) + " (medio dia)", 60, y + 170);
                    doc.text((vacacion.fin_tipo) ? $scope.fechaATexto(vacacion.fecha_fin) + " (dia)" : $scope.fechaATexto(vacacion.fecha_fin) + " (medio dia)", 370, y + 170);
                    doc.text(vacacion.dias + " días", 70, y + 200);
                    doc.text(vacacion.domingos, 305, y + 200)
                    if (vacacion.feriados != undefined) {
                        doc.text(vacacion.feriados, 410, y + 200)
                    } else {
                        doc.text(vacacion.dias_descuento, 410, y + 200)
                    }

                    doc.text(vacacion.observacion, 40, y + 260);


                    doc.font('Helvetica', 5);
                    doc.text("EMISIÓN: " + fechaActual.getDate() + "/" + (fechaActual.getMonth() + 1) + "/" + fechaActual.getFullYear(), 200, 375);
                    doc.text("IMPRESIÓN: " + currentDate.getDate() + "/" + (currentDate.getMonth() + 1) + "/" + currentDate.getFullYear(), 260, 375);
                    doc.text("USUARIO: " + $scope.usuario.persona.nombre_completo, 40, 375);
                    doc.font('Helvetica', 8);
                    doc.rect(3, 400, 600, 0).dash(1, { space: 5 }).stroke();
                    y = 430
                    $scope.dibujarCabeceraPDFImpresionVacacion(doc, vacacion, imagenEmpresa, 430, nombre);
                    doc.font('Helvetica', 10);
                    doc.text($scope.fechaATexto(currentDate), 80, y + 80);
                    doc.text(nombre, 90, y + 110);
                    doc.text($scope.fechaATexto(fechaIngreso), 410, y + 110);
                    var gestiones = ""
                    if (vacacion.detalleDescuentosVacacionHistorial) {
                        for (var i = 0; i < vacacion.detalleDescuentosVacacionHistorial.length; i++) {
                            var element = vacacion.detalleDescuentosVacacionHistorial[i]
                            gestiones = element.historialVacacion.gestion + "-" + (element.historialVacacion.gestion + 1)


                        }

                        if (vacacion.detalleDescuentosVacacionHistorial.length > 0) {
                            var cantDias = 0;
                            var restHistorialV = vacacion.detalleDescuentosVacacionHistorial[vacacion.detalleDescuentosVacacionHistorial.length - 1];

                            for (var h = 0; h < $scope.historialEmpleadoVacaciones.length; h++) {
                                var arrH = $scope.historialEmpleadoVacaciones[h];
                                if (arrH.detalleDescuentosVacacionHistorial.length > 0) {
                                    var anteriorRH = arrH.detalleDescuentosVacacionHistorial[arrH.detalleDescuentosVacacionHistorial.length - 1];
                                    if (anteriorRH.historialVacacion.gestion == restHistorialV.historialVacacion.gestion) {
                                        cantDias += Number(arrH.dias);
                                    }
                                }

                                if (arrH.id == vacacion.id) {
                                    break;
                                }
                            }

                            restanteText = Number(vacacion.dias_restante)/* (restHistorialV.historialVacacion.aplicadas - cantDias) */ + " días de la Gestion " + vacacion.detalleDescuentosVacacionHistorial[vacacion.detalleDescuentosVacacionHistorial.length - 1].historialVacacion.gestion + "-" + (vacacion.detalleDescuentosVacacionHistorial[vacacion.detalleDescuentosVacacionHistorial.length - 1].historialVacacion.gestion + 1);

                            doc.text(restanteText, 430, y + 140);
                        }
                    } else {
                        doc.text(restante, 430, y + 140);
                    }

                    doc.text(gestiones, 100, y + 140);
                    /*  doc.text("N/A", 295, y + 140); */

                    doc.text((vacacion.inicio_tipo) ? $scope.fechaATexto(vacacion.fecha_inicio) + " (dia)" : $scope.fechaATexto(vacacion.fecha_inicio) + " (medio dia)", 60, y + 170);
                    doc.text((vacacion.fin_tipo) ? $scope.fechaATexto(vacacion.fecha_fin) + " (dia)" : $scope.fechaATexto(vacacion.fecha_fin) + " (medio dia)", 370, y + 170);
                    doc.text(vacacion.dias + " días", 70, y + 200);
                    doc.text(vacacion.domingos, 305, y + 200)
                    if (vacacion.feriados != undefined) {
                        doc.text(vacacion.feriados, 410, y + 200)
                    } else {
                        doc.text(vacacion.dias_descuento, 410, y + 200)
                    }

                    doc.text(vacacion.observacion, 40, y + 260);
                    doc.font('Helvetica', 5);
                    doc.text("EMISIÓN: " + fechaActual.getDate() + "/" + (fechaActual.getMonth() + 1) + "/" + fechaActual.getFullYear(), 200, 775);
                    doc.text("IMPRESIÓN: " + currentDate.getDate() + "/" + (currentDate.getMonth() + 1) + "/" + currentDate.getFullYear(), 260, 775);
                    doc.text("USUARIO: " + $scope.usuario.persona.nombre_completo, 40, 775);
                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                });
                //})
                // convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {


                // });
            }

            $scope.imprimirReciboVacacion = function (vacacion, nombre, fechaIngreso, gestion, restante) {
                convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {
                    var doc = new PDFDocument({ compress: false, size: 'letter', margin: 10 });
                    var stream = doc.pipe(blobStream());
                    var fechaActual = new Date();
                    var y = 30
                    var currentDate = new Date()
                    $scope.dibujarCabeceraPDFImpresionVacacion(doc, vacacion, imagenEmpresa, y, nombre);
                    doc.font('Helvetica', 10);
                    if (vacacion.fecha_creacion) {
                        doc.text($scope.fechaATexto(vacacion.fecha_creacion), 80, y + 80);
                    } else {
                        doc.text($scope.fechaATexto(currentDate), 80, y + 80);
                    }
                    doc.text(nombre, 90, y + 110);
                    doc.text($scope.fechaATexto(fechaIngreso), 410, y + 110);

                    var gestiones = ""
                    if (vacacion.detalleDescuentosVacacionHistorial) {
                        for (var i = 0; i < vacacion.detalleDescuentosVacacionHistorial.length; i++) {
                            var element = vacacion.detalleDescuentosVacacionHistorial[i]
                            gestiones = element.historialVacacion.gestion + "-" + (element.historialVacacion.gestion + 1)
                        }
                        if (vacacion.detalleDescuentosVacacionHistorial.length > 0) {
                            doc.text(restante  /* + vacacion.detalleDescuentosVacacionHistorial[vacacion.detalleDescuentosVacacionHistorial.length - 1].historialVacacion.gestion + "-" + (vacacion.detalleDescuentosVacacionHistorial[vacacion.detalleDescuentosVacacionHistorial.length - 1].historialVacacion.gestion + 1) */, 430, y + 140);
                        }
                    } else {
                        doc.text(restante, 430, y + 140);
                    }
                    if (gestion != undefined) {
                        doc.text(gestion, 100, y + 140);
                    } else {
                        doc.text(gestiones, 100, y + 140);
                    }
                    doc.text((vacacion.inicio_tipo) ? $scope.fechaATexto(vacacion.fecha_inicio) + " (dia)" : $scope.fechaATexto(vacacion.fecha_inicio) + " (medio dia)", 60, y + 170);
                    doc.text((vacacion.fin_tipo) ? $scope.fechaATexto(vacacion.fecha_fin) + " (dia)" : $scope.fechaATexto(vacacion.fecha_fin) + " (medio dia)", 370, y + 170);
                    doc.text(vacacion.dias + " días", 70, y + 200);
                    doc.text(vacacion.domingos, 305, y + 200)
                    if (vacacion.feriados != undefined) {
                        doc.text(vacacion.feriados, 410, y + 200)
                    } else {
                        doc.text(vacacion.dias_descuento, 410, y + 200)
                    }

                    doc.text(vacacion.observacion, 40, y + 260);


                    doc.font('Helvetica', 5);
                    doc.text("EMISIÓN: " + fechaActual.getDate() + "/" + (fechaActual.getMonth() + 1) + "/" + fechaActual.getFullYear(), 200, 375);
                    doc.text("IMPRESIÓN: " + currentDate.getDate() + "/" + (currentDate.getMonth() + 1) + "/" + currentDate.getFullYear(), 260, 375);
                    doc.text("USUARIO: " + $scope.usuario.persona.nombre_completo, 40, 375);
                    doc.font('Helvetica', 8);
                    doc.rect(3, 400, 600, 0).dash(1, { space: 5 }).stroke();
                    y = 430
                    $scope.dibujarCabeceraPDFImpresionVacacion(doc, vacacion, imagenEmpresa, 430, nombre);
                    doc.font('Helvetica', 10);
                    doc.text($scope.fechaATexto(currentDate), 80, y + 80);
                    doc.text(nombre, 90, y + 110);
                    doc.text($scope.fechaATexto(fechaIngreso), 410, y + 110);
                    var gestiones = ""
                    if (vacacion.detalleDescuentosVacacionHistorial) {
                        for (var i = 0; i < vacacion.detalleDescuentosVacacionHistorial.length; i++) {
                            var element = vacacion.detalleDescuentosVacacionHistorial[i]
                            gestiones = element.historialVacacion.gestion + "-" + (element.historialVacacion.gestion + 1)


                        }
                        if (vacacion.detalleDescuentosVacacionHistorial.length > 0) {
                            doc.text(restante /* + vacacion.detalleDescuentosVacacionHistorial[vacacion.detalleDescuentosVacacionHistorial.length - 1].historialVacacion.gestion + "-" + (vacacion.detalleDescuentosVacacionHistorial[vacacion.detalleDescuentosVacacionHistorial.length - 1].historialVacacion.gestion + 1) */, 430, y + 140);
                        }
                    } else {
                        doc.text(restante, 430, y + 140);
                    }
                    if (gestion != undefined) {
                        doc.text(gestion, 100, y + 140);
                    } else {
                        doc.text(gestiones, 100, y + 140);
                    }
                    /*  doc.text("N/A", 295, y + 140); */

                    doc.text((vacacion.inicio_tipo) ? $scope.fechaATexto(vacacion.fecha_inicio) + " (dia)" : $scope.fechaATexto(vacacion.fecha_inicio) + " (medio dia)", 60, y + 170);
                    doc.text((vacacion.fin_tipo) ? $scope.fechaATexto(vacacion.fecha_fin) + " (dia)" : $scope.fechaATexto(vacacion.fecha_fin) + " (medio dia)", 370, y + 170);
                    doc.text(vacacion.dias + " días", 70, y + 200);
                    doc.text(vacacion.domingos, 305, y + 200)
                    if (vacacion.feriados != undefined) {
                        doc.text(vacacion.feriados, 410, y + 200)
                    } else {
                        doc.text(vacacion.dias_descuento, 410, y + 200)
                    }

                    doc.text(vacacion.observacion, 40, y + 260);
                    doc.font('Helvetica', 5);
                    doc.text("EMISIÓN: " + fechaActual.getDate() + "/" + (fechaActual.getMonth() + 1) + "/" + fechaActual.getFullYear(), 200, 775);
                    doc.text("IMPRESIÓN: " + currentDate.getDate() + "/" + (currentDate.getMonth() + 1) + "/" + currentDate.getFullYear(), 260, 775);
                    doc.text("USUARIO: " + $scope.usuario.persona.nombre_completo, 40, 775);
                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                });
                //})
                // convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {


                // });
            }

            $scope.dibujarCabeceraPDFImpresionVacacion = function (doc, vacacion, imagenEmpresa, y, nombre) {
                doc.font('Helvetica-Bold', 10);
                var empresa = $scope.usuario.empresa.razon_social
                doc.text(empresa, 40, y + 35);
                doc.font('Helvetica-Bold', 16);
                //cabecera
                doc.text("BOLETA DE PERMISO", 0, y, { align: "center" });
                doc.text("VACACIONES", 0, y + 30, { align: "center" });
                doc.rect(0, y + 65, 630, 0).dash(1, { space: 0 }).stroke();
                doc.image(imagenEmpresa, 40, y - 20, { fit: [80, 80] });            //cuerpo
                doc.font('Helvetica-Bold', 10);
                doc.text("Fecha:", 40, y + 80);
                doc.text("Nombre:", 40, y + 110);
                doc.text("F. Ingreso:", 350, y + 110);
                doc.text("Gestiones:", 40, y + 140);
                /*  doc.text("Gestión 2:", 240, y + 140); */
                doc.text("Días restantes:", 350, y + 140);
                doc.text("del:", 40, y + 170);
                doc.text("Al:", 350, y + 170);
                doc.text("Total:", 40, y + 200);
                doc.text("OBSERVACIÓN", 40, y + 230);
                doc.text("Domingos:", 240, y + 200)
                doc.text("Feriados:", 350, y + 200)
                doc.font('Helvetica', 10);
                doc.text(nombre, 40, y + 320);
                doc.text("TRABAJADOR", 100, y + 330);
                doc.text("JEFE DE AREA", 280, y + 320);
                doc.text("JEFE DE R.R.H.H.", 440, y + 320);
            }
            $scope.fechaPorDia = function (año, dia) {
                var date = new Date(año, 0);
                return new Date(date.setDate(dia));
            }

            $scope.generarPdfEstadoVacacionEmpresa = function (datos, delEmpleado) {
                convertUrlToBase64Image($scope.usuario.empresa.imagen, function (img) {
                    blockUI.start();
                    var doc = new PDFDocument({ size: 'letter', margin: 10 });
                    var stream = doc.pipe(blobStream());

                    if (delEmpleado) {
                        var y = 120, itemsPorPagina = 23, items = 0, pagina = 1, totalPaginas = Math.ceil(datos.length / itemsPorPagina);
                        $scope.dibujarCabeceraPDFVacacionEmpresa(doc, pagina, totalPaginas, img, delEmpleado);
                        doc.font('Helvetica', 8);
                        for (var i = 0; i < datos.length && items <= itemsPorPagina; i++) {
                            var vacacion = datos[i]
                            var gestion = "";
                            for (let j = 0; j < vacacion.detalleDescuentosVacacionHistorial.length; j++) {
                                gestion += vacacion.detalleDescuentosVacacionHistorial[j].historialVacacion.gestion + "\n";
                            }
                            if (vacacion.observacion.length > 60) {
                                doc.text(gestion ? gestion : "Sin Registro", 30, y, { width: 60, align: "center" });
                                doc.text($scope.fechaATexto(vacacion.fecha_inicio), 90, y, { width: 60, align: "center" });
                                doc.text($scope.fechaATexto(vacacion.fecha_fin), 150, y, { width: 60, align: "center" });
                                doc.text(vacacion.dias ? vacacion.dias : "Sin Registro", 210, y, { width: 50, align: "center" });
                                doc.text(vacacion.observacion ? vacacion.observacion : "", 260, y, { width: 322, align: "justify" });
                                var cant = Math.ceil(vacacion.observacion.length / 70);
                                var inc = cant * 4;
                                y = y + inc;
                            } else {
                                doc.text(gestion ? gestion : "Sin Registro", 30, y, { width: 60, align: "center" });
                                doc.text($scope.fechaATexto(vacacion.fecha_inicio), 90, y, { width: 60, align: "center" });
                                doc.text($scope.fechaATexto(vacacion.fecha_fin), 150, y, { width: 60, align: "center" });
                                doc.text(vacacion.dias ? vacacion.dias : "Sin Registro", 210, y, { width: 50, align: "center" });
                                doc.text(vacacion.observacion ? vacacion.observacion : "", 260, y, { width: 322, align: "justify" });
                            }
                            y = y + 20;
                            items++;
                            if (y > 740) {
                                doc.addPage({ margin: 0, bufferPages: true });
                                y = 120;
                                items = 0;
                                pagina = pagina + 1;
                                $scope.dibujarCabeceraPDFVacacionEmpresa(doc, pagina, totalPaginas, img, delEmpleado);
                                doc.font('Helvetica', 8);
                            }
                        }
                    } else {
                        var y = 120, itemsPorPagina = 21, items = 0, pagina = 1, totalPaginas = Math.ceil(datos.length / itemsPorPagina);
                        $scope.dibujarCabeceraPDFVacacionEmpresa(doc, pagina, totalPaginas, img, delEmpleado);
                        doc.font('Helvetica', 8);
                        for (var i = 0; i < datos.length && items <= itemsPorPagina; i++) {
                            var vacacion = datos[i]
                            var obs = vacacion.observacion;
                            var gestion = "";
                            for (let j = 0; j < vacacion.detalleDescuentosVacacionHistorial.length; j++) {
                                gestion += vacacion.detalleDescuentosVacacionHistorial[j].historialVacacion.gestion + "\n";
                            }
                            doc.text(vacacion.ficha.empleado.persona.nombre_completo ? vacacion.ficha.empleado.persona.nombre_completo : "Sin Registro", 30, y, { width: 90 });
                            doc.text($scope.fechaATexto(vacacion.fecha_inicio), 120, y, { width: 55, align: "center" });
                            doc.text($scope.fechaATexto(vacacion.fecha_fin), 175, y, { width: 55, align: "center" });
                            doc.text(vacacion.dias ? vacacion.dias : "Sin Valor", 230, y, { width: 30, align: "center" });
                            doc.text(gestion ? gestion : "Sin Registro", 260, y, { width: 50, align: "center" });
                            doc.text(vacacion.dias_restante >= 0 ? vacacion.dias_restante : "Sin Registro", 310, y, { width: 40, align: "center" });
                            doc.text(obs.length >= 90 ? obs.substr(0, 90) + "..." : obs, 350, y, { width: 202, align: "justify" });
                            if (vacacion.observacion.length >= 34) {
                                y = y + 10;
                            } else {
                                doc.text(vacacion.ficha.empleado.persona.nombre_completo ? vacacion.ficha.empleado.persona.nombre_completo : "Sin Registro", 30, y, { width: 90 });
                                doc.text($scope.fechaATexto(vacacion.fecha_inicio), 120, y, { width: 55, align: "center" });
                                doc.text($scope.fechaATexto(vacacion.fecha_fin), 175, y, { width: 55, align: "center" });
                                doc.text(vacacion.dias ? vacacion.dias : "Sin Valor", 230, y, { width: 30, align: "center" });
                                doc.text(gestion ? gestion : "Sin Registro", 260, y, { width: 50, align: "center" });
                                doc.text(vacacion.dias_restante >= 0 ? vacacion.dias_restante : "Sin Registro", 310, y, { width: 40, align: "center" });
                                doc.text(obs.length >= 90 ? obs.substr(0, 90) + "..." : obs, 350, y, { width: 202, align: "justify" });
                            }
                            y = y + 20;
                            items++;
                            if (y > 740) {
                                doc.addPage({ margin: 0, bufferPages: true });
                                y = 120;
                                items = 0;
                                pagina = pagina + 1;
                                $scope.dibujarCabeceraPDFVacacionEmpresa(doc, pagina, totalPaginas, img, delEmpleado);
                                doc.font('Helvetica', 8);
                            }
                        }
                    }
                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                    blockUI.stop();
                })
            }
            $scope.generarPdfHistorialVacacionEmpresa = function (datos, delEmpleado) {
                blockUI.start();
                var doc = new PDFDocument({ size: 'letter', margin: 10 });
                var stream = doc.pipe(blobStream());
                // draw some text
                var totalCosto = 0;
                var y = 120, itemsPorPagina = 28, items = 0, pagina = 1, totalPaginas = Math.ceil(datos.length / itemsPorPagina);
                $scope.dibujarCabeceraPDFHistorialVacacionEmpresa(doc, 1, totalPaginas, datos, delEmpleado);
                doc.font('Helvetica', 8);
                for (var i = 0; i < datos.length; i++) {
                    var vacacion = datos[i]
                    if (!vacacion.ficha.fecha_expiracion) {
                        for (var k = 0; k < vacacion.ficha.historialVacaciones.length && items <= itemsPorPagina; k++) {
                            var Historial = vacacion.ficha.historialVacaciones[k]
                            doc.text(vacacion.ficha.empleado.persona.nombre_completo, 45, y);
                            doc.text(Historial.aplicadas, 250, y, { width: 50 });
                            doc.text(Historial.tomadas, 350, y, { width: 60 });
                            doc.text(Historial.aplicadas - Historial.tomadas, 450, y, { width: 50 });
                            y = y + 20;
                            items++;
                        }

                        if (items == itemsPorPagina) {
                            doc.addPage({ margin: 0, bufferPages: true });
                            y = 120;
                            items = 0;
                            pagina = pagina + 1;
                            $scope.dibujarCabeceraPDFHistorialVacacionEmpresa(doc, 1, totalPaginas, datos, delEmpleado);
                            doc.font('Helvetica', 8);
                        }
                    }
                }
                doc.font('Helvetica', 5);
                var fechaActual = new Date();
                var min = fechaActual.getMinutes();
                if (min < 10) {
                    min = "0" + min;
                }
                var currentDate = new Date()
                //doc.text("EMISIÓN: " + fechaActual.getDate() + "/" + (fechaActual.getMonth() + 1) + "/" + fechaActual.getFullYear(), 200, 775);
                doc.text("IMPRESIÓN: " + $scope.fechaATexto(fechaActual) + " Hr. " + fechaActual.getHours() + ":" + min, 180, 775);
                doc.text("USUARIO: " + $scope.usuario.persona.nombre_completo, 40, 775);
                doc.font('Helvetica-Bold', 8);
                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
                blockUI.stop();

            }

            $scope.validarAltasBajas = function (datosEmp, fechas) {
                return new Promise((resolve, reject) => {
                    var empVal = [];
                    for (var j = 0; j < datosEmp.length; j++) {
                        var emplead = datosEmp[j];
                        var ficha2 = emplead.empleadosFichas.pop();
                        if (ficha2 != undefined) {
                            if (ficha2.fecha_expiracion == null) {
                                if (new Date(ficha2.fecha_inicio) >= fechas.inicio && new Date(ficha2.fecha_inicio) <= fechas.fin) {
                                    datosEmp[j].empleadosFichas = ficha2;
                                    empVal.push(datosEmp[j]);
                                }
                            } else {
                                if (new Date(ficha2.fecha_expiracion) >= fechas.inicio && new Date(ficha2.fecha_expiracion) <= fechas.fin) {
                                    datosEmp[j].empleadosFichas = ficha2;
                                    empVal.push(datosEmp[j]);
                                }
                            }
                        }
                    }
                    return resolve(empVal);
                });

            }
            $scope.generarPdfAltasBajas = function (rango) {
                SweetAlert.swal({
                    title: 'Obteniendo datos...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                let filtro = {};
                filtro.tipo = rango.tipo;
                if (rango.inicio) {
                    filtro.inicio = new Date($scope.convertirFecha(rango.inicio))
                    filtro.fin = new Date($scope.convertirFecha(rango.fin))
                }
                filtro.tipo = rango.tipo
                let promise = ListaFichasAltasBajasEmpleados($scope.usuario.id_empresa, filtro)
                promise.then(function (data) {
                    let fichasEmpleados = data.fichas;
                    let height = 15;
                    let x = 30, y = 115, items = 0, width = 555, itemsPage = 40, pagina = 1, totalPaginas = Math.ceil(fichasEmpleados.length / itemsPage);
                    let doc = new PDFDocument({ size: 'letter', margin: 10 });
                    let stream = doc.pipe(blobStream());
                    doc.lineGap(-1.5);
                    $scope.dibujarCabeceraPdfAltasBajas(doc, 1, totalPaginas, filtro);
                    fichasEmpleados = fichasEmpleados.sort((a, b) => {
                        if(!(a.empleado.persona.nombre_completo && b.empleado.persona.nombre_completo)) return SweetAlert.swal("", "Error al ordenar registros <br>"+ a+"<br>"+b, "error")
                        if(a.empleado.persona.nombre_completo > b.empleado.persona.nombre_completo) return 1
                        if(a.empleado.persona.nombre_completo < b.empleado.persona.nombre_completo) return -1
                        if(a.fecha_inicio && b.fecha_inicio) {
                            if(a.fecha_inicio > b.fecha_inicio) return 1
                            if(a.fecha_inicio < b.fecha_inicio) return -1
                        }
                        if(a.fecha_expiracion && b.fecha_expiracion) {
                            if(a.fecha_expiracion > b.fecha_expiracion) return 1
                            if(a.fecha_expiracion < b.fecha_expiracion) return -1
                        }
                        return 0
                    })
                    SweetAlert.update({ title: "Generando documento..." })
                    for (let i = 0; i < fichasEmpleados.length; i++) {
                        doc.font('Helvetica', 6);
                        let ficha = fichasEmpleados[i];
                        doc.text(i + 1, 30, y + 3, { width: 25, align: "center" });
                        doc.text(ficha.empleado.persona.nombre_completo, 55, y + 3, { width: 130 });
                        if (ficha.cargos.length > 0) {
                            let yy = y
                            for (let i = 0; i < ficha.cargos.length; i++) {
                                const cargo = ficha.cargos[i];
                                let cargo_nombre = (cargo && cargo.cargo && cargo.cargo.nombre) || '';
                                if (i < 2) {
                                    doc.text(cargo_nombre, 185, yy + 3, { width: 100 });
                                    i = ficha.cargos.length
                                } else {
                                    doc.text(cargo_nombre + (ficha.cargos.length > 2 ? ",etc." : ""), 185, yy + 3, { width: 100 });
                                }
                                yy += 10
                            }
                        } else {
                            doc.text("", 185, y + 3, { width: 100 });
                        }
                        let motivo = ficha.beneficiosSociales.length > 0 ? ficha.beneficiosSociales[0].motivo ? ficha.beneficiosSociales[0].motivo.nombre : '' : ''
                        doc.text(ficha.empleado.campo.nombre ? ficha.empleado.campo.nombre : "", 285, y + 3, { width: 70, align: 'center' });
                        doc.text(motivo, 355, y + 3, { width: 75 });
                        doc.text(ficha.fecha_inicio ? $scope.fechaATexto(new Date(ficha.fecha_inicio)) : "", 430, y + 3, { width: 35, align: 'center' });
                        doc.text(ficha.fecha_expiracion ? $scope.fechaATexto(new Date(ficha.fecha_expiracion)) : "", 465, y + 3, { width: 35, align: 'center' });
                        doc.font('Helvetica', 6);
                        doc.text(ficha.observacion ? ficha.observacion.toUpperCase() : "", 500, y + 3, { width: 85 });
                        y = y + height; items++;
                        if (itemsPage === items) {
                            y = y + 10;
                            doc.font('Helvetica', 6);
                            doc.addPage({ margin: 0, bufferPages: true });
                            y = 115; items = 0;
                            pagina = pagina + 1;
                            $scope.dibujarCabeceraPdfAltasBajas(doc, pagina, totalPaginas, filtro);
                            doc.font('Helvetica', 6);
                        }
                    }
                    doc.font('Helvetica', 7);
                    doc.end();
                    stream.on('finish', function () {
                        SweetAlert.swal({
                            title: 'Finalizado!',
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        })
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    })      
                    blockUI.stop();
                })
                    .catch(() => {
                        console.log('error en promesa validarAltasBajas');
                    });
            }

            $scope.generarPdfAltasBajasEmpleadoPdf = function () {
                let filtro = {};
                SweetAlert.swal({
                    title: 'Obteniendo datos...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                ListaFichasAltasBajasEmpleadoIndividual($scope.usuario.id_empresa, filtro, $scope.empleado.id)
                .then(function ({ fichas }) {
                    if(!fichas) return SweetAlert.swal("", "No se puedieron recuperar las fichas", "error")
                    if(fichas.length === 0) return SweetAlert.swal("", "El empleado no histórico de contratos", "info")
                    try {
                        SweetAlert.update({ title: "Generando documento..." })
                        convertUrlToBase64Image($scope.usuario.empresa.imagen, async function (logo) { 
                            let doc = new PDFDocument({ size: 'letter', margin: 10, compress: false });
                            let stream = doc.pipe(blobStream());
                            doc.lineGap(-1.2);
                            let x = 30, y = 122, items = 0, itemsPerPage = 40, pagina = 1, paginas = Math.ceil(fichas.length/itemsPerPage);
                            let titulo = "REPORTE HISTÓRICO DE CONTRATOS"
                            let subtitulo = $scope.empleado ? $scope.empleado.nombre_completo : ""
                            let meta = "Impreso: "+ $scope.formatoFechaHora(new Date)+ "     Usuario: "+$scope.usuario.nombre_usuario;
                            $scope.dibujarCabeceraPdfAltasBajasIndividual(doc, logo, titulo, subtitulo, meta, pagina, paginas);
                            for (let i = 0; i < fichas.length; i++) {
                                const { beneficiosSociales, fecha_inicio, fecha_expiracion, cargos, empleado, observacion } = fichas[i];
                                let cargo = ""
                                if(cargos){
                                    if(cargos.length === 1) cargo = cargos[0].cargo ? cargos[0].cargo.nombre : ""
                                    if(cargos.length > 1) cargo = cargos.map(({ cargo }) => {
                                        if(cargo) return cargo.nombre;
                                        return 0
                                    }).join(", ");
                                }
                                let motivo = ""
                                if(beneficiosSociales && beneficiosSociales.length > 0 ){
                                    if(beneficiosSociales.length === 1){
                                        motivo = beneficiosSociales[0].motivo ? beneficiosSociales[0].motivo.nombre : ""
                                    }else{
                                        motivo = beneficiosSociales[beneficiosSociales.length - 1].motivo ? beneficiosSociales[beneficiosSociales.length - 1].motivo.nombre : ""
                                    }
                                }
                                doc.text(i + 1, x, y + 3, { width: 30, align: "center"});
                                doc.text( cargo ? cargo : "", 60, y + 3, { width: 90, align: "center"});
                                doc.text(empleado ? empleado.campo ? empleado.campo.nombre : "" :"", 150, y + 3, { width: 70, align: "center"});
                                doc.text(motivo ? motivo : "", 220, y + 3, { width: 133, align: "center"});
                                doc.text(fecha_inicio ? $scope.fechaATexto(fecha_inicio) : "", 353, y + 3, { width: 50, align: "center"});
                                doc.text(fecha_expiracion ? $scope.fechaATexto(fecha_expiracion) : "", 403, y + 3, { width: 50, align: "center"});
                                doc.text(observacion ? observacion : "", 453, y + 3, { width: 132, align: "center"});
                                items++; y+=10;
                                if(items === itemsPerPage){
                                    doc.addPage({ margin: 0, bufferPages: true });
                                    y = 122;
                                    pagina++;
                                    $scope.dibujarCabeceraPdfAltasBajasIndividual(doc, logo, titulo, subtitulo, meta, pagina, paginas);
                                }
                            }
                            doc.end();
                            stream.on('finish', function () {
                                SweetAlert.swal({
                                    title: 'Finalizado!',
                                    icon: 'success',
                                    timer: 1200,
                                    showConfirmButton: false
                                })
                                var fileURL = stream.toBlobURL('application/pdf');
                                window.open(fileURL, '_blank', 'location=no');
                            });
                        })
                    } catch (e) {
                        SweetAlert.swal("", "<b>Ocurrió un error al generar reporte</b><br>"+e, "error")    
                    }
                })
            }

            $scope.dibujarCabeceraPdfAltasBajas = function (doc, pagina, totalpgn, data) {
                doc.font('Helvetica-Bold', 7);
                doc.text($scope.usuario.empresa.razon_social, 45, 25, { width: 150, align: "center" });
                doc.text('CASA MATRIZ', 45, 35, { width: 150, align: "center" });
                doc.font('Helvetica', 7).text($scope.usuario.empresa.direccion, 45, 45, { width: 150, align: "center" });
                var del = $scope.fechaATexto(data.inicio);
                var al = $scope.fechaATexto(data.fin);
                doc.font('Helvetica-Bold', 9);
                switch (data.tipo) {
                    case "1":
                        data.namText = "ALTAS";
                        break;
                    case "2":
                        data.namText = "BAJAS";
                        break;
                    case "3":
                        data.namText = "ALTAS Y BAJAS";
                        break;
                    default:
                        data.namText = "REPORTE";
                        break;
                }
                doc.lineWidth(0.35);
                doc.text("REPORTE DE " + data.namText, 0, 75, { align: "center" });
                doc.font('Helvetica-Bold', 6);
                doc.text("Del " + del + " Al " + al, 0, 90, { align: "center" });
                doc.font('Helvetica-Bold', 6);
                doc.rect(30, 100, 555, 0).stroke();
                doc.rect(30, 114, 555, 0).stroke();
                doc.font('Helvetica-Bold', 6);
                doc.text("N°", 30, 106, { width: 25, align: "center" });
                doc.text("TRABAJADOR", 55, 106, { width: 130, align: "center" });
                doc.text("CARGO", 185, 106, { width: 100, align: "center" });
                doc.text("CAMPO", 285, 106, { width: 70, align: "center" });
                doc.text("MOTIVO DE BAJA", 355, 106, { width: 75, align: "center" });
                doc.text("INGRESO", 430, 106, { width: 35, align: "center" });
                doc.text("RETIRO", 465, 106, { width: 35, align: "center" });
                doc.text("OBSERVACIÓN", 500, 106, { width: 85, align: "center" });
                doc.font('Helvetica', 6);
                let currentDate = new Date();
                let dia = currentDate.getDate();
                let mes = currentDate.getMonth() + 1;
                let anio = currentDate.getFullYear();
                let horas = currentDate.getHours();
                let min = currentDate.getMinutes() < 10 ? '0' + currentDate.getMinutes() : currentDate.getMinutes();

                doc.text("Página : " + pagina + " de " + totalpgn, 520, 755);
                doc.text("FECHA : " + dia + "/" + mes + "/" + anio + "   " + "Hrs:" + horas + ":" + min, 55, 755);
                doc.text("USUARIO: " + $scope.usuario.nombre_usuario, 170, 755);
            }
            //Fin Reporte PDF Altas y Bajas

            //  INICIO REPORTE HISTÓRICO DE FICHAS POR EMPLEADO
            $scope.dibujarCabeceraPdfAltasBajasIndividual = function ( doc, logo, titulo, subtitulo, meta, pagina, paginas ) {
                doc.lineGap(-1).lineWidth(0.4)
                doc.rect( 30, 30, 555, 65 ).stroke();
                doc.rect( 195, 30, 0, 65 ).stroke();
                if (logo.length > 0 && logo !== "error") {
                    if (logo) {
                        doc.image(logo, 72, 33, { fit: [80, 45] }); 
                    }
                }else{
                    doc.font("Helvetica-Bold", 7).text($scope.usuario.empresa.razon_social ? $scope.usuario.empresa.razon_social.toUpperCase() : "", 30, 53, { width: 165, align:"center"})
                }
                doc.font("Helvetica", 4.7).text($scope.usuario.empresa.direccion ? $scope.usuario.empresa.direccion.toUpperCase() : "", 30, 82, { width: 165, align:"center"})
                doc.font("Helvetica-Bold", 10).text(titulo, 195, 55, { width: 390, align:"center"})
                doc.font("Helvetica-Bold", 9).text(subtitulo, 195, 68, { width: 390, align:"center"})
                let y = 110;
                doc.rect(30, y, 555, 0).stroke()
                doc.font("Helvetica-Bold", 7).text("N°", 30, y + 4, { width: 30, align: "center"});
                doc.text("CARGO", 60, y + 4, { width: 90, align: "center"});
                doc.text("CAMPO", 150, y + 4, { width: 70, align: "center"});
                doc.text("MOTIVO DE BAJA", 220, y + 4, { width: 133, align: "center"});
                doc.text("INGRESO", 353, y + 4, { width: 50, align: "center"});
                doc.text("RETIRO", 403, y + 4, { width: 50, align: "center"});
                doc.text("OBSERVACIÓN", 453, y + 4, { width: 132, align: "center"});
                doc.rect(30, y + 12, 555, 0).stroke()

                doc.font("Helvetica-Bold", 7).text( "Página " + pagina + " de " + paginas, 0, 760, { width: 612, align:"center"})
                doc.font("Helvetica", 5).text( meta, 0, 770, { width: 612, align:"center"})

            }
            //  FIN REPORTE HISTÓRICO DE FICHAS POR EMPLEADO

            // Inicio Reporte EXCEL Altas y Bajas
            $scope.generarExcelAltasBajas = function (rango) {
                blockUI.start();
                var filtro = {};
                if (rango.inicio) {
                    filtro.inicio = new Date($scope.convertirFecha(rango.inicio))
                    filtro.fin = new Date($scope.convertirFecha(rango.fin))
                }
                filtro.tipo = rango.tipo
                switch (filtro.tipo) {
                    case "1":
                        filtro.namText = "ALTAS";
                        break;
                    case "2":
                        filtro.namText = "BAJAS";
                        break;
                    case "3":
                        filtro.namText = "ALTAS Y BAJAS";
                        break;
                    default:
                        filtro.namText = "REPORTE";
                        break;
                }
                var data = [["", "", "REPORTE DE " + filtro.namText + " DE PERSONAL"], ["N°", "TRABAJADOR", "CARGO", "CAMPO", "BÁSICO", "FECHA INGRESO", "FECHA RETIRO", "MOTIVO DE BAJA", "OBSERVACIÓN"]]
                var promise = ListaFichasAltasBajasEmpleados($scope.usuario.id_empresa, filtro)
                promise.then(function (dato) {
                    var j = 1;
                    for (let i = 0; i < dato.fichas.length; i++) {
                        var columns = [];
                        var ficha = dato.fichas[i];
                        columns.push(i + 1);
                        columns.push(ficha.empleado.persona.nombre_completo);
                        if (ficha.cargos.length > 0) {
                            let cargos = ""
                            for (let i = 0; i < ficha.cargos.length; i++) {
                                const cargo = ficha.cargos[i];
                                cargos += cargo.cargo.nombre + ", "
                                i = ficha.cargos.length
                                if (i == ficha.cargos.length) {
                                    cargos += cargo.cargo.nombre + "."

                                }
                            }
                            columns.push(cargos)
                        } else {
                            columns.push("");
                        }
                        let motivo = ficha.beneficiosSociales.length > 0 ? ficha.beneficiosSociales[0].motivo ? ficha.beneficiosSociales[0].motivo.nombre : '' : ''
                        columns.push(ficha.empleado.campo ? ficha.empleado.campo.nombre : "");
                        columns.push(ficha.haber_basico || '');
                        columns.push(new Date(ficha.fecha_inicio));
                        var fechaExpiracionFicha = ficha.fecha_expiracion ? new Date(ficha.fecha_expiracion) : "";
                        columns.push(fechaExpiracionFicha);
                        columns.push(motivo);
                        columns.push(ficha.observacion);
                        data.push(columns);
                    }
                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                    var wscols = [
                        { wch: 6 },
                        { wch: 38 },
                        { wch: 35 },
                        { wch: 12 },
                        { wch: 24 },
                        { wch: 13 },
                        { wch: 13 }
                    ];
                    ws['!cols'] = wscols;
                    /* add worksheet to workbook */
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-" + filtro.namText + ".xlsx");
                    blockUI.stop();

                })
            }
            // Fin Reporte EXCEL Altas y Bajas

            $scope.generarExcelEstadoVacacionEmpresa = function (datos) {
                var data = [["", "", "REPORTE DE VACACIONES"], ["Nombre", "Desde", "Hasta", "Días", "Observacion", "Sabado", "Gestión", "Dias Rest.", "Estado"]]
                var totalCosto = 0;
                for (var i = 0; i < datos.length; i++) {
                    var columns = [];
                    var vacacion = datos[i]
                    if (!vacacion.ficha.fecha_expiracion) {
                        columns.push(vacacion.ficha.empleado.persona.nombre_completo);
                        columns.push(new Date(vacacion.fecha_inicio));
                        columns.push(new Date(vacacion.fecha_fin));
                        columns.push(vacacion.dias);
                        columns.push(vacacion.observacion);
                        columns.push((vacacion.sabado) ? "Si" : "No");
                        var textoGestion = ""
                        for (var j = 0; j < vacacion.detalleDescuentosVacacionHistorial.length; j++) {
                            if (j > 0) {
                                textoGestion += ", "
                            }
                            var element = vacacion.detalleDescuentosVacacionHistorial[j];
                            var gestionfin = element.historialVacacion.gestion + 1
                            textoGestion += element.historialVacacion.gestion + "-" + gestionfin;
                        }
                        columns.push(textoGestion);
                        columns.push(vacacion.diasRestantes);
                        columns.push((vacacion.ficha.empleado.eliminado) ? "Incantivo" : "Activo");
                        data.push(columns);
                    }
                }
                var ws_name = "SheetJS";
                var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-VACACIONES.xlsx");
                blockUI.stop();

            }
            $scope.generarExcelHistorialVacacionEmpresa = async function (filtro, prorreteo) {
                let historialEmpresaVacacionesGestion = await $scope.obtenerHistorialEmpresaVacacionGestion(filtro)
                if (prorreteo) {
                    historialEmpresaVacacionesGestion = await $scope.AgregarProrreteo(true, historialEmpresaVacacionesGestion)
                }
                historialEmpresaVacacionesGestion = await $scope.eliminarDupricados(historialEmpresaVacacionesGestion)
                $scope.$evalAsync()
                var data = [["Nombre", "Cargo", "Campo", "Gestión", "Aplicadas", "Todamas", "Restantes"]]
                var totalCosto = 0;
                for (var i = 0; i < historialEmpresaVacacionesGestion.length; i++) {
                    var columns = [];
                    var vacacion = historialEmpresaVacacionesGestion[i]
                    for (var k = 0; k < vacacion.ficha.historialVacaciones.length; k++) {
                        var columns = [];
                        var Historial = vacacion.ficha.historialVacaciones[k]
                        columns.push(vacacion.ficha.empleado.persona.nombre_completo);
                        var textoCargo = ""
                        for (var d = 0; d < vacacion.ficha.cargos.length; d++) {
                            var cargo = vacacion.ficha.cargos[d];
                            if (d > 0) {
                                textoCargo += ", "
                            }
                            textoCargo += cargo.cargo.nombre
                        }
                        columns.push(textoCargo);
                        columns.push(vacacion.ficha.empleado.campo.nombre);
                        var añoGes = Historial.gestion + 1
                        var textoGestion = Historial.gestion + "-" + añoGes
                        columns.push(textoGestion);
                        columns.push(Historial.aplicadas);
                        columns.push(Historial.tomadas);
                        columns.push(Historial.aplicadas - Historial.tomadas);
                        data.push(columns);
                    }

                }
                var ws_name = "SheetJS";
                var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-VACACIONES-RESTANTES.xlsx");
                blockUI.stop();

            }
            $scope.dibujarCabeceraPDFVacacionEmpresa = function (doc, pagina, totalPaginas, img, delEmpleado) {
                doc.font('Helvetica-Bold', 15);
                doc.image(img, 65, 25, { width: 120, height: 65 });
                doc.rect(274, 47, 203, 1).stroke();
                doc.text("REPORTE DE VACACIONES", 165, 35, { width: 420, align: "center" });
                doc.font('Helvetica-Bold', 11);
                if (delEmpleado) {
                    doc.text($scope.empleado.nombre_completo, 165, 55, { width: 420, align: "center" });
                    doc.text("PERIODO: TODOS", 165, 70, { width: 420, align: "center" });
                    doc.font('Helvetica-Bold', 8);
                    doc.text("GESTIÓN", 30, 100, { width: 60, align: "center" });
                    doc.text("DESDE", 90, 100, { width: 60, align: "center" });
                    doc.text("HASTA", 150, 100, { width: 60, align: "center" });
                    doc.text("DÍAS", 210, 100, { width: 50, align: "center" });
                    doc.text("OBSERVACIÓN", 260, 100, { width: 322, align: "center" });
                } else {
                    doc.text("PERIODO: TODOS", 165, 55, { width: 420, align: "center" });
                    doc.font('Helvetica-Bold', 8);
                    doc.text("NOMBRE", 30, 100, { width: 90, align: "center" });
                    doc.text("DESDE", 120, 100, { width: 55, align: "center" });
                    doc.text("HASTA", 175, 100, { width: 55, align: "center" });
                    doc.text("DÍAS", 230, 100, { width: 30, align: "center" });
                    doc.text("GESTIÓN", 260, 100, { width: 50, align: "center" });
                    doc.text("SALDO", 310, 100, { width: 40, align: "center" });
                    doc.text("OBSERVACIÓN", 350, 100, { width: 202, align: "center" });


                }
                doc.rect(30, 109, 552, 0).stroke();
                doc.font('Helvetica-Bold', 8);
                doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 465, 755, { align: "center" });
                doc.font('Helvetica', 5);
                var fechaActual = new Date();
                var min = fechaActual.getMinutes();
                if (min < 10) {
                    min = "0" + min;
                }
                doc.text("IMPRESIÓN: " + $scope.fechaATexto(fechaActual) + " Hr. " + fechaActual.getHours() + ":" + min, 180, 755);
                doc.text("USUARIO: " + $scope.usuario.persona.nombre_completo, 40, 755);

            }
            $scope.dibujarCabeceraPDFHistorialVacacionEmpresa = function (doc, pagina, totalPaginas, datos, delEmpleado) {
                doc.font('Helvetica-Bold', 12);
                doc.text("REPORTE DE VACACIONES RESTANTES", 0, 25, { align: "center" });
                if (delEmpleado) {
                    doc.text($scope.empleado.nombre_completo, 0, 45, { align: "center" });
                    doc.text("PERIODO: TODOS", 0, 65, { align: "center" });
                } else {
                    doc.text("PERIODO: TODOS", 0, 45, { align: "center" });
                }

                doc.font('Helvetica-Bold', 8);
                doc.text("EMPLEADO", 45, 90);
                doc.text("APLICADAS", 250, 90);
                doc.text("TOMADAS", 350, 90);
                doc.text("RESTANTES", 450, 90);

                doc.font('Helvetica-Bold', 8);
                doc.text("PÁGINA " + pagina + " DE " + totalPaginas, 0, 740, { align: "center" });

            }
            prorrateoVacaciones = function (prorrateo) {
                // realizar el prorrateo ======
                if (prorrateo) {
                    var fechaActual = new Date()
                    if ($scope.empleado.fecha_expiracion) {
                        fechaActual = new Date($scope.empleado.fecha_expiracion)
                    }
                    var fechaAnterior = new Date($scope.empleado.fecha_inicio)
                    $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual, 1)
                    $scope.tiempoTrabajado.dias
                    // $scope.beneficio.meses = $scope.tiempoTrabajado.meses;
                    // $scope.beneficio.dias = $scope.tiempoTrabajado.dias;
                    /*  if (fechaActual.getMonth() >= fechaAnterior.getMonth()) {
                         if (fechaActual.getDate() > fechaAnterior.getDate()) {
                             $scope.historialGestionesVacacion.pop();
                         }
                     } */
                    //

                    $scope.totalVAplicadas = 0;
                    $scope.totalVTomadas = 0;
                    $scope.totalVRestantes = 0;
                    $scope.historialGestionesVacacion.forEach(function (historial, index) {
                        if (index == $scope.tiempoTrabajado.anios) {
                            historial.aplicadas = Math.round(($scope.tiempoTrabajado.meses * historial.aplicadas) / 12
                                + ($scope.tiempoTrabajado.dias * historial.aplicadas) / 360);
                            //historial.tomadas = 0;
                        } else if (index > $scope.tiempoTrabajado.anios) {
                            historial.aplicadas = 0
                            historial.tomadas = 0
                        }
                        $scope.totalVAplicadas += historial.aplicadas;
                        $scope.totalVTomadas += historial.tomadas;
                        var totalRestantev = historial.aplicadas - historial.tomadas;
                        $scope.totalVRestantes += totalRestantev;
                    });
                } else {
                    $scope.obtenerHistorialGestionesVacacion($scope.empleado, false, false)
                }
            }
            $scope.AgregarProrreteo = async function (bandera, historialEmpresaVacacionesGestion) {

                if (bandera == true) {
                    var anio = new Date().getFullYear()
                    var anio2 = new Date().getFullYear() - 1
                    var mes = new Date().getMonth() + 1
                    for (const historial of historialEmpresaVacacionesGestion) {
                        var fechaActual = new Date()
                        if (historial.ficha.fecha_expiracion) {
                            fechaActual = new Date(historial.ficha.fecha_expiracion)
                        }
                        var fechaAnterior = new Date(historial.ficha.fecha_inicio)
                        $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual, 1)
                        $scope.tiempoTrabajado.dias
                        historial.ficha.historialVacaciones.forEach(function (historialVacacion, index) {
                            if (index == $scope.tiempoTrabajado.anios) {
                                historialVacacion.aplicadas = Math.round(($scope.tiempoTrabajado.meses * historialVacacion.aplicadas) / 12
                                    + ($scope.tiempoTrabajado.dias * historialVacacion.aplicadas) / 360);
                                //historialVacacion.tomadas = 0;
                            } else if (index > $scope.tiempoTrabajado.anios) {
                                historialVacacion.aplicadas = 0
                                historialVacacion.tomadas = 0
                            }
                        })
                    }



                }
                return historialEmpresaVacacionesGestion
            }
            $scope.AgregarProrreteoG = async function (bandera, historialEmpresaVacacionesGestion) {

                if (bandera == true) {
                    var anio = new Date().getFullYear()
                    var anio2 = new Date().getFullYear() - 1
                    var mes = new Date().getMonth() + 1
                    for (const historial of historialEmpresaVacacionesGestion) {
                        var fechaActual = new Date()
                        if (historial.fecha_expiracion) {
                            fechaActual = new Date(historial.fecha_expiracion)
                        }
                        var fechaAnterior = new Date(historial.fecha_inicio)
                        $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual, 1)
                        $scope.tiempoTrabajado.dias
                        historial.historialVacaciones.forEach(function (historialVacacion, index) {
                            if (index == $scope.tiempoTrabajado.anios) {
                                historialVacacion.aplicadas = Math.round(($scope.tiempoTrabajado.meses * historialVacacion.aplicadas) / 12
                                    + ($scope.tiempoTrabajado.dias * historialVacacion.aplicadas) / 360);
                                //historialVacacion.tomadas = 0;
                            } else if (index > $scope.tiempoTrabajado.anios) {
                                historialVacacion.aplicadas = 0
                                historialVacacion.tomadas = 0
                            }
                        })
                    }



                }
                return historialEmpresaVacacionesGestion
            }
            $scope.obtenerHistorialEmpresaVacacionGestion = async function (filtro) {
                var filtroVacaciones = { inicio: 0, fin: 0, estado: 2 }
                if (filtro.inicio) {
                    filtroVacaciones.inicio = new Date($scope.convertirFecha(filtro.inicio))
                    filtroVacaciones.fin = new Date($scope.convertirFecha(filtro.fin))

                }
                if (filtro.estado) {
                    filtroVacaciones.estado = filtro.estado
                }
                var datos = await HistorialEmpresaVacaciones($scope.usuario.id_empresa, filtroVacaciones)
                datos.forEach(function (dato, index, array) {
                    dato.diasRestantes = 0
                    for (var i = 0; i < dato.ficha.historialVacaciones.length; i++) {
                        var element = dato.ficha.historialVacaciones[i];
                        dato.diasRestantes += element.aplicadas - element.tomadas
                    }
                })
                return datos
            }

            $scope.ReporteDehijos = function (desde, hasta, todos) {
                var promesa = ListaHijosEmpleadosEmpresa($scope.usuario.id_empresa)
                promesa.then(function (datos) {
                    var fechaActual = new Date()
                    var hijosReporte = []
                    datos.forEach(function (hijo, index, array) { 
                        hijo.edad = $scope.obtenerEdad(hijo.persona.fecha_nacimiento)
                        if (index === (array.length - 1)) {
                            datos.forEach(function (hijo, index, array) {
                                if (todos) {
                                    if (hijo.edad >= desde && hijo.edad <= hasta) {
                                        hijosReporte.push(hijo)
                                        if (index === (array.length - 1)) {
                                            $scope.generarReproteHijos(hijosReporte)
                                        }
                                    } else {
                                        if (index === (array.length - 1)) {
                                            $scope.generarReproteHijos(hijosReporte)
                                        }
                                    }
                                } else if (hijo.empleado.eliminado == false) {
                                    if (hijo.edad >= desde && hijo.edad <= hasta) {
                                        hijosReporte.push(hijo)
                                        if (index === (array.length - 1)) {
                                            $scope.generarReproteHijos(hijosReporte)
                                        }
                                    } else {
                                        if (index === (array.length - 1)) {
                                            $scope.generarReproteHijos(hijosReporte)
                                        }
                                    }
                                } else {
                                    if (index === (array.length - 1)) {
                                        $scope.generarReproteHijos(hijosReporte)
                                    }
                                }

                            })
                        }
                    })
                })
            }
            $scope.generarReproteHijos = function (datos) {

                var data = [["CODIGO", "EMPLEADO", "L_SEGURO", "DEPARTAMENTO", "PROVINCIA",
                    "LOCALIDAD", "RECIDENCIA", "CAMPO", "ESTADO", "NOMBRES", "APELLIDO PATERNO", "APELLIDO MATERNO", "FECHA_NAC", "SEXO", "EDAD", "AFILIADO", "RELACION"]]
                var iu = []
                for (var i = 0; i < datos.length; i++) {
                    var columns = [];
                    columns.push(datos[i].empleado.codigo);
                    columns.push(datos[i].empleado.persona.nombre_completo);
                    columns.push(datos[i].empleado.empleadosFichas[datos[i].empleado.empleadosFichas.length - 1].lugarSeguroSalud.nombre);
                    columns.push((datos[i].empleado.persona.ciudad) ? datos[i].empleado.persona.ciudad.nombre : "");
                    columns.push((datos[i].empleado.persona.provincia) ? datos[i].empleado.persona.provincia.nombre : "");
                    columns.push((datos[i].empleado.persona.localidad) ? datos[i].empleado.persona.localidad.nombre : "");
                    columns.push(datos[i].empleado.persona.direccion_numero);
                    columns.push(datos[i].empleado.campo.nombre);
                    columns.push("");
                    columns.push(datos[i].persona.nombres);
                    columns.push(datos[i].persona.apellido_paterno);
                    columns.push(datos[i].persona.apellido_materno);
                    columns.push(new Date(datos[i].persona.fecha_nacimiento));
                    columns.push(datos[i].persona.genero.nombre);
                    columns.push(datos[i].edad);
                    columns.push((datos[i].afiliado != null) ? (datos[i].afiliado) ? "si" : "no" : "no");
                    columns.push(datos[i].relacion.nombre);

                    iu.push(i)

                    data.push(columns);
                }

                var ws_name = "SheetJS";
                var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "EMPLEADO RRHH.xlsx");
                blockUI.stop();

            }

            $scope.imprimirPDFPrestamoPersonal = function () {
                var prestamo = $scope.listaPrestamos;
                convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {
                    var doc = new PDFDocument({ compress: false, size: [612, 792], margin: 0 });
                    var stream = doc.pipe(blobStream());
                    var itemsPorPagina = 19;
                    var y = 95, items = 0, pagina = 1; var totalPaginas = Math.ceil(prestamo.length / itemsPorPagina);
                    $scope.imprimirCabeceraPDFPrestamoPersonal(doc, totalPaginas, prestamo, imagenEmpresa);
                    var index = 0;
                    var totalMonto = 0, totalPagos = 0, totalSaldo = 0;

                    for (var i = 0; i < prestamo.length; i++) {
                        index = index + 1;
                        doc.font('Helvetica', 8);
                        doc.text(index, 40, y);
                        var fecha = $scope.fechaATexto(prestamo[i].fecha_inicial);
                        doc.text(fecha, 55, y);
                        doc.text(prestamo[i].empleado.persona.nombre_completo, 100, y, { width: 130 });
                        doc.text(formatNumber(prestamo[i].monto), 230, y);
                        totalMonto = totalMonto + prestamo[i].monto;
                        doc.text(prestamo[i].interes_pactado + "%", 280, y);
                        doc.text(prestamo[i].plazo + " Meses", 300, y)
                        var fechaVence = $scope.fechaATexto(prestamo[i].fecha_vence);
                        doc.text(fechaVence, 340, y);
                        if (prestamo[i].prestamoPagos.length != 0) {
                            doc.text(prestamo[i].prestamoPagos[(prestamo[i].prestamoPagos.length - 1)].a_cuenta_anterior, 410, y);
                            totalPagos = totalPagos + prestamo[i].prestamoPagos[(prestamo[i].prestamoPagos.length - 1)].a_cuenta_anterior;
                        } else {
                            doc.text(0, 410, y);
                            totalPagos = totalPagos + 0;
                        }

                        doc.text(prestamo[i].saldo, 440, y);
                        totalSaldo = totalSaldo + prestamo[i].saldo;
                        doc.text(formatNumber(prestamo[i].cuota), 470, y);
                        var observacion = prestamo[i].observacion;
                        doc.text(observacion, 510, y, { width: 80 });
                        if (observacion.length > 45) {
                            y = y + 15
                        }

                        y = y + 20;
                        items++;

                        if (y >= 740) {
                            doc.addPage({ size: [612, 792], margin: 10 });
                            y = 100;
                            items = 0;
                            pagina = pagina + 1;
                            $scope.imprimirCabeceraPDFPrestamoPersonal(doc, totalPaginas, prestamo, imagenEmpresa);
                        }

                    }
                    //doc.moveDown(1);
                    doc.font('Helvetica-Bold', 8);
                    doc.text("Totales:         " + totalMonto + "                                                                          " + totalPagos + "          " + totalSaldo, 180, y + 10);

                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                });
            }

            $scope.imprimirCabeceraPDFPrestamoPersonal = function (doc, totalPaginas, prestamo, imagenEmpresa) {
                if (imagenEmpresa.length > 0 && imagenEmpresa !== "error") {
                    var imagen = imagenEmpresa;
                    if (imagen) {
                        doc.image(imagen, 40, 10, { fit: [70, 70] }); //{ fit: [200, 72] } { fit: [100, 72] }
                    }
                }

                doc.font('Helvetica-Bold', 10);
                doc.text("PRESTAMO AL PERSONAL", 0, 30, { align: 'center' });
                if ($scope.filtro.inicio || $scope.filtro.fin) {
                    doc.font('Helvetica-Bold', 9);
                    doc.text($scope.filtro.inicio + " al " + $scope.filtro.fin, 0, 45, { align: 'center' });
                }
                doc.font('Helvetica-Bold', 8);
                doc.text("N°", 40, 80);
                doc.text("Fecha", 55, 80);
                doc.text("Nombre Completo", 100, 80);
                doc.text("Monto Bs.", 230, 80);
                doc.text("Int.", 280, 80);
                doc.text("Plazo", 300, 80);
                doc.text("Vencimiento", 340, 80);
                doc.text("Pagos a/c", 395, 80);
                doc.text("Saldo", 440, 80);
                doc.text("Cuotas", 470, 80);
                doc.text("Observaciones", 510, 80);

                var usuario = $scope.usuario.nombre_usuario;
                var fecha = new Date();
                doc.font("Helvetica", 8);
                doc.text("Usuario: " + usuario + ", Fecha: " + fecha.getDate() + "/" + ("0" + (fecha.getMonth() + 1)).slice(-2) + "/" + fecha.getFullYear() +
                    "-" + fecha.getHours() + ":" + fecha.getMinutes() + ":" + fecha.getSeconds(), 435, 750);
            }

            $scope.imprimirEXCELPrestamoPersonal = function () {
                var prestamo = $scope.listaPrestamos;
                var data = [["N°", "Fecha", "Nombre Completo", "Monto Bs.", "Int. %", "Plazo (Meses)", "Vencimiento", "Pagos a/c",
                    "Saldo", "Cuotas", "Observaciones"]];
                //data.push(cabecera)
                var index = 0;
                for (var i = 0; i < prestamo.length; i++) {
                    columns = [];
                    index = index + 1;
                    columns.push(index);
                    var fecha = $scope.fechaATexto(prestamo[i].fecha_inicial);
                    columns.push(fecha);
                    columns.push(prestamo[i].empleado.persona.nombre_completo);
                    columns.push(formatNumber(prestamo[i].monto));
                    columns.push(prestamo[i].interes_pactado);
                    columns.push(prestamo[i].plazo);
                    var fechaVence = $scope.fechaATexto(prestamo[i].fecha_vence);
                    columns.push(fechaVence);
                    if (prestamo[i].prestamoPagos.length != 0) {
                        columns.push(prestamo[i].prestamoPagos[(prestamo[i].prestamoPagos.length - 1)].a_cuenta_anterior);
                    } else {
                        columns.push(0);
                    }
                    columns.push(prestamo[i].saldo);
                    columns.push(formatNumber(prestamo[i].cuota));
                    columns.push(prestamo[i].observacion)
                    data.push(columns);

                }

                var ws_name = "SheetJS";
                var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "Reporte-prestamos-personal.xlsx");
                blockUI.stop();
            }
            /* inicio carga horario */
            $scope.abrirModalCargaHorario = function () {
                $scope.obtenerCargasHorarios();
                $scope.listarCargaHorarioRRHH()
                $scope.horario = { usar_descanso: false, eliminado: false }
                $scope.abrirPopup($scope.idModalCargaHorario);
            }
            $scope.cerrarModalCargaHorario = function () {
                $scope.cerrarPopup($scope.idModalCargaHorario);
            }
            $scope.agregarcargaHorario = function (dato) {
                dato.hora_inicio = dato.hora_inicio.toLocaleTimeString('en-US', {
                    hour12: false,
                    hour: "numeric",
                    minute: "numeric"
                })
                dato.hora_fin = dato.hora_fin.toLocaleTimeString('en-US', {
                    hour12: false,
                    hour: "numeric",
                    minute: "numeric"
                })
                if ($scope.horario.usar_descanso) {
                    dato.hora_inicio_descanso = dato.hora_inicio_descanso.toLocaleTimeString('en-US', {
                        hour12: false,
                        hour: "numeric",
                        minute: "numeric"
                    })
                    dato.hora_fin_descanso = dato.hora_fin_descanso.toLocaleTimeString('en-US', {
                        hour12: false,
                        hour: "numeric",
                        minute: "numeric"
                    })
                }
                if (dato.edit != true) {
                    $scope.configuracionesCargaHorario.push(dato)
                }
                $scope.horario = { usar_descanso: false, eliminado: false }
            }
            $scope.editarConfiruacionCargaHorario = function (dato) {
                $scope.horario = dato
                $scope.horario.edit = true
                $scope.horario.hora_inicio = $scope.asignarHorasAFecha($scope.horario.hora_inicio)
                $scope.horario.hora_fin = $scope.asignarHorasAFecha($scope.horario.hora_fin)
                if ($scope.horario.usar_descanso) {
                    $scope.horario.hora_inicio_descanso = $scope.asignarHorasAFecha($scope.horario.hora_inicio_descanso)
                    $scope.horario.hora_fin_descanso = $scope.asignarHorasAFecha($scope.horario.hora_fin_descanso)
                }

            }
            $scope.asignarHorasAFecha = function (hora) {
                var minutos = parseInt(hora.split(':')[1])
                var horas = parseInt(hora.split(':')[0])
                var fecha = new Date()
                fecha.setMinutes(minutos);
                fecha.setHours(horas);
                fecha.setSeconds('00');
                return fecha
            }
            $scope.eliminarConfiruacionCargaHorario = function (dato, index) {
                if (dato.id) {
                    dato.eliminado = true
                } else {
                    $scope.configuracionesCargaHorario.splice(index, 1)
                }
            }
            $scope.guardarCargaHorarioRRHH = function () {
                var promesa = GuardarCargaHorarioRRHH($scope.configuracionesCargaHorario)
                promesa.then(function (dato) {
                    $scope.mostrarMensaje(dato.mensaje)
                    $scope.cerrarModalCargaHorario()
                })
            }
            $scope.listarCargaHorarioRRHH = function () {
                var promesa = ListarCargaHorarioRRHH($scope.usuario.id_empresa)
                promesa.then(function (datos) {
                    $scope.configuracionesCargaHorario = datos
                })
            }

            $scope.abrirDialogHistorialContratosHijos = function (familiar) {
                $scope.familiar = familiar
                $scope.seCambio = true;
                if (familiar.persona.afiliado == true) {
                    $scope.obtenerDocumentosFamiliares()
                    $scope.abrirPopup($scope.idModalHistorialContratoHijos);
                }
            }
            $scope.cerrarDialogHistorialContratosHijos = function () {
                $scope.cerrarPopup($scope.idModalHistorialContratoHijos);
            }

            $scope.guardarContratohijo = function () {
                var f = document.getElementById('id-contrato-hijo').files[0],
                    r = new FileReader();
                if (f) {
                    r.onloadend = function (e) {
                        var contrato = { name: f.name, data: e.target.result, fecha: new Date() }
                        $scope.registrarContratoHijo(contrato)
                        //send your binary data via $http or $resource or do anything else with it
                    }

                    r.readAsBinaryString(f);
                } else {
                    $scope.mostrarMensaje('Seleccinar un documento primero antes de guardar')
                }
            }
            $scope.registrarContratoHijo = function (contrato) {
                var promesa = RegistrarContratoHijo(contrato, $scope.familiar.id)
                promesa.then(function (dato) {
                    $scope.mostrarMensaje(dato.mensaje)
                    $scope.obtenerDocumentosFamiliares()
                })
            }
            $scope.obtenerDocumentosFamiliares = async function () {
                var promesa = ObtenerContratosfamiliar($scope.familiar.id)
                $scope.historialDocumentosFamiliares = await promesa.then(function (dato) {
                    return dato
                })
            }
            $scope.actualizarDocumentoFamiliar = function (datos) {
                datos.aceptado = true
                var promesa = ActualizarDocumentoFamiliar(datos)
                promesa.then(function (dato) {
                    $scope.mostrarMensaje(dato.mensaje)
                    $scope.obtenerDocumentosFamiliares()
                })
            }
            $scope.eliminarDocumentoFamiliar = function (datos) {
                datos.eliminado = true
                var promesa = ActualizarDocumentoFamiliar(datos)
                promesa.then(function (dato) {
                    $scope.mostrarMensaje(dato.mensaje)
                    $scope.obtenerDocumentosFamiliares()
                })
            }
            /* fin carga horario */
            /* eliminar prestamo personal */
            $scope.abrirModalEliminarPrestamo = function () {
                $scope.abrirPopup($scope.idModalEliminarPrestamo);
            }
            $scope.cerrarModalEliminarPrestamo = function () {
                $scope.cerrarPopup($scope.idModalEliminarPrestamo);
            }
            $scope.eliminarPrestamoPersonal = function () {
                $scope.dato.eliminado = true

                var promesa = EliminarPrestamoPersonal($scope.dato)
                promesa.then(function (dato) {
                    $scope.mostrarMensaje(dato.mensaje)
                    $scope.cerrarModalEliminarPrestamo()
                    $scope.imprimirPrestamoRRHH($scope.dato)
                })
            }
            /* eliminar prestamo personal */
            /* inicio horas extra ordinarias */
            $scope.abrirModalHistorialHorasExtrasOrdinarias = function () {
                $scope.obtenerHorasExtraOrdinarias()
                $scope.obtenerTiposHorasaExtraOrdinarias()
                $scope.horaExtra = { fecha: new Date() }
                $scope.abrirPopup($scope.idModalHistorialHorasExtrasOrdinarias);
            }
            $scope.cerrarModalHistorialHorasExtrasOrdinarias = function () {
                $scope.cerrarPopup($scope.idModalHistorialHorasExtrasOrdinarias);
            }
            $scope.registrarHoraExtraOrdinaria = function (horaExtra) {
                horaExtra.fecha2 = new Date($scope.convertirFecha(horaExtra.fecha))
                var promesa = RegistrarHoraExtraOrdinaria(horaExtra, $scope.ficha.id)
                promesa.then(function (dato) {
                    $scope.mostrarMensaje(dato.mensaje)
                    $scope.horaExtra = {}
                    $scope.obtenerHorasExtraOrdinarias()
                })
            }
            $scope.obtenerHorasExtraOrdinarias = async function () {
                blockUI.start()
                var promesa = ObtenerHorasExtraOrdinarias($scope.ficha.id)
                $scope.historialHoraExtraOrdinaria = await promesa.then(function (dato) {
                    blockUI.stop()
                    return dato
                })
            }
            $scope.modificarHorasExtraOrdinarias = function (horaExtra, key) {
                switch (key) {
                    case 'editar':
                        $scope.horaExtra = horaExtra
                        $scope.horaExtra.fecha = $scope.fechaATexto($scope.horaExtra.fecha)
                        break;
                    case 'eliminar':
                        horaExtra.eliminado = true
                        var promesa = ActualizarHoraExtraOrdinaria(horaExtra, $scope.ficha.id)
                        promesa.then(function (dato) {
                            $scope.mostrarMensaje(dato.mensaje)
                            $scope.obtenerHorasExtraOrdinarias()
                        })
                        break;
                    case 'estado':
                        $scope.abrirModalCerrarHoraExtraOrdinario(horaExtra);
                        break;
                    default:
                        break;
                }
            }

            $scope.abrirModalCerrarHoraExtraOrdinario = function (horaExtra) {
                $scope.hora_extraOrdinarioPrev = {};
                angular.copy(horaExtra, $scope.hora_extraOrdinarioPrev);
                $scope.hora_extraOrdinarioPrev.fecha = $scope.fechaATexto($scope.hora_extraOrdinarioPrev.fecha);
                $scope.abrirPopup($scope.idModalCerrarHorasExtrasOrdinario);
            }

            $scope.guardarCierreHoraExtraOrdinario = function (hora_extraOrdinarioPrev) {
                hora_extraOrdinarioPrev.cerrado = true;
                hora_extraOrdinarioPrev.fecha_cierre = new Date($scope.convertirFecha(hora_extraOrdinarioPrev.fecha_cierre));
                var promesa = ActualizarHoraExtraOrdinaria(hora_extraOrdinarioPrev, $scope.ficha.id)
                promesa.then(function (dato) {
                    $scope.closeModalCerrarHoraExtraOrdinario();
                    $scope.mostrarMensaje(dato.mensaje)
                    $scope.obtenerHorasExtraOrdinarias()
                })
            }

            $scope.closeModalCerrarHoraExtraOrdinario = function () {
                $scope.cerrarPopup($scope.idModalCerrarHorasExtrasOrdinario);
            }

            /* fin horas extra ordiniarias */
            $scope.generarPDFAusencias = function (ausencias) { 
                var doc = new PDFDocument({ compress: false, margin: 10 });
                var stream = doc.pipe(blobStream());

                var y = 115, itemsPorPagina = 28, items = 0, pagina = 1, totalPaginas = Math.ceil(ausencias.length / itemsPorPagina);;
                $scope.dibujarCabeceraPDFAusencias(doc, ausencias, pagina, totalPaginas);
                var index = 0;
                for (var i = 0; i < ausencias.length && items <= itemsPorPagina; i++) {

                    doc.font("Helvetica", 7);
                    index = index + 1;
                    doc.text(index, 40, y);
                    doc.text(capitalize(ausencias[i].ficha.empleado.persona.nombre_completo.toLowerCase()), 55, y, { width: 100 });
                    var desde = $scope.fechaATexto(ausencias[i].fecha_inicio);
                    var ini = new Date(ausencias[i].fecha_inicio)
                    doc.text(desde + " - ", 170, y, { width: 50 });
                    doc.text(ini.getHours() + ":" + ini.getMinutes(), 160, y + 7, { width: 50, align: 'center' });
                    var hasta = $scope.fechaATexto(ausencias[i].fecha_fin);
                    var fin = new Date(ausencias[i].fecha_fin)
                    doc.text(hasta + "", 210, y, { width: 50 });
                    doc.text(fin.getHours() + ":" + fin.getMinutes(), 200, y + 7, { width: 50, align: 'center' });
                    var dias = ausencias[i].dias ? ausencias[i].dias : "";
                    //doc.text(dias, 260, y);
                    doc.text(ausencias[i].estado.nombre, 285, y);
                    doc.text(capitalize(ausencias[i].tipoAusencia.nombre.toLowerCase()), 342, y, { width: 100 });
                    doc.text(capitalize(ausencias[i].observacion.toLowerCase()), 450, y);

                    y = y + 20;
                    items++;

                    if (items == itemsPorPagina) {

                        doc.addPage({ margin: 0, bufferPages: true });
                        y = 185;
                        items = 0;
                        pagina = pagina + 1;
                        $scope.dibujarCabeceraPDFAusencias(doc, ausencias, pagina, totalPaginas);

                    }
                }

                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
            }

            $scope.dibujarCabeceraPDFAusencias = function (doc, ausencias, pagina, totalPaginas) {

                doc.font("Helvetica-Bold", 14);
                doc.text("REPORTE SALIDAS", 0, 50, { align: 'center' })
                doc.font("Helvetica-Bold", 8);
                doc.text("N°", 40, 100);
                doc.text("Nombre", 55, 100);
                doc.text("Desde", 175, 100);
                doc.text("Hasta", 215, 100);
                doc.text("Estado", 290, 100);
                doc.text("Concepto", 340, 100);
                doc.text("Detalle", 450, 100);

                doc.text("Pagina " + pagina + " de " + totalPaginas, 0, 740, { align: 'center' });
                doc.font("Helvetica-Bold", 7);
                var usuario = $scope.usuario.persona.nombre_completo;
                var fecha = new Date();

                doc.text("Usuario: " + usuario + " - " + $scope.fechaATexto(fecha), 400, 750);

            }

            $scope.generarExcelAusencias = function (ausencias) {
                var data = [["N°", "NOMBRE", "DESDE", "HORA", "HASTA", "HORA", "HORAS",
                    "CONCEPTO", "DETALLE", "ESTADO", "DEDUCIBLES", 'AUTORIZADOR']]

                for (var i = 0; i < ausencias.length; i++) {
                    var columns = [];
                    columns.push((i + 1));
                    columns.push(ausencias[i].ficha.empleado.persona.nombre_completo)
                    var desde = $scope.fechaATexto(ausencias[i].fecha_inicio);
                    var ini = new Date(ausencias[i].fecha_inicio)
                    columns.push(desde);
                    columns.push(ini.getHours() + ":" + ini.getMinutes());
                    var hasta = $scope.fechaATexto(ausencias[i].fecha_fin);
                    var fin = new Date(ausencias[i].fecha_fin)
                    columns.push(hasta);
                    columns.push(fin.getHours() + ":" + fin.getMinutes());
                    columns.push(ausencias[i].hours);
                    /*  var dias = ausencias[i].dias ? ausencias[i].dias : "";
                     columns.push(dias); */
                    columns.push(ausencias[i].tipoAusencia.nombre);
                    columns.push(ausencias[i].observacion);
                    columns.push(ausencias[i].estado.nombre);
                    columns.push(ausencias[i].id_autorizador ? ausencias[i].autorizador.persona.nombre_completo : "");
                    columns.push();
                    data.push(columns);
                }

                var ws_name = "SheetJS";
                var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE DE AUSENCIAS.xlsx");
            }

            $scope.ListaEmpleadoAusencia = function () {

                var empresa = $scope.usuario.id_empresa;
                var id_ausencia = "83";
                var promesa = HistorialEmpleadoAusencia(empresa, id_ausencia)
                promesa.then(function (data) {

                })
            }

            $scope.cerrarVistaVacacion = function () {
                $scope.cerrarPopup($scope.idModalVistaVacaciones);
            }
            $scope.mostrarVacacion = function (vacacion) {

                $scope.vistaVacaciones = vacacion
                $scope.abrirPopup($scope.idModalVistaVacaciones);
            }

            $scope.checkboxValue = true;
            $scope.$watch('vistaVacaciones', function (value) {
                if (value) {
                    if (value.fecha_inicio) {
                        $scope.model1 = $scope.fechaATexto(value.fecha_inicio);
                    } else {
                        $scope.model1 = "";

                    }
                    if (value.fecha_fin) {
                        $scope.model2 = $scope.fechaATexto(value.fecha_fin);
                    } else {
                        $scope.model2 = "";
                    }
                }

            });

            // $scope.buscarTipoSubsidios = function () {
            //     var promesa = ClasesTipoEmpresa("TIPO_SUBSIDIO", $scope.usuario.id_empresa);
            //     promesa.then(function (entidad) {
            //         $scope.tiposSubsidios = entidad.clases;
            //     });
            // }

            $scope.listarSubsidiosConfig = function () {
                var promesa = ListaConfiguracionSubsidios($scope.usuario.id_empresa)
                promesa.then(function (dato) {
                    $scope.listaSubsidiosConfig = dato
                })
            }

            $scope.abrirModalConfiguracionSubsidios = function () {
                $scope.dynamicPopoverSubsidios.close();
                $scope.listarSubsidiosConfig();
                // $scope.listaSubsidiosConfig = []
                $scope.subsidio = {}
                $scope.confSubsidio = {}
                // $scope.tipoSubsidio = "";
                $scope.abrirPopup($scope.idModalConfiguracionSubsidios)
            }
            $scope.cerrarModalConfiguracionSubsidios = function () {
                $scope.cerrarPopup($scope.idModalConfiguracionSubsidios)
            }

            $scope.GuardarlistaConfSubsidio = function () {
                var button = $('#siguiente-conf').text().trim()
                if (button != "Siguiente") {
                    var promesa = GuardarConfiguracionSubsidio($scope.listaSubsidiosConfig, $scope.usuario.id_empresa)
                    promesa.then(function (dato) {
                        $scope.mostrarMensaje(dato.mensaje)
                        $scope.cerrarModalConfiguracionSubsidios()
                        $scope.listaSubsidiosConfig = []
                        $scope.recargarItemsTabla()

                    })
                }
            }

            $scope.agregarConfSubsidio = function (conf) {
                var bandera = true
                if (conf.edit) {
                    conf.edit = false
                    $scope.confSubsidio = {}
                } else {
                    if ($scope.listaSubsidiosConfig.length > 0) {
                        $scope.listaSubsidiosConfig.forEach(function (confT, index, array) {
                            if (conf.tipo_subsidio == confT.tipo_subsidio) {
                                bandera = false
                                if (confT.eliminado == true) {
                                    confT.eliminado = false
                                }
                            }
                            if (index === (array.length - 1)) {
                                if (bandera) {
                                    $scope.listaSubsidiosConfig.push(conf)
                                    $scope.confSubsidio = {}
                                }
                            }
                        });
                    } else {
                        $scope.listaSubsidiosConfig.push(conf)
                        $scope.confSubsidio = {}
                    }
                }
            }

            $scope.editarConfigSubsidio = function (conf) {
                $scope.confSubsidio = conf
                $scope.confSubsidio.edit = true
            }
            $scope.eliminarConfigSubsidio = function (conf) {
                conf.eliminado = true;
            }

            $scope.obtenerFamiliarBeneficiario = function (empleado) {
                var promesa = UsuarioRecursosHumanosFicha(empleado.id)
                promesa.then(function (datos) {
                    if (datos.ficha) {
                        $scope.familiarBenefeciario = datos.ficha.empleado.familiares.filter(function (val) {
                            return (val.relacion.nombre !== 'HIJO(A)' && val.relacion.nombre !== 'HIJO' && val.relacion.nombre !== 'HIJA');
                        });

                        $scope.familiarHijo = datos.ficha.empleado.familiares.filter(function (val) {
                            return (val.relacion.nombre === 'HIJO(A)' || val.relacion.nombre === 'HIJO' || val.relacion.nombre === 'HIJA');
                        }); 

                        if (empleado.genero == "MASCULINO" && $scope.familiarBenefeciario.length == 0) {
                            $scope.mostrarMensaje("registre una beneficiaria");
                        }

                    }
                });
            }

            $scope.listaPlanSubsidios = []

            $scope.agregarPlanSubsidio = function (plan) {
                var bandera = true
                if (Object.keys(plan).length > 0) {
                    // if (plan.fecha_inicio == undefined ||)
                    if (plan.edit) {
                        plan.edit = false;
                        plan.tipoSubsidio = null;
                        plan.veneficiaria = null;
                        plan.hijo = null;
                        plan.fecha_reporte = new Date($scope.convertirFecha(plan.fecha_reporte));
                        $scope.planSubsidio = {};
                    } else {
                        var numAsignacion = 0;
                        if ($scope.listaPlanSubsidios.length > 0) {
                            $scope.listaPlanSubsidios.forEach(function (confT, index, array) {
                                if (plan.tipo_subsidio == confT.tipo_subsidio) {
                                    bandera = false
                                    if (confT.eliminado == true) {
                                        confT.eliminado = false
                                    }
                                }
                                // comprobando cantidad de registros sin vincular hijo ========
                                var confTipoSubsidio = confT.tipoSubsidio ? confT.tipoSubsidio : confT.tipo_subsidio;
                                if (plan.tipo_subsidio.id == confTipoSubsidio.id && plan.hijo_gestacion == confT.hijo_gestacion && !plan.tipo_subsidio.vincular_hijo) {
                                    numAsignacion += 1;
                                }
                                var confHijo = confT.hijo ? confT.hijo : confT.vincular_hijo;

                                // comprobando cantidad de registros con vincular hijo ========
                                if (plan.tipo_subsidio.vincular_hijo) {
                                    if (plan.tipo_subsidio.id == confTipoSubsidio.id && plan.vincular_hijo.id == confHijo.id) {
                                        numAsignacion += 1;
                                    }
                                }

                                if (index === (array.length - 1)) {
                                    if (bandera) {
                                        if (numAsignacion < plan.tipo_subsidio.meses) {
                                            plan.nro_asignacion = numAsignacion + 1;
                                            $scope.listaPlanSubsidios.push(plan)
                                            $scope.planSubsidio = {};
                                        } else {
                                            $scope.mostrarMensaje("ya concluyo el limite de meses programados");
                                        }
                                    }
                                }
                            });
                        } else {
                            plan.nro_asignacion = 1;
                            $scope.listaPlanSubsidios.push(plan)
                            $scope.planSubsidio = {};
                        }
                    }
                }

            }

            $scope.editarPlanSubsidio = function (plan) {
                plan.vincular_veneficiaria = plan.veneficiaria ? plan.veneficiaria : plan.vincular_veneficiaria;
                plan.tipo_subsidio = plan.tipoSubsidio ? plan.tipoSubsidio : plan.tipo_subsidio;
                plan.vincular_hijo = plan.hijo ? plan.hijo : plan.vincular_hijo;
                plan.fecha_reporte = plan.tipoSubsidio ? $scope.fechaATexto(plan.fecha_reporte) : plan.fecha_reporte;
                $scope.planSubsidio = plan;
                $scope.planSubsidio.edit = true;
            }

            $scope.eliminarPlanSubsidio = function (plan) {
                plan.eliminado = true;
            }

            $scope.listaSubsidiosControlMedico = [];

            $scope.obtenerSubsidioControlMedico = function (empleado) {
                var promPlanificacion = ListaSubsidioPlanificacion(empleado.id);
                promPlanificacion.then(function (plan) {
                    $scope.listaSubsidiosControlMedico = plan;
                });
            }

            $scope.obtenerSubsidioSeguimientos = function (empleado) {
                var promSeguimientos = ListaSubsidioEmpleadoSeguimiento(empleado.id);
                promSeguimientos.then(function (seguimientos) {
                    $scope.listaPlanSubsidiosSeguimientos = seguimientos;
                })
            }

            $scope.obtenerSubsidioPLan = function (empleado) {
                var promesaS = ListaSubsidioEmpleado(empleado.id);
                promesaS.then(function (subsidios) {
                    $scope.listaPlanSubsidios = subsidios;
                });
            }

            $scope.abrirNuevoSubsidio = function (empleado) {
                $scope.planSubsidio = {};
                $scope.subsidioSeguimiento = {};
                $scope.empleadoSubsidio = empleado;
                $scope.listarSubsidiosConfig();
                $scope.obtenerFamiliarBeneficiario(empleado);
                $scope.obtenerSubsidioPLan(empleado);
                $scope.obtenerSubsidioControlMedico(empleado);
                $scope.obtenerSubsidioSeguimientos(empleado);
                $('#id-docseguimiento').ace_file_input('reset_input_ui');
                $scope.abrirPopup($scope.idModalNuevoSubsidio);
                // if (empleado.genero == "MASCULINO") {
                //     console.log("es masculino")
                //     $scope.abrirPopup($scope.idModalNuevoSubsidio);
                // }else{
                //     console.log("es femenino")
                // }
            }
            $scope.cerrarNuevoSubsidio = function () {
                $scope.cerrarPopup($scope.idModalNuevoSubsidio);
            }

            $scope.cargadorCI = false;
            $scope.validarCIEmpleado = function (empleado) {
                var ci = empleado.persona.ci
                if (ci && ci.length >= 6) {
                    $scope.cargadorCI = true;
                    $scope.mensajeCI = "";
                    $timeout(function () {
                        if (empleado.id && ci == $scope.CIanterior) {
                            $scope.mensajeCI = "Empleado con C.I. valido";
                            $scope.cargadorCI = false;
                        } else {
                            var id_empresa = $scope.usuario.id_empresa;
                            var promise1 = VerificarCIEmpleado(id_empresa, ci)
                            promise1.then(function (dato) {
                                $scope.cargadorCI = false;
                                $scope.respuestaCI = dato;
                                if ($scope.respuestaCI.length != 0) {
                                    $scope.mensajeCI = 'El empleado con el C.I. "' + ci + '" ya existe';
                                    empleado.persona.ci = null;
                                } else {
                                    $scope.mensajeCI = "Empleado con C.I. valido";
                                }
                            })
                        }

                    }, 1500);
                } else {
                    $scope.mensajeCI = "";
                    $scope.cargadorCI = false;
                }
            }

            $scope.buscarCalculoCal = function (filtroRolCal) { 
                $scope.paginatorCalendarioRolTurnos = Paginator();
                $scope.paginatorCalendarioRolTurnos.column = "id";
                $scope.paginatorCalendarioRolTurnos.direccion = "asc";
                $scope.paginatorCalendarioRolTurnos.itemsPerPage = 50;
                $scope.paginatorCalendarioRolTurnos.callBack = $scope.listaRolTurnoCal;
                $scope.paginatorCalendarioRolTurnos.getSearch("", filtroRolCal, null);
            }
            /* paramenetros camp empleado */
            $scope.abrirDialogParmEmpleadoCampa = function () {
                $scope.parametro = { eliminado: false }
                $scope.campamentosParams = []
                $scope.obtenerParamsEmpleadosCampamento()
                $scope.abrirPopup($scope.idModalParmEmpleadoCampa)

            }
            $scope.cerrarDialogParmEmpleadoCampa = function () {
                $scope.cerrarPopup($scope.idModalParmEmpleadoCampa)

            }
            $scope.agregarParmsEmpleadosCampamento = function () {
                if ($scope.parametro.edit) {
                    $scope.parametro = { eliminado: false }
                } else {
                    $scope.campamentosParams.push($scope.parametro)
                    $scope.parametro = { eliminado: false }
                }
            }
            $scope.editarParmsEmpleadosCampamento = function (dato) {
                $scope.parametro = dato
                $scope.parametro.edit = true
            }
            $scope.EliminarParmsEmpleadosCampamento = function (dato, index) {
                if (dato.id) {
                    dato.eliminado = true
                } else {
                    $scope.campamentosParams.splice(index, 1)
                }
            }
            $scope.guardarParamsEmpleadosCampamento = function () {
                var promesa = GuardarParamsEmpleadosCampamento($scope.campamentosParams, $scope.usuario.id_empresa)
                promesa.then(function (data) {
                    $scope.mostrarMensaje(data.mensaje)
                    $scope.cerrarDialogParmEmpleadoCampa()
                })
            }
            $scope.obtenerParamsEmpleadosCampamento = function () {
                var promesa = ObtenerParamsEmpleadosCampamento($scope.usuario.id_empresa)
                promesa.then(function (data) {
                    $scope.campamentosParams = data.campamentos
                })
            }
            $scope.obtenerParametroEmpleadosCampamento = async function () {
                var data = await ObtenerParametroEmpleadosCampamento($scope.filtroRolCal.campo)

                return data.campamento
            }

            /* params camp empleado */
            $scope.GuardarSubsidioEmpleado = function (listaPlanSubsidios) {
                var promesa = CrearSubsidioEmpleado($scope.empleadoSubsidio.id, listaPlanSubsidios)
                promesa.then(function (datos) {
                    //$scope.imprimirPrestamo(prestamo)
                    $scope.obtenerSubsidioControlMedico($scope.empleadoSubsidio);
                    $scope.obtenerSubsidioPLan($scope.empleadoSubsidio);
                    $scope.mostrarMensaje(datos.mensaje)
                })
            }

            $scope.listaPlanSubsidiosSeguimientos = []

            $scope.agregarSubsidioSeguimiento = function (plan) {
                var bandera = true
                if (Object.keys(plan).length > 0) {

                    var f = document.getElementById("id-docseguimiento").files[0],
                        r = new FileReader();

                    if (f) {
                        r.onloadend = function (e) {
                            plan.documento2 = { name: "", data: null }
                            plan.documento2.name = plan.documento[0].name
                            plan.documento2.data = e.target.result;

                        }
                        r.readAsBinaryString(f);
                    }

                    if (plan.edit) {
                        plan.edit = false;
                        // plan.planificacion = null;
                        plan.fecha = new Date($scope.convertirFecha(plan.fecha));
                        $scope.subsidioSeguimiento = {};
                        $('#id-docseguimiento').ace_file_input('reset_input_ui');
                    } else {
                        if ($scope.listaPlanSubsidiosSeguimientos.length > 0) {
                            $scope.listaPlanSubsidiosSeguimientos.forEach(function (confT, index, array) {
                                if (plan.planificacion == confT.planificacion) {
                                    bandera = false
                                    if (confT.eliminado == true) {
                                        confT.eliminado = false
                                    }
                                }
                                if (index === (array.length - 1)) {
                                    if (bandera) {
                                        $scope.listaPlanSubsidiosSeguimientos.push(plan)
                                        $scope.subsidioSeguimiento = {};
                                    }
                                }
                            });
                        } else {
                            $scope.listaPlanSubsidiosSeguimientos.push(plan)
                            $scope.subsidioSeguimiento = {};
                            $('#id-docseguimiento').ace_file_input('reset_input_ui');
                        }
                    }
                }

            }
            $scope.editarSeguimientoSubsidio = function (subsidioSeguimiento) {
                // plan.planificacion = plan.tipoSubsidio ? plan.tipoSubsidio : plan.planificacion;
                subsidioSeguimiento.fecha = subsidioSeguimiento.planificacion ? $scope.fechaATexto(subsidioSeguimiento.fecha) : subsidioSeguimiento.fecha;
                $('#id-docseguimiento').ace_file_input('reset_input_ui');
                if (subsidioSeguimiento.documento) {
                    $('#id-docseguimiento').ace_file_input('show_file_list', [subsidioSeguimiento.documento]);
                }
                $scope.subsidioSeguimiento = subsidioSeguimiento;
                $scope.subsidioSeguimiento.edit = true;
            }

            $scope.eliminarSeguimientoSubsidio = function (subsidioSeguimiento) {
                subsidioSeguimiento.eliminado = true;
            }

            $scope.GuardarSubsidioSeguimiento = function (listaPlanSubsidiosSeguimiento) {
                var promesa = CrearSubsidioEmpleadoSeguimiento($scope.empleadoSubsidio.id, listaPlanSubsidiosSeguimiento)
                promesa.then(function (datos) {
                    //$scope.imprimirPrestamo(prestamo)
                    $scope.obtenerSubsidioSeguimientos($scope.empleadoSubsidio);
                    $scope.mostrarMensaje(datos.mensaje)
                })
            }

            $scope.eliminarDupricados = async function (historialEmpresaVacacionesGestion) {
                let array = []
                let newarr = await historialEmpresaVacacionesGestion.reduce(function (newArray, historial) {
                    var bandera = false
                    if (newArray.length > 0) {
                        for (var i = 0; i < newArray.length; i++) {
                            var element = newArray[i];
                            if (element.id_ficha == historial.id_ficha) {
                                bandera = true

                            }
                        }
                        if (!bandera) {
                            newArray.push(historial)
                        }
                    } else {
                        newArray.push(historial)

                    }
                    return newArray
                }, array)
                return newarr

                /* return historialEmpresaVacacionesGestion.reduce(function (newArray, historial, index) {
            
                    for (let i = 0; i < historialEmpresaVacacionesGestion.length; i++) {
                        const historial2 = historialEmpresaVacacionesGestion[i];
                        if (historial.ficha.id == historial2.ficha.id && index != i) {
                            newArray.splice(i, 1)
                        }
                    }
                    return newArray
                }, historialEmpresaVacacionesGestion) */
            }
            $scope.generarReporteGestionesVacacionesSaldo = async function (filtro, prorrateo) {
                let historialEmpresaVacacionesGestion = await $scope.obtenerHistorialEmpresaVacacionGestion(filtro)

                historialEmpresaVacacionesGestion = await $scope.AgregarProrreteo(true, historialEmpresaVacacionesGestion)

                historialEmpresaVacacionesGestion = await $scope.eliminarDupricados(historialEmpresaVacacionesGestion)
                var detalleAnios = []
                var anio = 0
                for (const historial of historialEmpresaVacacionesGestion) {
                    var detalleActual = historial.ficha.historialVacaciones.reduce(function (val, x) {
                        if (anio == 0) {
                            anio = x.gestion
                            val = true
                        }
                        if (x.gestion < anio) {
                            anio = x.gestion
                            val = true
                        }
                        return val
                    }, false)
                    if (detalleActual == true) {
                        detalleAnios = historial.ficha.historialVacaciones 
                    }
                } 
                var doc = new PDFDocument({ size: "letter", layout: 'landscape', compress: false, margin: 10 });
                var stream = doc.pipe(blobStream());

                var y = 220, itemsPorPagina = 13, items = 0, pagina = 1;
                $scope.dibujarCabeceraReporteGestionesVacacionesSaldo(doc, pagina, detalleAnios);

                var index = 0;
                var totaldeTotal = 0
                for (var i = 0; i < historialEmpresaVacacionesGestion.length; i++) {
                    doc.font("Helvetica", 8);
                    var historial = historialEmpresaVacacionesGestion[i];
                    doc.text(historial.ficha.empleado.persona.nombre_completo, 40, y - 5, { width: 150 });
                    const cargo = historial.ficha.cargos && historial.ficha.cargos.map(cargo => cargo.cargo.nombre).join(',') || '';
                    const campo = historial.ficha.empleado && historial.ficha.empleado.campo && historial.ficha.empleado.campo.nombre || '';
                    const fecha = historial.ficha.fecha_inicio && $scope.formatoFechaPDF(historial.ficha.fecha_inicio) || '';
                    doc.font("Helvetica", 5.8);
                    doc.text(cargo, 206, y - 5, { width: 50 });
                    doc.text(campo, 249, y - 5, { width: 50 });
                    doc.text(fecha, 289, y - 5, { width: 50 });
                    doc.font("Helvetica", 8);
                    doc.rect(35, y + 15, 715, 0).stroke()
                    var total = 0
                    for (var j = 0; j < historial.ficha.historialVacaciones.length; j++) {
                        var gestiones = historial.ficha.historialVacaciones[j];

                        var x = 333
                        //  doc.rotate(270, { origin: [110, 150] })

                        for (const dA of detalleAnios) {
                            if (gestiones.gestion == dA.gestion) {
                                dA.total = dA.total ? dA.total : 0
                                doc.text(gestiones.aplicadas - gestiones.tomadas, x, y)
                                total += (gestiones.aplicadas - gestiones.tomadas)

                                dA.total += (gestiones.aplicadas - gestiones.tomadas)
                            }
                            x += 25
                        }

                    }
                    doc.text(total, x, y)
                    y = y + 25;
                    items = items + 1;
                    if (items == itemsPorPagina) {
                        var x = 333
                        for (const dA of detalleAnios) {
                            doc.rect(x - 5, 115, 0, y - 125).stroke()
                            x += 25
                        }
                        doc.rect(x - 5, 115, 0, y - 125).stroke()
                        doc.rect(205, 115, 0, y - 125).stroke()
                        doc.rect(288, 115, 0, y - 125).stroke()
                        doc.rect(328, 115, 0, y - 125).stroke()
                        doc.rect(248, 115, 0, y - 125).stroke()
                        doc.addPage({ size: "letter", layout: 'landscape', compress: false, margin: 10 });
                        $scope.dibujarCabeceraReporteGestionesVacacionesSaldo(doc, pagina, detalleAnios);
                        y = 220;
                        items = 0;
                        pagina = pagina + 1;

                    }
                }
                doc.text("TOTALES", 45, y)
                var x = 333
                for (const dA of detalleAnios) {
                    doc.rect(x - 5, 115, 0, y - 100).stroke()
                    doc.rect(x - 5, 115, 0, y - 125).stroke()
                    doc.rect(205, 115, 0, y - 125).stroke()
                    doc.rect(288, 115, 0, y - 125).stroke()
                    doc.rect(328, 115, 0, y - 125).stroke()
                    doc.rect(248, 115, 0, y - 125).stroke()
                    doc.text(dA.total, x, y)
                    totaldeTotal += dA.total
                    x += 25
                }
                if (items < itemsPorPagina) {
                    doc.rect(35, y + 15, 715, 0).stroke()
                }
                doc.rect(x - 5, 115, 0, y - 100).stroke()
                doc.text(totaldeTotal, x, y)

                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
                blockUI.stop();
            }


            $scope.dibujarCabeceraReporteGestionesVacacionesSaldo = function (doc, pagina, detalleAnios) {
                var data = new Date()
                doc.rect(35, 115, 715, 455).stroke()
                doc.rect(35, 210, 715, 0).stroke()
                doc.text("PÁGINA " + pagina, 0, 580, { align: "center" });
                doc.font("Helvetica-Bold", 17);
                doc.text("VACACIONES", 0, 75, { align: 'center' });
                doc.font("Helvetica-Bold", 13);
                //doc.text(empleado.nombre_completo, 0, 75, { align: 'center' });
                doc.font("Helvetica-Bold", 10);
                doc.text("Al: " + $scope.fechaATexto(data), 0, 95, { align: 'center' });
                doc.font("Helvetica-Bold", 10);
                var x = 338
                doc.text("Nombre", 40, 200);

                doc.text("Cargo", 210, 200);
                doc.text("Campo", 250, 200);
                doc.text("Fecha", 290, 190);
                doc.text("Ingreso", 290, 200);

                /*  doc.rotate(90, { origin: [220, 260] }) */
                for (const gestiones of detalleAnios) {
                    var gestion = gestiones.gestion.toString()
                    var gestion2 = gestiones.gestion + 1
                    gestion2 = gestion2.toString()
                    doc.text(gestion.split('')[0], x, 120)
                    doc.text(gestion.split('')[1], x, 130)
                    doc.text(gestion.split('')[2], x, 140)
                    doc.text(gestion.split('')[3], x, 150)
                    doc.text("--", x, 160)
                    doc.text(gestion2.split('')[0], x, 170)
                    doc.text(gestion2.split('')[1], x, 180)
                    doc.text(gestion2.split('')[2], x, 190)
                    doc.text(gestion2.split('')[3], x, 200)
                    x += 25
                }
                doc.text("TOTAL", x, 200)
                /*  doc.restore() */
            }
            $scope.generarReporteGestionesVacaciones = async function (filtro, prorreteo) {
                let historialEmpresaVacacionesGestion = await $scope.obtenerHistorialEmpresaVacacionGestion(filtro)
                if (prorreteo) {
                    historialEmpresaVacacionesGestion = await $scope.AgregarProrreteo(true, historialEmpresaVacacionesGestion)
                }
                historialEmpresaVacacionesGestion = await $scope.eliminarDupricados(historialEmpresaVacacionesGestion)
                var doc = new PDFDocument({ size: "letter", compress: false, margin: 10 });
                var stream = doc.pipe(blobStream());

                var y = 120, itemsPorPagina = 32, items = 0, pagina = 1;

                $scope.dibujarCabeceraReporteGestionesVacaciones(doc, pagina);
                var index = 0;

                for (var i = 0; i < historialEmpresaVacacionesGestion.length; i++) {
                    var historial = historialEmpresaVacacionesGestion[i];
                    for (var j = 0; j < historial.ficha.historialVacaciones.length; j++) {
                        doc.font("Helvetica", 8);
                        var gestiones = historial.ficha.historialVacaciones[j];
                        doc.text(historial.ficha.empleado.persona.nombre_completo, 40, y);
                        doc.text(gestiones.gestion + "-" + (parseInt(gestiones.gestion) + 1), 255, y);
                        doc.text(gestiones.anio, 330, y);
                        doc.text(gestiones.aplicadas, 390, y);
                        doc.text(gestiones.tomadas, 440, y)
                        doc.text(gestiones.aplicadas - gestiones.tomadas, 490, y)
                        y = y + 20;

                        items = items + 1;
                        if (items == itemsPorPagina) {
                            doc.addPage({ size: [612, 792], margin: 10 });
                            y = 120;
                            items = 0;
                            pagina = pagina + 1;
                            $scope.dibujarCabeceraReporteGestionesVacaciones(doc, pagina);
                        }
                    }

                }

                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
                blockUI.stop();
            }


            $scope.dibujarCabeceraReporteGestionesVacaciones = function (doc, pagina) {
                var data = new Date()
                doc.font("Helvetica-Bold", 17);
                doc.text("DETALLE DE VACACIONES RESTANTES", 0, 55, { align: 'center' });
                doc.font("Helvetica-Bold", 13);
                //doc.text(empleado.nombre_completo, 0, 75, { align: 'center' });
                doc.font("Helvetica-Bold", 10);
                doc.text("Al: " + $scope.fechaATexto(data), 40, 90);
                doc.font("Helvetica-Bold", 8);
                doc.text("Nombre", 40, 110);
                doc.text("Gestión", 260, 110);
                doc.text("Año", 325, 110);
                doc.text("Aplicadas", 380, 110);
                doc.text("Tomadas", 430, 110);
                doc.text("Restante", 480, 110);
            }

            $scope.prorrateoVacaciones = function (prorrateo) {
                // realizar el prorrateo ======
                if (prorrateo) {
                    var fechaActual = new Date()
                    if ($scope.empleado.fecha_expiracion) {
                        fechaActual = new Date($scope.empleado.fecha_expiracion)
                    }
                    var fechaAnterior = new Date($scope.empleado.fecha_inicio)
                    $scope.tiempoTrabajado = duration(fechaAnterior, fechaActual, 1)
                    $scope.tiempoTrabajado.dias
                    // $scope.beneficio.meses = $scope.tiempoTrabajado.meses;
                    // $scope.beneficio.dias = $scope.tiempoTrabajado.dias;
                    /*  if (fechaActual.getMonth() >= fechaAnterior.getMonth()) {
                         if (fechaActual.getDate() > fechaAnterior.getDate()) {
                             $scope.historialGestionesVacacion.pop();
                         }
                     } */
                    //

                    $scope.totalVAplicadas = 0;
                    $scope.totalVTomadas = 0;
                    $scope.totalVRestantes = 0;
                    $scope.historialGestionesVacacion.forEach(function (historial, index) {
                        if (index == $scope.tiempoTrabajado.anios) {
                            historial.aplicadas = Math.round(($scope.tiempoTrabajado.meses * historial.aplicadas) / 12
                                + ($scope.tiempoTrabajado.dias * historial.aplicadas) / 360);
                            //historial.tomadas = 0;
                        } else if (index > $scope.tiempoTrabajado.anios) {
                            historial.aplicadas = 0
                            historial.tomadas = 0
                        }
                        $scope.totalVAplicadas += historial.aplicadas;
                        $scope.totalVTomadas += historial.tomadas;
                        var totalRestantev = historial.aplicadas - historial.tomadas;
                        $scope.totalVRestantes += totalRestantev;
                    });
                } else {
                    $scope.obtenerHistorialGestionesVacacion($scope.empleado, false, false)
                }
            }
            $scope.imprimirRolTurnoDetalle = function () {


                var doc = new PDFDocument({ size: "letter", layout: 'landscape', compress: false, margin: 10 });
                var stream = doc.pipe(blobStream());

                var y = 120, itemsPorPagina = 10, items = 0, pagina = 1, totalPaginas = Math.ceil($scope.empleadosRolTurno.length / itemsPorPagina);

                $scope.dibujarCabeceraImpresionPDFRolTurnoDetalle(doc, pagina, totalPaginas);
                var index = 0;

                for (var i = 0; i < $scope.empleadosRolTurno.length; i++) {
                    roles = $scope.empleadosRolTurno[i]
                    if (roles.contador_suma_total > 0) {
                        doc.font("Helvetica", 8);
                        z = y - 10
                        doc.font("Helvetica-Bold", 8);
                        doc.text("Campo", 40, z);
                        z += 10
                        doc.font("Helvetica", 8);
                        doc.text(roles.campo.nombre, 40, z);

                        /* z += 10
                        doc.font("Helvetica-Bold", 8);
                        doc.text("Grupo", 40, z);
                        z += 10
                        doc.font("Helvetica", 8);
                        doc.text(roles.grupo.nombre_corto, 40, z); */

                        z += 10
                        doc.font("Helvetica-Bold", 8);
                        doc.text("Cargo", 40, z);
                        doc.font("Helvetica", 8);
                        z += 10

                        if (roles.ficha.cargos.length > 1) {
                            doc.text(roles.ficha.cargos[0].cargo.nombre + ",etc.", 40, z);
                        } else {
                            doc.text(roles.ficha.cargos[0].cargo.nombre + ".", 40, z);
                        }

                        doc.text(roles.grupo.nombre_corto, 110, y)
                        doc.text(roles.ficha.empleado.persona.nombre_completo, 130, y, { width: 100 });


                        doc.text(roles.contador_dias_Trabajados, 250, y);
                        doc.text(roles.contador_dias_descanso, 270, y);
                        doc.text(roles.contador_noche_trabajadas, 290, y);
                        doc.text(roles.contador_dias_vacaciones, 310, y);
                        doc.text(roles.contador_dias_otras_ausencia, 330, y);
                        doc.text(roles.contador_dias_ausencia_medica, 350, y);
                        doc.text(roles.contador_suma_total, 370, y);
                        var x = 390
                        for (const dia of roles.diasAnio) {
                            if (dia.mes.visible && dia.visible) {
                                doc.text(dia.texto, x, y);
                                x += 12
                                if (x > 750) {
                                    x = 320
                                    y += 10
                                }
                            }
                        }
                        //  doc.rect(35,z+8,x-30,0).stroke()
                        y = y + 40;

                        items = items + 1;

                        if (items == itemsPorPagina) {
                            doc.addPage({ size: "letter", layout: 'landscape', margin: 10 });
                            y = 120;
                            items = 0;
                            pagina = pagina + 1;
                            $scope.dibujarCabeceraImpresionPDFRolTurnoDetalle(doc, pagina, totalPaginas);
                        }
                    }
                } if (items > 8) {
                    doc.addPage({ size: "letter", layout: 'landscape', margin: 10 });
                    y = 120;
                    items = 0;
                    pagina = pagina + 1;
                    $scope.dibujarCabeceraImpresionPDFRolTurnoDetalle(doc, pagina, totalPaginas);
                }
                doc.font("Helvetica-Bold", 8);
                doc.text("PERSONAL VACACION", 40, y);
                var x = 390
                doc.font("Helvetica", 8);
                for (const dia of $scope.diasAnioPieVacaciones) {
                    if (dia.mes.visible && dia.visible) {
                        doc.text(dia.texto ? dia.texto : 0, x, y);
                        x += 12
                        if (x > 750) {
                            x = 320
                            y += 10
                        }
                    }
                }

                y = y + 20;
                doc.font("Helvetica-Bold", 8);
                doc.text("PERSONAL AUSENCIA", 40, y);
                doc.font("Helvetica", 8);
                var x = 390
                for (const dia of $scope.diasAnioPieAusencias) {
                    if (dia.mes.visible && dia.visible) {
                        doc.text(dia.texto ? dia.texto : 0, x, y);
                        x += 12
                        if (x > 750) {
                            x = 320
                            y += 10
                        }
                    }
                }
                y = y + 20;
                doc.font("Helvetica-Bold", 8);
                doc.text("PERSONAL TRABAJO", 40, y);
                var x = 390
                doc.font("Helvetica", 8);
                for (const dia of $scope.diasAnioPieTrabajos) {
                    if (dia.mes.visible && dia.visible) {
                        doc.text(dia.texto ? dia.texto : 0, x, y);
                        x += 12
                        if (x > 750) {
                            x = 320
                            y += 10
                        }
                    }
                }


                doc.font("Helvetica", 8);
                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });
                blockUI.stop();
            }

            $scope.dibujarCabeceraImpresionPDFRolTurnoDetalle = function (doc, pagina, totalPaginas) {

                doc.font("Helvetica-Bold", 17);
                doc.text("ROLES DE TURNO", 0, 30, { align: 'center' });
                doc.text("DESDE EL" + $scope.filtroRolCal.inicio2 + "HASTA EL" + $scope.filtroRolCal.fin2, 0, 55, { align: 'center' });
                var campo = $scope.centrosDeCostos.find(function (x) {
                    return x.id == $scope.filtroRolCal.campo
                }) 
                var nombreCampo = "TODOS"
                if (campo) {
                    nombreCampo = campo.nombre
                }
                doc.text("CAMPO: " + nombreCampo, 0, 75, { align: 'center' });
                doc.font("Helvetica-Bold", 13);
                //doc.text(empleado.nombre_completo, 0, 75, { align: 'center' });
                doc.font("Helvetica-Bold", 10);
                //doc.text("Fecha de Ingreso: " + $scope.fechaATexto(empleado.fecha_inicio), 40, 90);
                doc.font("Helvetica-Bold", 8);

                var y = 100
                doc.text("Info", 45, y);
                doc.text("Grupo", 95, y);
                doc.text("Empleado", 150, y, { width: 100 });
                doc.text("T", 250, y);
                doc.text("D", 270, y);
                doc.text("NT", 290, y);
                doc.text("V", 310, y);
                doc.text("A", 330, y);
                doc.text("BM", 350, y);
                doc.text("TT", 370, y);
                var x = 390
                for (const dia of $scope.diasAnio) {
                    if (dia.mes.visible && dia.visible) {
                        doc.text(dia.dia, x, y);
                        x += 12
                        if (x > 750) {
                            x = 320
                            y += 10
                        }
                    }
                }
            }
            $scope.generarExcelRolTurnoDetalle = function () {
                blockUI.start();
                var cabezera = ["CAMPO", "GRUPO", "EMPLEADO", "CARGO",
                    "T", "D", "NT", "V", "A", "BM", "TT"]
                var data = [];
                for (const dia of $scope.diasAnio) {
                    if (dia.mes.visible && dia.visible) {
                        cabezera.push(dia.dia);
                    }
                }
                data.push(cabezera)
                var index = 0;
                for (var i = 0; i < $scope.empleadosRolTurno.length; i++) {
                    roles = $scope.empleadosRolTurno[i]
                    var columns = [];
                    if (roles.contador_suma_total > 0) {
                        columns.push(roles.campo.nombre);
                        if (roles.ficha.cargos.length > 1) {
                            columns.push(roles.ficha.cargos[0].cargo.nombre + ",etc.")
                        } else {
                            columns.push(roles.ficha.cargos[0].cargo.nombre);
                        }

                        columns.push(roles.grupo ? roles.grupo.nombre_corto : "")
                        columns.push(roles.ficha.empleado.persona.nombre_completo);


                        columns.push(roles.contador_dias_Trabajados);
                        columns.push(roles.contador_dias_descanso);
                        columns.push(roles.contador_noche_trabajadas);
                        columns.push(roles.contador_dias_vacaciones);
                        columns.push(roles.contador_dias_otras_ausencia);
                        columns.push(roles.contador_dias_ausencia_medica);
                        columns.push(roles.contador_suma_total);
                        var x = 390
                        for (const dia of roles.diasAnio) {
                            if (dia.mes.visible && dia.visible) {
                                columns.push(dia.texto);
                            }
                        }
                        data.push(columns);
                    }

                }

                columns = []

                columns.push("PERSONAL VACACION");
                for (let index = 0; index < 10; index++) {
                    columns.push("")

                }
                for (const dia of $scope.diasAnioPieVacaciones) {
                    if (dia.mes.visible && dia.visible) {
                        columns.push(dia.texto ? dia.texto : 0);
                    }
                }
                data.push(columns);
                columns = []
                columns.push("PERSONAL AUSENCIA");
                for (let index = 0; index < 10; index++) {
                    columns.push("")

                }
                for (const dia of $scope.diasAnioPieAusencias) {
                    if (dia.mes.visible && dia.visible) {
                        columns.push(dia.texto ? dia.texto : 0);
                    }
                }
                data.push(columns);
                columns = []
                columns.push("PERSONAL TRABAJO");
                for (let index = 0; index < 10; index++) {
                    columns.push("")

                }
                for (const dia of $scope.diasAnioPieTrabajos) {
                    if (dia.mes.visible && dia.visible) {
                        columns.push(dia.texto ? dia.texto : 0);
                    }
                }
                data.push(columns);
                columns = []
                var ws_name = "SheetJS";
                var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-RRHH-ROLES-DE-TURNO.xlsx");
                blockUI.stop();
            }

            $scope.actualizarDocPreRequisitoPaciente = function () {
                var f = document.getElementById($scope.idInputEdicionDocPrerequisito).files[0],
                    r = new FileReader();
                if (f) {
                    r.onloadend = function (e) {
                        $scope.edicionDocPreRequisito.documento2 = { name: "", data: null }
                        $scope.edicionDocPreRequisito.documento2.name = $scope.edicionDocPreRequisito.documento[0].name
                        $scope.edicionDocPreRequisito.documento2.data = e.target.result;
                        //send your binary data via $http or $resource or do anything else with it
                        var promesa = ActualizarDocPreRequisito($scope.edicionDocPreRequisito)
                        promesa.then(function (data) {
                            $scope.mostrarMensaje(data.mensaje)
                            $scope.cerrarDialogEditarDocPreRequisito()
                            $scope.obtenerDatosHistorialPreRequisito($scope.preRequisito,
                                $scope.paciente)
                        })
                    }

                    r.readAsBinaryString(f);

                } else {
                    $scope.mostrarMensaje("Seleccionar un archivo para guardar.")
                }

            }
            $scope.abrirModalEliminarAusenciaMedica = function (ausencia) {
                $scope.ausenciaParaElminar = ausencia
                $scope.abrirPopup($scope.idModalEliminarAusenciaMedica)
            }
            $scope.cerrarModalEliminarAusenciaMedica = function () {
                $scope.cerrarPopup($scope.idModalEliminarAusenciaMedica)
            }
            $scope.eliminarAusenciaMedica = function () {
                $scope.ausenciaParaElminar.eliminado = true
                var promesa = NuevaAusenciaEmpleado($scope.empleado.id_ficha, $scope.ausenciaParaElminar)
                promesa.then(function (data) {
                    toastr.success(data.mensaje)
                    $scope.cerrarModalEliminarAusenciaMedica()
                    $scope.obtenerHistorialEmpleadoAusenciasMedicas()
                })
            }
            $scope.generarReporteGestionesEmpresa = async function (filtro, prorreteo) {
                let historialEmpresaVacacionesGestion = await $scope.obtenerHistorialEmpresaVacacionGestiones(filtro)

                //historialEmpresaVacacionesGestion = await $scope.eliminarDupricados(historialEmpresaVacacionesGestion)
                if (prorreteo) {
                    historialEmpresaVacacionesGestion = await $scope.AgregarProrreteoG(true, historialEmpresaVacacionesGestion)
                }
                const data = [["Nombre", "Cargo", "Campo", 'Fecha de ingreso', "Gestión", "Aplicadas", "Todamas", "Restantes", "Ficha"]]
                let totalCosto = 0;
                for (let i = 0; i < historialEmpresaVacacionesGestion.length; i++) {
                    const vacacion = historialEmpresaVacacionesGestion[i]
                    for (let k = 0; k < vacacion.historialVacaciones.length; k++) {
                        const columns = [];
                        const Historial = vacacion.historialVacaciones[k]
                        columns.push(vacacion.empleado.persona.nombre_completo);
                        let textoCargo = ""
                        for (var d = 0; d < vacacion.cargos.length; d++) {
                            const cargo = vacacion.cargos[d];
                            if (d > 0) {
                                textoCargo += ", "
                            }
                            textoCargo += (cargo && cargo.cargo && cargo.cargo.nombre) || '';
                        }
                        columns.push(textoCargo);
                        const campo = (vacacion && vacacion.empleado && vacacion.empleado.campo && vacacion.empleado.campo.nombre) || '';
                        columns.push(campo);
                        columns.push(vacacion.fecha_inicio ? fechaATexto(vacacion.fecha_inicio) : '');
                        const añoGes = Historial.gestion + 1;
                        const textoGestion = Historial.gestion + "-" + añoGes
                        columns.push(textoGestion);
                        columns.push(Historial.aplicadas);
                        columns.push(Historial.tomadas);
                        columns.push(Historial.aplicadas - Historial.tomadas);
                        columns.push(vacacion.id);
                        data.push(columns);
                    }
                }
                const ws_name = "SheetJS";
                const wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                const wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-VACACIONES-RESTANTES.xlsx");
                blockUI.stop();

            }
            $scope.obtenerHistorialEmpresaVacacionGestiones = async function (filtro) {
                var filtroVacaciones = { inicio: 0, fin: 0, estado: 2 }
                if (filtro.estado) {
                    filtroVacaciones.estado = filtro.estado
                }
                var datos = await ObtenerHistorialEmpresaVacacionGestiones($scope.usuario.id_empresa, filtroVacaciones)
                datos.forEach(function (dato, index, array) {
                    dato.diasRestantes = 0
                    for (var i = 0; i < dato.historialVacaciones.length; i++) {
                        var element = dato.historialVacaciones[i];
                        dato.diasRestantes += element.aplicadas - element.tomadas
                    }
                })
                return datos
            }
            $scope.desahabilitarPrerequisito = function (requisito) {
                requisito.habilitado = false
                let promesa = ActivoInactivoPrerequisto(requisito)
                promesa.then(function (data) {
                    $scope.mostrarMensaje(data.mensaje)
                })
            }
            $scope.habilitarPrerequisito = function (requisito) {
                requisito.habilitado = true
                let promesa = ActivoInactivoPrerequisto(requisito)
                promesa.then(function (data) {
                    $scope.mostrarMensaje(data.mensaje)
                })
            }
            $scope.abrirModalMatrizAnticipo = function () {
                $scope.abrirPopup($scope.idModalMatrizAnticipo);
            }
            $scope.cerrarModalMatrizAnticipo = function () {
                $scope.cerrarPopup($scope.idModalMatrizAnticipo);
            }
            $scope.abrirModalCopiaAnticipo = function () {
                $scope.abrirPopup($scope.idModalCopiaAnticipo);
            }
            $scope.cerrarModalCopiaAnticipo = function () {
                $scope.cerrarPopup($scope.idModalCopiaAnticipo);
            }
            $scope.abrirModalNuevoEmpleadoAnticipo = function () {
                $scope.obtenerListaEmpleados()
                $scope.abrirPopup($scope.idModalNuevoEmpleadoAnticipo);
            }
            $scope.cerrarModalNuevoEmpleadoAnticipo = function () {
                $scope.cerrarPopup($scope.idModalNuevoEmpleadoAnticipo);
            }
            $scope.agregarNuevoEmpleadoAnticipo = function (empleados) {
                empleados.forEach(async function (empleado, index, array) {
                    let monto = 0,
                        porcentaje = 0;
                    if ($scope.anticipoTipo.tipo) {
                        monto = (empleado.ficha.haber_basico * $scope.anticipoTipo.monto) / 100;
                        porcentaje = $scope.anticipoTipo.monto
                    } else {
                        monto = $scope.anticipoTipo.monto
                    }
                    if ($scope.listaAnticipos2.length == 0) {
                        var anticipo = { fecha: new Date(), empleado: empleado, monto: monto, anticipo_extraordinaro: null, total: null, salario_basico: empleado.ficha.haber_basico, saldo_salario: empleado.haber_basico, tope: $scope.anticipoTipo.tope, tipo_porcentual: $scope.anticipoTipo.tipo, porcentaje: porcentaje }

                    } else {

                        var anticipo = { fecha: new Date(), empleado: empleado, monto: monto, anticipo_extraordinaro: null, total: null, salario_basico: empleado.ficha.haber_basico, saldo_salario: null, tope: $scope.anticipoTipo.tope, tipo_porcentual: $scope.anticipoTipo.tipo, porcentaje: porcentaje }
                        anticipo.saldo_salario = anticipo.salario_basico - anticipo.total
                    }
                    //$scope.parametros = await $scope.obtenerParametros($scope.usuario.id_empresa)

                    anticipo.empleado.id_ficha = anticipo.empleado.ficha.id
                    anticipo.id_ficha = anticipo.empleado.ficha.id
                    anticipo.empleado.fecha_inicio = anticipo.empleado.ficha.fecha_inicio
                    anticipo.empleado.ganadoPorMes = []
                    var dato = await RRHHPlanillaSueldo(anticipo.id_ficha, 0, 0);
                    anticipo.promedio_total_ganado = dato.sumaTotalGanado;

                    anticipo.anticipo_extraordinaro = 0
                    anticipo.anticipo_ordinaro = 0
                    if ($scope.anticiposDatos) {
                        if ($scope.anticiposDatos.ordinarios.length > 0) {
                            for (var i = 0; i < $scope.anticiposDatos.ordinarios.length; i++) {
                                var ordi = $scope.anticiposDatos.ordinarios[i];
                                if (anticipo.empleado.id_ficha == ordi.id_ficha) {
                                    anticipo.anticipo_ordinaro += ordi.monto
                                }
                            }

                        }


                        if ($scope.anticiposDatos.extraordinarios.length > 0) {
                            for (var i = 0; i < $scope.anticiposDatos.extraordinarios.length; i++) {
                                var ordi = $scope.anticiposDatos.extraordinarios[i];
                                if (anticipo.empleado.id_ficha == ordi.id_ficha) {
                                    anticipo.anticipo_extraordinaro += ordi.monto
                                }
                            }
                        }
                    } else {
                        anticipo.anticipo_ordinaro = 0
                        anticipo.anticipo_extraordinaro = 0
                    }
                    anticipo.total = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro + anticipo.monto
                    anticipo.total2 = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro + anticipo.monto
                    anticipo.saldo_salario = anticipo.salario_basico - anticipo.total
                    anticipo.saldo_salario2 = anticipo.salario_basico - anticipo.total
                    let totalanticipo = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro
                    if ($scope.anticipoTipo.tipo) {
                        anticipo.monto = (anticipo.promedio_total_ganado * $scope.anticipoTipo.monto) / 100;
                        sumaTotalMontos = anticipo.monto + anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro
                        if (sumaTotalMontos > anticipo.monto) {
                            anticipo.monto == anticipo.monto - anticipo.anticipo_extraordinaro - anticipo.anticipo_ordinaro
                        }
                        if (anticipo.monto > anticipo.tope && anticipo.promedio_total_ganado > 0) {
                            anticipo.monto = anticipo.tope
                            // anticipo.tope=anticipo.tope-(anticipo.anticipo_extraordinaro+anticipo.anticipo_ordinaro)
                        }

                    }
                    anticipo.monto = parseFloat(anticipo.monto.toFixed(2))
                    $scope.listaAnticipos2.push(anticipo)

                    if (index === (array.length - 1)) {
                        $scope.cerrarModalNuevoEmpleadoAnticipo()

                    }
                });
                $scope.$evalAsync()
            }
            $scope.editarCopiaMatrizAnticipo = async function (edicion) {
                SweetAlert.swal({
                    title: edicion ? 'Copiando matriz anticipo ...' : 'Obteniendo matriz anticipo ...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-table size-icon"></i>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                try {
                    let listaAnticipos2 = []
                    if ($scope.matrizAnticipos[0].tipo_porcentual) {
                        $scope.anticipoTipo = { tope: $scope.matrizAnticipos[0].tope, monto: $scope.matrizAnticipos[0].porcentaje, tipo: $scope.matrizAnticipos[0].tipo_porcentual }
                    } else {
                        $scope.anticipoTipo = { tope: $scope.matrizAnticipos[0].tope, monto: $scope.matrizAnticipos[0].tope, tipo: $scope.matrizAnticipos[0].tipo_porcentual }
                    }
                    for (const anticipo of $scope.matrizAnticipos) {
                        delete anticipo.id
                        if (!anticipo.ficha.empleado.eliminado) {
                            anticipo.empleado = anticipo.ficha.empleado
                            anticipo.empleado.id_ficha = anticipo.ficha.id
                            anticipo.empleado.fecha_inicio = anticipo.ficha.fecha_inicio
                            anticipo.empleado.ganadoPorMes = []
                            anticipo.fecha = new Date()
                            blockUI.noOpen = true;
                            var dato = await RRHHPlanillaSueldo(anticipo.id_ficha, 0, 0);
                            anticipo.promedio_total_ganado = dato.sumaTotalGanado;

                            anticipo.anticipo_extraordinaro = 0
                            anticipo.anticipo_ordinaro = 0
                            if ($scope.anticiposDatos) {
                                if ($scope.anticiposDatos.ordinarios.length > 0) {
                                    for (var i = 0; i < $scope.anticiposDatos.ordinarios.length; i++) {
                                        var ordi = $scope.anticiposDatos.ordinarios[i];
                                        if (anticipo.ficha.id == ordi.id_ficha) {
                                            anticipo.anticipo_ordinaro += ordi.monto
                                        }
                                    }

                                }


                                if ($scope.anticiposDatos.extraordinarios.length > 0) {
                                    for (var i = 0; i < $scope.anticiposDatos.extraordinarios.length; i++) {
                                        var ordi = $scope.anticiposDatos.extraordinarios[i];
                                        if (anticipo.ficha.id == ordi.id_ficha) {
                                            anticipo.anticipo_extraordinaro += ordi.monto
                                        }
                                    }
                                }
                            } else {
                                anticipo.anticipo_ordinaro = 0
                                anticipo.anticipo_extraordinaro = 0
                            }
                            anticipo.total = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro + anticipo.monto
                            anticipo.total2 = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro + anticipo.monto
                            anticipo.saldo_salario = anticipo.salario_basico - anticipo.total
                            anticipo.saldo_salario2 = anticipo.salario_basico - anticipo.total
                        // let totalanticipo = anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro
                        /* if (anticipo.tipo_porcentual) {
                            anticipo.monto = (anticipo.promedio_total_ganado * anticipo.monto) / 100;
                            sumaTotalMontos = anticipo.monto + anticipo.anticipo_extraordinaro + anticipo.anticipo_ordinaro
                            if (sumaTotalMontos > anticipo.monto) {
                                anticipo.monto == anticipo.monto - anticipo.anticipo_extraordinaro - anticipo.anticipo_ordinaro
                            }
                            if (anticipo.monto > anticipo.tope && anticipo.promedio_total_ganado > 0) {
                                anticipo.monto = anticipo.tope

                            }

                        }
                         */anticipo.monto = anticipo.monto ? parseFloat(anticipo.monto.toFixed(2)) : 0

                            listaAnticipos2.push(anticipo)
                        }
                    }
                    $scope.matrizEdicion = edicion
                    $scope.listaAnticipos2 = listaAnticipos2
                    $scope.$evalAsync()
                    SweetAlert.swal({
                        title: 'Finalizado!',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    })
                    $scope.cerrarModalCopiaAnticipo()


                } catch (error) {
                    console.log(error)
                }
            }
            $scope.obtenerMatrizAnticipo = function () {
                $scope.matrizAnticipos = []
                var promesa = ObtenerMatrizAnticipo($scope.usuario.id_empresa)
                promesa.then(function (data) {
                    $scope.matrizAnticipos = data.matriz
                })
            }
            $scope.generarMatrizAnticipos = function () {
                var promesa = CrearMatrizAnticipo($scope.listaAnticipos, $scope.usuario.id_empresa)
                promesa.then(function (data) {
                    $scope.mostrarMensaje(data.mensaje)
                })
            }
            $scope.subirExcelConfiguracionRopaTrabajo = async function (event) {

                let files = event.target.files;
                let i, f;
                for (i = 0, f = files[i]; i != files.length; ++i) {
                    //console.log('iniciando lectura de excel(s)')
                    let reader = new FileReader();
                    let name = f.name;
                    reader.onload = function (e) {
                        let data = e.target.result;
                        let workbook = XLSX.read(data, { type: 'binary' });
                        let first_sheet_name = workbook.SheetNames[0];
                        let row = 2, row2 = 2;
                        let worksheet = workbook.Sheets[first_sheet_name];
                        let configuracionRopa = [];
                        let ropasArray = []
                        do {
                            row2 = row
                            let configuracion = { detallesVenta: [] };
                            let cargo = worksheet['A' + row] != undefined && worksheet['A' + row] != "" ? worksheet['A' + row].v.toString() : null;
                            configuracion.cargo = $scope.listaCargos.clases.find(function (x) {
                                return x.nombre.toUpperCase().trim() == cargo.toUpperCase().trim()
                            })
                            configuracion.ropa = worksheet['B' + row] != undefined && worksheet['B' + row] != "" ? worksheet['B' + row].v.toString() : null;
                            var bandera = false
                            if (ropasArray.length > 0) {
                                for (var i = 0; i < ropasArray.length; i++) {
                                    var element = ropasArray[i];
                                    if (configuracion.ropa != null) {
                                        if (element == configuracion.ropa) {
                                            bandera = true
                                        }
                                    }
                                }
                                if (!bandera) {

                                    ropasArray.push(configuracion.ropa)

                                }
                            } else {
                                ropasArray.push(configuracion.ropa)
                            }
                            configuracion.cantidad = worksheet['C' + row] != undefined && worksheet['C' + row] != "" ? worksheet['C' + row].v.toString() : null;
                            configuracion.meses_uso = worksheet['D' + row] != undefined && worksheet['D' + row] != "" ? worksheet['D' + row].v.toString() : null;
                            configuracionRopa.push(configuracion);
                            row++
                        } while (worksheet['A' + row] != undefined);
                        $scope.guardarImportacionconfiguracionRopa(configuracionRopa, ropasArray);
                        $scope.limpiarArchivoImportacion()
                    };
                    reader.readAsBinaryString(f);

                }

            }

            $scope.guardarImportacionconfiguracionRopa = function (configuracionRopa, ropasArray) {
                blockUI.start();
                $scope.configuracionRopaParaGuardar = configuracionRopa
                let configuracionRopaArray = []
                if ($scope.configuracionRopaParaGuardar.length > 0) {
                    if (ropasArray.length == 0) {
                        if ($scope.configuracionRopaParaGuardar.length > 1) {
                            configuracionRopaArray = $scope.configuracionRopaParaGuardar.slice(0, 1)
                            $scope.configuracionRopaParaGuardar = $scope.configuracionRopaParaGuardar.slice(1, $scope.configuracionRopaParaGuardar.length)
                        } else {
                            configuracionRopaArray = $scope.configuracionRopaParaGuardar
                            $scope.configuracionRopaParaGuardar = []
                        }
                    }
                    let promesa = GuardarImportacionconfiguracionRopa(ropasArray, configuracionRopaArray, $scope.usuario.id_empresa)
                    promesa.then(function (dato) {
                        blockUI.stop()
                        if ($scope.configuracionRopaParaGuardar.length > 0) {
                            $scope.mostrarMensaje("Faltan procesar " + $scope.configuracionRopaParaGuardar.length + " configuraciones de ropa.")
                            $scope.guardarImportacionconfiguracionRopa($scope.configuracionRopaParaGuardar, [])

                        } else {
                            blockUI.stop()
                            $scope.mostrarMensaje(dato.mensaje)
                        }
                    })
                }
            }
            $scope.subirExcelDotacionRopaTrabajo = async function (event) { }

            $scope.subirExcelHojasDeVida = async function (event) {

                let files = event.target.files;
                let i, f;
                for (i = 0, f = files[i]; i != files.length; ++i) {
                    //console.log('iniciando lectura de excel(s)')
                    let reader = new FileReader();
                    let name = f.name;
                    reader.onload = function (e) {
                        let data = e.target.result;
                        let workbook = XLSX.read(data, { type: 'binary' });
                        let formacionAcademicaSheet = workbook.SheetNames[0];
                        let experienciaLaboralsheet = workbook.SheetNames[1];
                        let capacitacionSheet = workbook.SheetNames[2];
                        let logrosSheet = workbook.SheetNames[3];
                        let row = 2;
                        let worksheetFormacionAcademica = workbook.Sheets[formacionAcademicaSheet];
                        let worksheetExperienciaLaboral = workbook.Sheets[experienciaLaboralsheet];
                        let worksheetCapacitacion = workbook.Sheets[capacitacionSheet];
                        let worksheetLogros = workbook.Sheets[logrosSheet];
                        let HojasDeVida = { formacionesAcademicas: [], experienciasLaborales: [], capacitaciones: [], logros: [] };
                        let conceptosArray = { gradosAcademicos: [], Instituciones: [], titulos: [], logros: [], hojasVidaEmpleados: [] }
                        do {
                            let formacionAcademica = {};
                            formacionAcademica.codigo = worksheetFormacionAcademica['A' + row] != undefined && worksheetFormacionAcademica['A' + row] != "" ? worksheetFormacionAcademica['A' + row].v.toString() : null;
                            let bandera = false
                            if (conceptosArray.hojasVidaEmpleados.length > 0) {
                                for (let i = 0; i < conceptosArray.hojasVidaEmpleados.length; i++) {
                                    let codigo = conceptosArray.hojasVidaEmpleados[i];
                                    if (formacionAcademica.codigo != null) {
                                        if (codigo == formacionAcademica.codigo) {
                                            bandera = true
                                        }
                                    }
                                }
                                if (!bandera) {

                                    conceptosArray.hojasVidaEmpleados.push(formacionAcademica.codigo)

                                }
                            } else {
                                conceptosArray.hojasVidaEmpleados.push(formacionAcademica.codigo)
                            }
                            formacionAcademica.gradoAcademico = worksheetFormacionAcademica['B' + row] != undefined && worksheetFormacionAcademica['B' + row] != "" ? worksheetFormacionAcademica['B' + row].v.toString() : null;
                            bandera = false
                            if (conceptosArray.gradosAcademicos.length > 0) {
                                for (let i = 0; i < conceptosArray.gradosAcademicos.length; i++) {
                                    let gradoAcademico = conceptosArray.gradosAcademicos[i];
                                    if (formacionAcademica.gradoAcademico != null) {
                                        if (gradoAcademico == formacionAcademica.gradoAcademico) {
                                            bandera = true
                                        }
                                    }
                                }
                                if (!bandera) {

                                    conceptosArray.gradosAcademicos.push(formacionAcademica.gradoAcademico)

                                }
                            } else {
                                conceptosArray.gradosAcademicos.push(formacionAcademica.gradoAcademico)
                            }
                            formacionAcademica.institucion = worksheetFormacionAcademica['C' + row] != undefined && worksheetFormacionAcademica['C' + row] != "" ? worksheetFormacionAcademica['C' + row].v.toString() : null;
                            bandera = false
                            if (conceptosArray.Instituciones.length > 0) {
                                for (let i = 0; i < conceptosArray.Instituciones.length; i++) {
                                    let institucion = conceptosArray.Instituciones[i];
                                    if (formacionAcademica.institucion != null) {
                                        if (institucion == formacionAcademica.institucion) {
                                            bandera = true
                                        }
                                    }
                                }
                                if (!bandera) {
                                    conceptosArray.Instituciones.push(formacionAcademica.institucion)
                                }
                            } else {
                                conceptosArray.Instituciones.push(formacionAcademica.institucion)
                            }
                            formacionAcademica.titulo = worksheetFormacionAcademica['D' + row] != undefined && worksheetFormacionAcademica['D' + row] != "" ? worksheetFormacionAcademica['D' + row].v.toString() : null;
                            bandera = false
                            if (conceptosArray.titulos.length > 0) {
                                for (let i = 0; i < conceptosArray.titulos.length; i++) {
                                    let titulo = conceptosArray.titulos[i];
                                    if (formacionAcademica.titulo != null) {
                                        if (titulo == formacionAcademica.titulo) {
                                            bandera = true
                                        }
                                    }
                                }
                                if (!bandera) {
                                    conceptosArray.titulos.push(formacionAcademica.titulo)
                                }
                            } else {
                                conceptosArray.titulos.push(formacionAcademica.titulo)
                            }
                            formacionAcademica.descripcion = worksheetFormacionAcademica['E' + row] != undefined && worksheetFormacionAcademica['E' + row] != "" ? worksheetFormacionAcademica['E' + row].v.toString() : null;
                            formacionAcademica.anioObtenido = worksheetFormacionAcademica['F' + row] != undefined && worksheetFormacionAcademica['F' + row] != "" ? worksheetFormacionAcademica['F' + row].v.toString() : null;
                            HojasDeVida.formacionesAcademicas.push(formacionAcademica);
                            row++
                        } while (worksheetFormacionAcademica['A' + row] != undefined);
                        row = 2
                        do {
                            let experienciasLaboral = {};
                            experienciasLaboral.codigo = worksheetExperienciaLaboral['A' + row] != undefined && worksheetExperienciaLaboral['A' + row] != "" ? worksheetExperienciaLaboral['A' + row].v.toString() : null;
                            bandera = false
                            if (conceptosArray.hojasVidaEmpleados.length > 0) {
                                for (let i = 0; i < conceptosArray.hojasVidaEmpleados.length; i++) {
                                    let codigo = conceptosArray.hojasVidaEmpleados[i];
                                    if (experienciasLaboral.codigo != null) {
                                        if (codigo == experienciasLaboral.codigo) {
                                            bandera = true
                                        }
                                    }
                                }
                                if (!bandera) {

                                    conceptosArray.hojasVidaEmpleados.push(experienciasLaboral.codigo)

                                }
                            } else {
                                conceptosArray.hojasVidaEmpleados.push(experienciasLaboral.codigo)
                            }
                            experienciasLaboral.fecha_inicio = worksheetExperienciaLaboral['B' + row] != undefined && worksheetExperienciaLaboral['B' + row] != "" ? new Date($scope.fecha_excel_angular(worksheetExperienciaLaboral['B' + row].v.toString())) : null;
                            experienciasLaboral.fecha_inicio.setHours(0, 0, 0, 0);
                            experienciasLaboral.fecha_fin = worksheetExperienciaLaboral['C' + row] != undefined && worksheetExperienciaLaboral['C' + row] != "" ? new Date($scope.fecha_excel_angular(worksheetExperienciaLaboral['C' + row].v.toString())) : null;
                            experienciasLaboral.fecha_fin.setHours(0, 0, 0, 0);
                            experienciasLaboral.empresa = worksheetExperienciaLaboral['D' + row] != undefined && worksheetExperienciaLaboral['D' + row] != "" ? worksheetExperienciaLaboral['D' + row].v.toString() : null;
                            experienciasLaboral.cargo = worksheetExperienciaLaboral['E' + row] != undefined && worksheetExperienciaLaboral['E' + row] != "" ? worksheetExperienciaLaboral['E' + row].v.toString() : null;
                            experienciasLaboral.motivo_retiro = worksheetExperienciaLaboral['F' + row] != undefined && worksheetExperienciaLaboral['F' + row] != "" ? worksheetExperienciaLaboral['F' + row].v.toString() : null;
                            experienciasLaboral.contacto = worksheetExperienciaLaboral['G' + row] != undefined && worksheetExperienciaLaboral['G' + row] != "" ? worksheetExperienciaLaboral['G' + row].v.toString() : null;
                            experienciasLaboral.telefono = worksheetExperienciaLaboral['H' + row] != undefined && worksheetExperienciaLaboral['H' + row] != "" ? worksheetExperienciaLaboral['H' + row].v.toString() : null;
                            HojasDeVida.experienciasLaborales.push(experienciasLaboral);
                            row++
                        } while (worksheetExperienciaLaboral['A' + row] != undefined);
                        row = 2
                        do {
                            let capacitacion = {};
                            capacitacion.codigo = worksheetCapacitacion['A' + row] != undefined && worksheetCapacitacion['A' + row] != "" ? worksheetCapacitacion['A' + row].v.toString() : null;
                            bandera = false
                            if (conceptosArray.hojasVidaEmpleados.length > 0) {
                                for (let i = 0; i < conceptosArray.hojasVidaEmpleados.length; i++) {
                                    let codigo = conceptosArray.hojasVidaEmpleados[i];
                                    if (capacitacion.codigo != null) {
                                        if (codigo == capacitacion.codigo) {
                                            bandera = true
                                        }
                                    }
                                }
                                if (!bandera) {

                                    conceptosArray.hojasVidaEmpleados.push(capacitacion.codigo)

                                }
                            } else {
                                conceptosArray.hojasVidaEmpleados.push(capacitacion.codigo)
                            }
                            let tipo = worksheetCapacitacion['B' + row] != undefined && worksheetCapacitacion['B' + row] != "" ? worksheetCapacitacion['B' + row].v.toString() : null;
                            capacitacion.tipo = $scope.capacidadesIE.clases.find(function (x) {
                                return x.nombre.toUpperCase() == tipo.toUpperCase()
                            })
                            capacitacion.fecha = worksheetCapacitacion['C' + row] != undefined && worksheetCapacitacion['C' + row] != "" ? new Date($scope.fecha_excel_angular(worksheetCapacitacion['C' + row].v.toString())) : null;
                            capacitacion.fecha.setHours(0, 0, 0, 0);
                            capacitacion.curso = worksheetCapacitacion['D' + row] != undefined && worksheetCapacitacion['D' + row] != "" ? worksheetCapacitacion['D' + row].v.toString() : null;
                            capacitacion.institucion = worksheetCapacitacion['E' + row] != undefined && worksheetCapacitacion['E' + row] != "" ? worksheetCapacitacion['E' + row].v.toString() : null;
                            capacitacion.certificado = worksheetCapacitacion['F' + row] != undefined && worksheetCapacitacion['F' + row] != "" ? worksheetCapacitacion['F' + row].v.toString() : null;
                            HojasDeVida.capacitaciones.push(capacitacion);
                            row++
                        } while (worksheetCapacitacion['A' + row] != undefined);
                        row = 2
                        do {
                            let logro = {};
                            logro.codigo = worksheetLogros['A' + row] != undefined && worksheetLogros['A' + row] != "" ? worksheetLogros['A' + row].v.toString() : null;
                            bandera = false
                            if (conceptosArray.hojasVidaEmpleados.length > 0) {
                                for (let i = 0; i < conceptosArray.hojasVidaEmpleados.length; i++) {
                                    let codigo = conceptosArray.hojasVidaEmpleados[i];
                                    if (logro.codigo != null) {
                                        if (codigo == logro.codigo) {
                                            bandera = true
                                        }
                                    }
                                }
                                if (!bandera) {

                                    conceptosArray.hojasVidaEmpleados.push(logro.codigo)

                                }
                            } else {
                                conceptosArray.hojasVidaEmpleados.push(logro.codigo)
                            }
                            logro.tipo = worksheetLogros['B' + row] != undefined && worksheetLogros['B' + row] != "" ? worksheetLogros['B' + row].v.toString() : null;
                            bandera = false
                            if (conceptosArray.logros.length > 0) {
                                for (let i = 0; i < conceptosArray.logros.length; i++) {
                                    let tipo = conceptosArray.logros[i];
                                    if (logro.tipo != null) {
                                        if (tipo == logro.tipo) {
                                            bandera = true
                                        }
                                    }
                                }
                                if (!bandera) {
                                    conceptosArray.logros.push(logro.tipo)
                                }
                            } else {
                                conceptosArray.logros.push(logro.tipo)
                            }
                            logro.fecha = worksheetLogros['C' + row] != undefined && worksheetLogros['C' + row] != "" ? new Date($scope.fecha_excel_angular(worksheetLogros['C' + row].v.toString())) : null;
                            logro.fecha.setHours(0, 0, 0, 0);
                            logro.motivo = worksheetLogros['D' + row] != undefined && worksheetLogros['D' + row] != "" ? worksheetLogros['D' + row].v.toString() : null;
                            logro.institucion = worksheetLogros['E' + row] != undefined && worksheetLogros['E' + row] != "" ? worksheetLogros['E' + row].v.toString() : null;
                            logro.observacion = worksheetLogros['F' + row] != undefined && worksheetLogros['F' + row] != "" ? worksheetLogros['F' + row].v.toString() : null;
                            HojasDeVida.logros.push(logro);
                            row++
                        } while (worksheetLogros['A' + row] != undefined);
                        $scope.guardarImportacionHojasDeVida(HojasDeVida, conceptosArray);
                        $scope.limpiarArchivoImportacion()
                    };
                    reader.readAsBinaryString(f);
                }
            }
            $scope.guardarImportacionHojasDeVida = async function (HojasDeVida, conceptosArray) {
                let datosConcetos = await GuardarConceptosHojasDeVida(conceptosArray, $scope.usuario.id_empresa)
                if (datosConcetos.guardado) {
                    let datosHojasDeVida = await GuardarHojasDeVidaImportacion(HojasDeVida, $scope.usuario.id_empresa)
                    $scope.mostrarMensaje(datosHojasDeVida.mensaje)
                    $scope.obtenerRecursosHumanos()
                }
            }
            $scope.generarPDFOtrasAusencias = (datosAusencia) => {
                const generar_PDF_Otras_Ausencia = (datos, imagen) => {
                    const pdf = new PDFDocument({ size: "letter", compress: false, margin: 40 });
                    const stream = pdf.pipe(blobStream());
                    let y = 60;
                    let x = 50;
                    let centroEstimado = 220;

                    pdf.rect(50, 100, 500, 0).stroke()

                    //Cabecera
                    if (imagen) {
                        pdf.image(imagen, 50, 30, { fit: [100, 100] });
                    }
                    pdf.font("Helvetica-Bold", 12);
                    pdf.text('BOLETA DE PERMISO OTRAS AUSENCIAS', centroEstimado, y, { align: 'center', width: 150 });
                    y += 60;

                    //columna izquierda
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Tipo:', x, y, { align: 'left', width: 150 });
                    pdf.font("Helvetica", 10);
                    pdf.text(datosAusencia.tipoAusencia.nombre, x + 70, y, { align: 'left', width: 150 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Fecha:', x, y, { align: 'left', width: 150 }); // fecha emisión ausencia
                    pdf.font("Helvetica", 10);
                    const fecha_emision = datosAusencia.createdAt && datosAusencia.createdAt || new Date()
                    pdf.text($scope.fechaATexto(fecha_emision), x + 70, y, { align: 'left', width: 150 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Nombre:', x, y, { align: 'left', width: 150 }); // nombre del empleado
                    pdf.font("Helvetica", 10);
                    const nombre_empleado = (datosAusencia.ficha && datosAusencia.ficha.empleado && datosAusencia.ficha.empleado.persona && datosAusencia.ficha.empleado.persona.nombre_completo) || $scope.empleado.nombre_completo;
                    pdf.text(nombre_empleado, x + 70, y, { align: 'left', width: 250 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Del:', x, y, { align: 'left', width: 150 }); //fecha inicio baja
                    pdf.font("Helvetica", 10);
                    pdf.text($scope.fechaATexto(datosAusencia.fecha_inicio), x + 70, y, { align: 'left', width: 150 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Total:', x, y, { align: 'left', width: 150 }); // total días de baja
                    pdf.font("Helvetica", 10);
                    pdf.text(((datosAusencia.dias && datosAusencia.dias) || '0') + ' días.', x + 70, y, { align: 'left', width: 150 });
                    // y += 20;
                    // pdf.font("Helvetica-Bold", 10);
                    // pdf.text('Diagnóstico:', x, y, { align: 'left', width: 150 });
                    // pdf.font("Helvetica", 10);
                    // pdf.text(((datosAusencia.diagnostico && datosAusencia.diagnostico) || 'SIN DIAGNÓSTICO!'), x + 70, y, { align: 'left', width: 350 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Observación:', x, y, { align: 'left', width: 150 });
                    pdf.font("Helvetica", 10);
                    pdf.text(((datosAusencia.observacion && datosAusencia.observacion) || 'NINGUNA'), x + 70, y, { align: 'left', width: 350 });
                    y += 50;

                    //Firmas del documento
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text(nombre_empleado, x, y, { align: 'left', width: 250 });
                    pdf.text('JEFE AREA', centroEstimado + 60, y, { align: 'left', width: 250 });
                    pdf.text('JEFE DE R.R.H.H', centroEstimado + 200, y, { align: 'left', width: 250 });
                    y += 20

                    //Información de impresion del documento
                    pdf.font("Helvetica", 6);
                    pdf.text('USUARIO', x, y, { align: 'left', width: 250 });
                    const nombre_usuario = (datosAusencia.usuario && datosAusencia.usuario.persona.nombre_completo) || ($scope.usuario.persona.nombre_completo && $scope.usuario.persona.nombre_completo || 'Error: nombre usuario no encontrado.')
                    pdf.text(nombre_usuario, x + 30, y, { align: 'left', width: 250 });
                    pdf.text('EMISIÓN:', centroEstimado, y, { align: 'left', width: 250 });
                    pdf.text($scope.fechaATexto(fecha_emision), centroEstimado + 50, y, { align: 'left', width: 250 });
                    pdf.text('IMPRESIÓN:', centroEstimado + 150, y, { align: 'left', width: 250 });
                    pdf.text($scope.fechaATexto(new Date()), centroEstimado + 200, y, { align: 'left', width: 250 });

                    //columna derecha
                    y = 160 // regresar a la línea incial de datos (120 + 2 lineas = 160)
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Fecha ingreso:', x * 2 + centroEstimado, y, { align: 'left', width: 150 }); // Fecha contratación empleado
                    pdf.font("Helvetica", 10);
                    const fecha_contratado = (datosAusencia.ficha && datosAusencia.ficha.fecha_inicio) || ($scope.empleado.fecha_inicio && $scope.empleado.fecha_inicio)
                    pdf.text($scope.fechaATexto(fecha_contratado), x * 2 + 150 + centroEstimado, y, { align: 'left', width: 150 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Al:', x * 2 + centroEstimado, y, { align: 'left', width: 150 }); // Fecha fin de baja
                    pdf.font("Helvetica", 10);
                    pdf.text($scope.fechaATexto(datosAusencia.fecha_fin), x * 2 + 150 + centroEstimado, y, { align: 'left', width: 150 });
                    // y += 20;
                    // pdf.font("Helvetica-Bold", 10);
                    // pdf.text('1era baja:', x * 2 + centroEstimado, y, { align: 'left', width: 150 }); // Es primer baja
                    // pdf.font("Helvetica", 10);
                    // pdf.text((datosAusencia.primera_baja && 'SI' || 'NO'), x * 2 + 150 + centroEstimado, y, { align: 'left', width: 150 });

                    pdf.end();

                    stream.on('finish', () => {
                        const fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                    stream.on('error', errorHandler);
                }
                const errorHandler = (err) => {
                    const msg = (err.stack !== undefined && err.stack !== null) ? err.stack : (err.message !== undefined && err.message !== null) ? err.message : 'Se perdió la conexión.'
                    $scope.mostrarMensaje(msg)
                }
                const promImg = ObtenerImagen($scope.usuario.empresa.imagen);
                promImg.then((imagen) => {
                    return generar_PDF_Otras_Ausencia(datosAusencia, imagen)
                }).catch((err) => {
                    errorHandler(err)
                })
            }

            $scope.generarPDFAusenciaMedica = (datosAusencia, otraAusencia) => {
                const generar_PDF_Ausencia_Medica = (datos, imagen) => {
                    const pdf = new PDFDocument({ size: "letter", compress: false, margin: 40 });
                    const stream = pdf.pipe(blobStream());
                    let y = 60;
                    let x = 50;
                    let centroEstimado = 220;

                    pdf.rect(50, 100, 500, 0).stroke()

                    //Cabecera
                    if (imagen) {
                        pdf.image(imagen, 50, 30, { fit: [100, 100] });
                    }
                    pdf.font("Helvetica-Bold", 12);
                    pdf.text('BOLETA DE PERMISO BAJA MÉDICA', centroEstimado, y, { align: 'center', width: 150 });
                    y += 60;

                    //columna izquierda
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Tipo:', x, y, { align: 'left', width: 150 });
                    pdf.font("Helvetica", 10);
                    pdf.text(datosAusencia.tipoAusencia.nombre, x + 70, y, { align: 'left', width: 150 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Fecha:', x, y, { align: 'left', width: 150 }); // fecha emisión ausencia
                    pdf.font("Helvetica", 10);
                    const fecha_emision = datosAusencia.createdAt && datosAusencia.createdAt || new Date()
                    pdf.text($scope.fechaATexto(fecha_emision), x + 70, y, { align: 'left', width: 150 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Nombre:', x, y, { align: 'left', width: 150 }); // nombre del empleado
                    pdf.font("Helvetica", 10);
                    const nombre_empleado = (datosAusencia.ficha && datosAusencia.ficha.empleado && datosAusencia.ficha.empleado.persona && datosAusencia.ficha.empleado.persona.nombre_completo) || $scope.empleado.nombre_completo;
                    pdf.text(nombre_empleado, x + 70, y, { align: 'left', width: 250 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Del:', x, y, { align: 'left', width: 150 }); //fecha inicio baja
                    pdf.font("Helvetica", 10);
                    pdf.text($scope.fechaATexto(datosAusencia.fecha_inicio), x + 70, y, { align: 'left', width: 150 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Total:', x, y, { align: 'left', width: 150 }); // total días de baja
                    pdf.font("Helvetica", 10);
                    pdf.text(((datosAusencia.dias && datosAusencia.dias) || '0') + ' días.', x + 70, y, { align: 'left', width: 150 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Diagnóstico:', x, y, { align: 'left', width: 150 });
                    pdf.font("Helvetica", 10);
                    pdf.text(((datosAusencia.diagnostico && datosAusencia.diagnostico) || 'SIN DIAGNÓSTICO!'), x + 70, y, { align: 'left', width: 350 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Observación:', x, y, { align: 'left', width: 150 });
                    pdf.font("Helvetica", 10);
                    pdf.text(((datosAusencia.observacion && datosAusencia.observacion) || 'NINGUNA'), x + 70, y, { align: 'left', width: 350 });
                    y += 50;

                    //Firmas del documento
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text(nombre_empleado, x, y, { align: 'left', width: 250 });
                    pdf.text('JEFE AREA', centroEstimado + 60, y, { align: 'left', width: 250 });
                    pdf.text('JEFE DE R.R.H.H', centroEstimado + 200, y, { align: 'left', width: 250 });
                    y += 20

                    //Información de impresion del documento
                    pdf.font("Helvetica", 6);
                    pdf.text('USUARIO', x, y, { align: 'left', width: 250 });
                    const nombre_usuario = (datosAusencia.usuario && datosAusencia.usuario.persona.nombre_completo) || ($scope.usuario.persona.nombre_completo && $scope.usuario.persona.nombre_completo || 'Error: nombre usuario no encontrado.')
                    pdf.text(nombre_usuario, x + 30, y, { align: 'left', width: 250 });
                    pdf.text('EMISIÓN:', centroEstimado, y, { align: 'left', width: 250 });
                    pdf.text($scope.fechaATexto(fecha_emision), centroEstimado + 50, y, { align: 'left', width: 250 });
                    pdf.text('IMPRESIÓN:', centroEstimado + 150, y, { align: 'left', width: 250 });
                    pdf.text($scope.fechaATexto(new Date()), centroEstimado + 200, y, { align: 'left', width: 250 });

                    //columna derecha
                    y = 160 // regresar a la línea incial de datos (120 + 2 lineas = 160)
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Fecha ingreso:', x * 2 + centroEstimado, y, { align: 'left', width: 150 }); // Fecha contratación empleado
                    pdf.font("Helvetica", 10); 
                    const fecha_contratado = (datosAusencia.ficha && datosAusencia.ficha.fecha_inicio) || ($scope.empleado.fecha_inicio && $scope.empleado.fecha_inicio)
                    pdf.text($scope.fechaATexto(fecha_contratado), x * 2 + 150 + centroEstimado, y, { align: 'left', width: 150 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('Al:', x * 2 + centroEstimado, y, { align: 'left', width: 150 }); // Fecha fin de baja
                    pdf.font("Helvetica", 10);
                    pdf.text($scope.fechaATexto(datosAusencia.fecha_fin), x * 2 + 150 + centroEstimado, y, { align: 'left', width: 150 });
                    y += 20;
                    pdf.font("Helvetica-Bold", 10);
                    pdf.text('1era baja:', x * 2 + centroEstimado, y, { align: 'left', width: 150 }); // Es primer baja
                    pdf.font("Helvetica", 10);
                    pdf.text((datosAusencia.primera_baja && 'SI' || 'NO'), x * 2 + 150 + centroEstimado, y, { align: 'left', width: 150 });

                    pdf.end();

                    stream.on('finish', () => {
                        const fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                    stream.on('error', errorHandler);
                }

                const errorHandler = (err) => {
                    const msg = (err.stack !== undefined && err.stack !== null) ? err.stack : (err.message !== undefined && err.message !== null) ? err.message : 'Se perdió la conexión.'
                    $scope.mostrarMensaje(msg)
                }
                const promImg = ObtenerImagen($scope.usuario.empresa.imagen);
                promImg.then((imagen) => {
                    return generar_PDF_Ausencia_Medica(datosAusencia, imagen)
                }).catch((err) => {
                    errorHandler(err)
                })
            }

            $scope.generarExcelEmpleadosHojasVida = async function (empleados, configuracion) {
                blockUI.start();
                let dataFormacionAcademica = [["CODIGO", "NOMBRE", "GRADO", "TITULO", "AÑO DE OBTENCIÓN",
                    "INSTITUCIÓN", "DESCRIPCION"]];
                let dataExperienciaLaborar = [["CODIGO", "NOMBRE", "FECHA INICIO", "FECHA FIN", "EMPRESA",
                    "CARGO", "MOTIVO RETIRO", "CONTACTO(NOMBRE/CARGO)", "TELEFONO"]];
                let dataCapacidades = [["CODIGO", "NOMBRE", "TIPO", "FECHA", "CURSO",
                    "INSTITUCIÓN", "CERTIFICADO"]];
                let dataLogros = [["CODIGO", "NOMBRE", "TIPO", "FECHA", "MOTIVO",
                    "INSTITUCIÓN", "OBSERVACIONES"]];
                let index = 0;
                for (let i = 0; i < empleados.length; i++) {
                    let empleado = empleados[i]
                    let datos = await ObtenerEmpleadoHojaVida(empleado.id)
                    let hojaVida = datos.hojaVida
                    let columns = [];
                    index = index + 1
                    if (hojaVida) {
                        if (hojaVida.formacionesAcademicas.length > 0) {
                            for (const formacionAcademica of hojaVida.formacionesAcademicas) {
                                columns.push(empleado.codigo);
                                columns.push(empleado.nombre_completo);
                                columns.push(formacionAcademica.grado.nombre);
                                columns.push(formacionAcademica.titulo.nombre);
                                columns.push(formacionAcademica.anio_obtencion);
                                columns.push(formacionAcademica.institucion.nombre);
                                columns.push(formacionAcademica.descripcion);
                                dataFormacionAcademica.push(columns);
                                columns = []
                            }
                        } else {
                            columns.push(empleado.codigo);
                            columns.push(empleado.nombre_completo);
                            columns.push("El empleado no cuenta con registro de formaciones academicas")
                            dataExperienciaLaborar.push(columns);
                            dataFormacionAcademica.push(columns);
                            dataCapacidades.push(columns);
                            dataLogros.push(columns);
                            columns = []
                        }
                        if (hojaVida.experienciasLaborales.length > 0) {
                            for (const experienciaLaboral of hojaVida.experienciasLaborales) {
                                columns.push(empleado.codigo);
                                columns.push(empleado.nombre_completo);
                                columns.push(experienciaLaboral.fecha_inicial);
                                columns.push(experienciaLaboral.fecha_fin);
                                columns.push(experienciaLaboral.empresa);
                                columns.push(experienciaLaboral.cargo);
                                columns.push(experienciaLaboral.motivo_retiro);
                                columns.push(experienciaLaboral.contacto);
                                columns.push(experienciaLaboral.telefono);
                                dataExperienciaLaborar.push(columns);
                                columns = []
                            }
                        } else {
                            columns.push(empleado.codigo);
                            columns.push(empleado.nombre_completo);
                            columns.push("El empleado no cuenta con registro de experiencias laborales")
                            dataExperienciaLaborar.push(columns);
                            dataFormacionAcademica.push(columns);
                            dataCapacidades.push(columns);
                            dataLogros.push(columns);
                            columns = []
                        }
                        if (hojaVida.capacidades.length > 0) {
                            for (const capacidad of hojaVida.capacidades) {
                                columns.push(empleado.codigo);
                                columns.push(empleado.nombre_completo);
                                columns.push(capacidad.tipoCapacidad.nombre);
                                columns.push(capacidad.fecha);
                                columns.push(capacidad.curso);
                                columns.push(capacidad.institucion);
                                columns.push(capacidad.certificado);
                                dataCapacidades.push(columns);
                                columns = []
                            }
                        } else {
                            columns.push(empleado.codigo);
                            columns.push(empleado.nombre_completo);
                            columns.push("El empleado no cuenta con registro de capacitaciones")
                            dataExperienciaLaborar.push(columns);
                            dataFormacionAcademica.push(columns);
                            dataCapacidades.push(columns);
                            dataLogros.push(columns);
                            columns = []
                        }
                        if (hojaVida.logros.length > 0) {
                            for (const logro of hojaVida.logros) {
                                columns.push(empleado.codigo);
                                columns.push(empleado.nombre_completo);
                                columns.push(logro.tipoLogro.nombre);
                                columns.push(logro.fecha);
                                columns.push(logro.motivo);
                                columns.push(logro.institucion);
                                columns.push(logro.observacion);
                                dataLogros.push(columns);
                                columns = []
                            }
                        } else {
                            columns.push(empleado.codigo);
                            columns.push(empleado.nombre_completo);
                            columns.push("El empleado no cuenta con registro de logros")
                            dataExperienciaLaborar.push(columns);
                            dataFormacionAcademica.push(columns);
                            dataCapacidades.push(columns);
                            dataLogros.push(columns);
                            columns = []
                        }
                    } else {
                        columns.push(empleado.codigo);
                        columns.push(empleado.nombre_completo);
                        columns.push("El empleado no cuenta con registro de hoja de vida")
                        dataExperienciaLaborar.push(columns);
                        dataFormacionAcademica.push(columns);
                        dataCapacidades.push(columns);
                        dataLogros.push(columns);
                        columns = []
                    }

                }


                let formacionAcademica = "Formación Académica";
                let experienciaLaborar = "Experiencia Laborar";
                let capacitaciones = "Capacitaciones";
                let logros = "Logros";
                let wb = new Workbook();
                /* add worksheet to workbook */
                wb.SheetNames.push(formacionAcademica);
                wb.SheetNames.push(experienciaLaborar);
                wb.SheetNames.push(capacitaciones);
                wb.SheetNames.push(logros);
                ws = sheet_from_array_of_arrays(dataFormacionAcademica);
                wb.Sheets[formacionAcademica] = ws;
                ws = sheet_from_array_of_arrays(dataExperienciaLaborar);
                wb.Sheets[experienciaLaborar] = ws;
                ws = sheet_from_array_of_arrays(dataCapacidades);
                wb.Sheets[capacitaciones] = ws;
                ws = sheet_from_array_of_arrays(dataLogros);
                wb.Sheets[logros] = ws;
                let wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "MATRIZ-HOJAS-DE-VIDA-RRHH.xlsx");
                blockUI.stop();
            }

            $scope.verificarBonoGanadoFijo = function (ficha, tipo) {
                if (tipo == 'ganado') {
                    if (ficha) {
                        $scope.ficha.bono_dias = false;
                        $scope.ficha.horas_extra_dia_campo = false;
                    }
                }
                if (tipo == 'bono') {
                    if (ficha) {
                        $scope.ficha.total_ganado_fijo = false;
                        $scope.ficha.horas_extra_dia_campo = false;
                    }
                }
                if (tipo == 'horasCampo') {
                    if (ficha) {
                        $scope.ficha.total_ganado_fijo = false;
                        $scope.ficha.bono_dias = false;
                    }
                }
            }
            $scope.abrirDialogHistorialFichas = function (empleado) {
                $scope.empleado = empleado
                $scope.obtenerlistaFichasInactivasEmpleado(empleado.id)
                $scope.abrirPopup($scope.idModalHistorialFichas);
            }
            $scope.abrirDialogRolTurnosFichasInactivas = function (ficha) {
                $scope.obtenerlistaRolTurno(ficha.id)
                $scope.edicionFichasInactivas = true
                $scope.abrirPopup($scope.idModalHistorialTurnos);
            }
            $scope.cerrarDialogHistorialFichas = function () {
                $scope.edicionFichasInactivas = false
                $scope.cerrarPopup($scope.idModalHistorialFichas);
            }
            $scope.obtenerlistaFichasInactivasEmpleado = function (empleadoId) {
                blockUI.start()
                var promesa = ListaFichasInactivasEmpleado(empleadoId)
                promesa.then(function (datos) {
                    $scope.empleadosFichasInactivas = datos.fichas
                    blockUI.stop()
                })
            }
            $scope.printIsoDocRopaTrabajo = function (id) {

                var promesa = ObtenerDotacionRopaEmpleado(id)
                promesa.then(function (datosRT) {
                    datosRT = datosRT.dotacion;
                    convertUrlToBase64Image($scope.usuario.empresa.imagen, async function (imagenEmpresa) {

                        blockUI.start();
                        var doc = new PDFDocument({ size: 'letter', margins: { top: 57, bottom: 10, left: 57, right: 43 }, compress: false });
                        var stream = doc.pipe(blobStream());
                        await $scope.registrarFuentePdfKit(doc, '../../../assets/fonts/bookman-old-style.ttf', 'Bookman');
                        await $scope.registrarFuentePdfKit(doc, '../../../assets/fonts/bookman-old-style-bold.ttf', 'Bookman-Bold');
                        await $scope.registrarFuentePdfKit(doc, '../../../assets/fonts/bookman-old-style-italic.ttf', 'Bookman-Italic');
                        await $scope.registrarFuentePdfKit(doc, '../../../assets/fonts/bookman-old-style-italic-bold.ttf', 'Bookman-Italic-Bold');

                        let dotacion = datosRT.dotacionItems.filter(item => item.entregado == 1);
                        var y = 220, items = 0, pagina = 1, itemsPorPagina = 30, totalPaginas = Math.ceil((dotacion.length + 10) / itemsPorPagina);
                        if (20 >= dotacion.length) {
                            itemsPorPagina = 20;
                        }
                        else {
                            itemsPorPagina = 25;
                        }
                        $scope.dibujarCabeceraPDFISORT(doc, pagina, totalPaginas, datosRT, imagenEmpresa);
                        doc.font('Bookman-Bold', 8);
                        for (var i = 0; i < dotacion.length && items <= itemsPorPagina; i++) {
                            detalle = dotacion[i];
                            doc.font('Bookman', 6);
                            doc.text(i + 1, 60, y + 5, { width: 31, align: "center" }); doc.rect(91, y, 0, 20).stroke();
                            doc.text(detalle.producto ? detalle.producto.codigo : "", 91, y + 5, { width: 73, align: "center" }); doc.rect(164, y, 0, 20).stroke();
                            doc.text(detalle.producto ? detalle.producto.descripcion : "", 166, y + 5, { width: 153 }); doc.rect(319, y, 0, 20).stroke();
                            doc.text(detalle.producto ? detalle.producto.unidad_medida : "", 319, y + 5, { width: 56, align: "center" }); doc.rect(375, y, 0, 20).stroke();
                            doc.text(detalle.cantidad, 375, y + 5, { width: 56, align: "center" }); doc.rect(431, y, 0, 20).stroke();
                            doc.text(detalle.producto ? detalle.producto.descripcion : '', 434, y + 5, { width: 133 });
                            //let ropaConf = detalle.ropaTrabajo.ropasTrabajo.find(dato => dato.id_ropa_trabajo == detalle.ropaTrabajo.id);
                            //doc.text(ropaConf.meses_uso ? ropaConf.meses_uso : "", 380, y + 8, { width: 100, align: "center" });
                            //doc.text( "", 480, y, {width:100 , align: "center"});
                            doc.font('Bookman', 6);
                            doc.rect(60, y, 507, 20).stroke();
                            y = y + 20;
                            items++;
                            if (items === itemsPorPagina && pagina != totalPaginas) {
                                doc.addPage({ size: 'letter', margins: { top: 57, bottom: 10, left: 57, right: 43 }, compress: false });
                                items = 0;
                                pagina = pagina + 1;
                                y = 60;
                                if (pagina != totalPaginas) itemsPorPagina = 30;
                                if (pagina === totalPaginas) itemsPorPagina = 25;
                                doc.font('Bookman-Bold', 8);
                                doc.text('´', 291, 745);
                                doc.font('Bookman-Italic-Bold', 8);
                                doc.text('Pagina', 284, 745);
                                doc.text(pagina + ' de ' + totalPaginas, 317, 745);
                                doc.font('Bookman', 6).text('Creado: ' + $scope.formatoFechaHora(datosRT.createdAt) + '      ' + 'Actualizado: ' + $scope.formatoFechaHora(datosRT.updatedAt) + '      ' + 'Impreso: ' + $scope.formatoFechaHora() + '       ' + 'Impreso por: ' + $scope.usuario.nombre_usuario, 0, 765, { width: 612, align: 'center' });
                            }
                        }
                        if (datosRT.eliminado != false) {
                            doc.save()
                            doc.font('Times-Roman', 60);
                            doc.rotate(330, { origin: [650, 920] })
                            doc.fillColor('red')
                            doc.text('ANULADO', {
                                width: 380, align: "center"
                            }).fillColor('black')
                            doc.restore()
                        }
                        if (pagina === 1 && dotacion.length > 20 && dotacion.length <= 25) {
                            doc.addPage({ size: [612, 792], margin: 10 });
                            y = 60;
                            items = 0;
                            pagina = pagina + 1;
                        }
                        if (pagina === totalPaginas - 1 && items > 25 && items <= 30) {
                            doc.addPage({ size: [612, 792], margin: 10 });
                            y = 60;
                            items = 0;
                            pagina = pagina + 1;
                        }
                        if (pagina === totalPaginas) {
                            doc.font('Bookman-Bold', 9);
                            doc.text('--------------------------------------------', 60, 670, { width: 162, align: 'center' })
                            doc.text("Responsable de Almacén", 60, 680, { width: 162, align: "center" });
                            doc.text('--------------------------------------------', 232, 670, { width: 162, align: 'center' })
                            doc.text("Responsable de Transporte", 232, 680, { width: 162, align: "center" });
                            doc.text('--------------------------------------------', 404, 670, { width: 162, align: 'center' })
                            doc.text("Responsable de Recepción", 404, 680, { width: 162, align: "center" });
                            doc.font('Bookman-Bold', 8);
                            doc.text('´', 291, 745);
                            doc.font('Bookman-Italic-Bold', 8);
                            doc.text('Pagina', 284, 745);
                            doc.text(pagina + ' de ' + totalPaginas, 317, 745);
                            doc.font('Bookman', 6).text('Creado: ' + $scope.formatoFechaHora(datosRT.createdAt) + '      ' + 'Actualizado: ' + $scope.formatoFechaHora(datosRT.updatedAt) + '      ' + 'Impreso: ' + $scope.formatoFechaHora() + '       ' + 'Impreso por: ' + $scope.usuario.nombre_usuario, 0, 765, { width: 612, align: 'center' });
                        }

                        doc.end();
                        stream.on('finish', function () {
                            var fileURL = stream.toBlobURL('application/pdf');
                            window.open(fileURL, '_blank', 'location=no');
                        });
                        blockUI.stop();
                        $scope.$evalAsync()

                    });

                });
            }


            $scope.dibujarCabeceraPDFISORT = function (doc, pagina, totalPaginas, dato, imagenEmpresa) {
                var configuracionesIso = dato.configuracionesIso;
                var empleado = dato.empleado;
                doc.font('Bookman-Bold', 10);
                if (imagenEmpresa.length > 0 && imagenEmpresa !== "error") {
                    if (imagenEmpresa) {
                        doc.image(imagenEmpresa, 72, 62, { fit: [100, 51] }); //{ fit: [200, 72] } { fit: [100, 72] }
                    }
                }
                //cuadros
                doc.rect(60, 60, 507, 55).stroke();
                doc.rect(164, 88, 403, 0).stroke();
                doc.rect(164, 60, 0, 55).stroke();
                doc.rect(431, 60, 0, 55).stroke();

                doc.text(configuracionesIso ? configuracionesIso.nombre.toUpperCase() : '', 164, 70, { width: 267, align: "center" });
                doc.font('Bookman-Bold', 9);
                doc.text("Código:", 243, 95);
                doc.text(configuracionesIso ? configuracionesIso.codigo : '', 283, 95);
                doc.font('Bookman', 9);
                doc.text("Revisión:", 435, 70);
                doc.text(configuracionesIso ? configuracionesIso.revicion : '', 477, 70);
                doc.text("Fecha de Aprobación", 435, 90, { width: 132 });
                doc.text($scope.fechaATexto(configuracionesIso ? configuracionesIso.fecha_aprobacion : ''), 435, 100, { width: 132 });

                doc.font('Bookman-Bold', 10);
                doc.text("Almacén:    ", 62, 135);
                doc.text("Fecha:      ", 62, 150);
                doc.text("Descripción:", 62, 165);
                doc.text("Nº: ", 380, 135);

                doc.text('------------------------------------------', 125, 138);
                doc.text('------------------------------------------', 125, 153);
                doc.text('-----------------------------------------------------------------------------------------------------------------', 140, 168);
                doc.text('-------------------------------------------', 394, 138);
                doc.font('Bookman', 9);
                doc.text(dato.almacen ? dato.almacen.nombre : '', 128, 135);
                doc.text(dato.fecha ? fechaATexto(dato.fecha) : '', 128, 150);
                var desc = [];
                if (empleado.persona) desc.push(empleado.persona.nombres ? (empleado.persona.apellido_paterno ? (empleado.persona.apellido_materno ? empleado.persona.nombres + ' ' + empleado.persona.apellido_paterno + ' ' + empleado.persona.apellido_materno : empleado.persona.nombres + ' ' + empleado.persona.apellido_paterno) : empleado.persona.nombres) : 'SIN NOMBRE');
                if (empleado.campo) desc.push(empleado.campo.nombre.toUpperCase());
                let cargo = dato.dotacionItems[0] ? dato.dotacionItems[0].cargo ? dato.dotacionItems[0].cargo.nombre : '' : ''
                if (cargo) desc.push(cargo.charAt(0).toUpperCase() + cargo.slice(1).toLowerCase());
                if (desc.join(', ').length > 0) doc.text(desc.join(', ').length <= 76 ? desc.join(', ') + '.' : desc.join(', ').slice(0, 76) + '...', 143, 165);
                if (dato.observacion) doc.text(dato.observacion, 62, 180)
                doc.text(dato.numero_iso_dotacion_ropa != null ? dato.numero_iso_dotacion_ropa : '', 398, 135);
                //detalle
                doc.rect(60, 195, 507, 25).stroke();
                doc.font('Bookman-Bold', 8);
                doc.text("Nº", 60, 203, { width: 31, align: "center" });
                doc.text("Código del Artículo", 91, 198, { width: 73, align: "center" });
                doc.text("Descripción", 164, 203, { width: 155, align: "center" });
                doc.text("Unidad", 319, 203, { width: 56, align: "center" });
                doc.text("Cantidad", 375, 203, { width: 56, align: "center" });
                doc.text("Observaciones", 431, 203, { width: 136, align: "center" });

                //tabla
                doc.rect(91, 195, 0, 25).stroke();
                doc.rect(164, 195, 0, 25).stroke();
                doc.rect(319, 195, 0, 25).stroke();
                doc.rect(375, 195, 0, 25).stroke();
                doc.rect(431, 195, 0, 25).stroke();

                if (pagina != totalPaginas) {
                    doc.font('Bookman-Bold', 8);
                    doc.text('´', 291, 745);
                    doc.font('Bookman-Italic-Bold', 8);
                    doc.text('Pagina', 284, 745);
                    doc.text(pagina + ' de ' + totalPaginas, 317, 745);
                    doc.font('Bookman', 6).text('Creado: ' + $scope.formatoFechaHora(dato.createdAt) + '      ' + 'Actualizado: ' + $scope.formatoFechaHora(dato.updatedAt) + '      ' + 'Impreso: ' + $scope.formatoFechaHora() + '       ' + 'Impreso por: ' + $scope.usuario.nombre_usuario, 0, 765, { width: 612, align: 'center' });
                }
            };

            $scope.getProductosRopaTrabajo = function (item) {

                return $filter('filter')($scope.productosRopaTrabajo, { id_subgrupo: item.id_ropa_trabajo });
            }

            $scope.getProductoRopaTrabajoPrimero = function (item) {
                if ($scope.productosRopaTrabajo) {
                    var filtroprimero = $filter('filter')($scope.productosRopaTrabajo, { id_subgrupo: item.id_ropa_trabajo });
                    item.producto = filtroprimero[0];
                    if (item.producto) {
                        $scope.calularInventarioItem(item);
                    }

                    return filtroprimero[0];
                } else {
                    return null;
                }


            }

            $scope.abrirNuevoOtrosBonos = function (empleado) {
                if (empleado.activo) {
                    if (empleado.fecha_inicio) {

                        $scope.empleado = empleado
                        var fecha = new Date()
                        $scope.otroBono = { fecha: $scope.fechaATexto(fecha) }
                        $scope.abrirPopup($scope.idModalOtrosBonos);
                    }
                    else {
                        SweetAlert.swal("", "No cuenta con ficha actualmente, crear ficha empleado!", "warning");
                    }
                }
            }
            $scope.cerrarDialogOtrosBonos = function () {
                $scope.cerrarPopup($scope.idModalOtrosBonos);
            }
            $scope.abrirDialogHistorialOtrosBonos = function () {
                $scope.filtroBonos = { inicio: 0, fin: 0, empleado: $scope.empleado.id, paginado: 1 }
                $scope.paginatorBonos = Paginator();
                $scope.paginatorBonos.column = "fecha";
                $scope.paginatorBonos.direction = "asc";
                $scope.paginatorBonos.itemsPerPage = "10";
                $scope.paginatorBonos.callBack = $scope.obtenerListaBonosEmpresaPaciente;
                $scope.paginatorBonos.getSearch("", $scope.filtroBonos, null);
                $scope.abrirPopup($scope.idModalHistorialOtrosBonos);
            }
            $scope.cerrarDialogHistorialOtrosBonos = function () {
                $scope.cerrarPopup($scope.idModalHistorialOtrosBonos);
            }

            $scope.guardarOtrosBonos = async (otroBono) => {
                try {
                    if (otroBono.id) {
                        return $scope.actualizarOtrosBonos(otroBono)
                    }
                    otroBono.fecha = new Date($scope.convertirFecha(otroBono.fecha))
                    otroBono.id_ficha = $scope.empleado.id_ficha
                    let res = await CrearOtrosBonos($scope.empleado.id, otroBono)
                    $scope.otroBono = {}
                    SweetAlert.swal("Guardado!", res.mensaje, "success");
                    $scope.cerrarDialogOtrosBonos()
                    $scope.$evalAsync()
                } catch (error) {
                    console.log(error)
                }
            }

            $scope.vefificarRegistrofechaPLS = async (otroBono) => {
                try {
                    let bool = await $scope.checkEditDeleteOtroBono($scope.convertirFecha(otroBono.fecha))
                    otroBono.fecha = bool ? $scope.fechaATexto(new Date()) : otroBono.fecha;
                    if (bool) {
                        SweetAlert.swal("Advertencia!", "Existe registro de planilla de sueldo en el mes seleccionado, no se puede generar bonos con ese mes", "warning");
                    }
                } catch (error) {
                    console.log(error)
                }
            }
            $scope.checkEditDeleteOtroBono = async (fechaOtroBono) => {
                try {
                    let fecha = new Date(fechaOtroBono)
                    let res = await VerificarFechaPlanillaSueldo(fecha.getMonth(), fecha.getFullYear())
                    let bool = res.registro ? true : false
                    return bool
                } catch (error) {
                    console.log(error)
                }
            }
            $scope.editarBono = (otroBono) => {
                $scope.otroBono = otroBono
                $scope.otroBono.fecha = $scope.fechaATexto(new Date(otroBono.fecha))
                $scope.abrirPopup($scope.idModalOtrosBonos);
                $scope.cerrarDialogHistorialOtrosBonos()
            }
            $scope.actualizarOtrosBonos = async function (otroBono) {
                try {
                    otroBono.fecha = new Date($scope.convertirFecha(otroBono.fecha))
                    let res = await ActulizarOtrosBonos($scope.empleado.id, otroBono)
                    $scope.otroBono = {}
                    SweetAlert.swal("Actualizado!", res.mensaje, "success");
                    $scope.cerrarDialogOtrosBonos()
                    $scope.$evalAsync()
                } catch (error) {
                    console.log(error)
                }
            }
            $scope.eliminarBono = (otroBono) => {
                SweetAlert.swal({
                    title: "¿Esta seguro de eliminar el registro?",
                    text: "",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si',
                    cancelButtonText: "No"
                }).then(async (result) => {
                    try {
                        if (result.value) {
                            otroBono.eliminado = true
                            let res = await ActulizarOtrosBonos($scope.empleado.id, otroBono);
                            SweetAlert.swal("Actualizado!", res.mensaje, "success");
                        }
                    } catch (error) {
                        console.log(error)
                    }
                });
            }
            $scope.comprobarSiFecha = function (value) {
                var dateWrapper = new Date(value);
                if (dateWrapper != 'Invalid Date' && dateWrapper.toISOString() == value) {
                    return $scope.fechaATexto(value);
                    // return value;
                } else {
                    return value;
                    // return $scope.fechaATexto(value);
                }
                // return !isNaN(dateWrapper.getDate());
            }

            $scope.abrirDialogLugarSeguroSaludEdicion = function (tipo) {
                $scope.tipo_edicion = tipo;
                $scope.clase = {};
                $scope.abrirPopup($scope.idModalLugarSeguroSaludEdicion);
            }

            $scope.cerrarDialogLugarSeguroSaludEdicion = function () {
                $scope.cerrarPopup($scope.idModalLugarSeguroSaludEdicion);
            }

            $scope.guardarLugarSeguroSaludEdicion = function (tipo) {
                blockUI.start();
                Tipos.update({ id_tipo: tipo.id }, tipo, function (res) {
                    var promesa = ClasesTipo(tipo.nombre_corto);
                    promesa.then(function (entidad) {
                        $scope.tipo_edicion = entidad
                        blockUI.stop();
                        $scope.cerrarDialogLugarSeguroSaludEdicion();
                        $scope.mostrarMensaje('Guardado Exitosamente!');
                    });
                });
            }
            $scope.abrirDialogNuevoAnticipoExtraordinario = function (empleado) {
                if (empleado.activo) {
                    $scope.empleado = empleado
                    if (empleado.haber_basico) {
                        $scope.abrirPopup($scope.idModalNuevoAnticipoExtraordinario);
                    }
                    else {
                        $timeout(function () {
                            $scope.$apply(function () {
                                $scope.mostrarMensaje("No cuenta con haber basico actualizar ficha empleado!")
                            });
                        }, 200);
                    }
                }
            }
            $scope.generarExcelEmpleadosAnticipos = function (lista) {
                // blockUI.start();
                if (!$scope.listaEmpleadosAnticipos) {
                    $scope.listaEmpleadosAnticipos = lista.map(empleado => empleado)
                    const empleado = $scope.listaEmpleadosAnticipos.pop()
                    if (!$scope.reporteExcelEmpleadosAnticipos) $scope.reporteExcelEmpleadosAnticipos = [["N°", "EMPLEADO",
                        "FECHA", "DETALLE", "ANTICIPO EXTRAORDINARIO", "ANTICIPO EXTRAORDINARIO", "TOTAL ANTICIPO"]];
                    $scope.anticipo_ordinaroOextra = 0
                    const filtro = { inicio: new Date($scope.filtroAnticipo.fecha_inicial.split('/').reverse().join('-') + ' 00:00:00'), fin: new Date($scope.filtroAnticipo.fecha_final.split('/').reverse().join('-') + ' 23:59:59'), nombre: "EXTRAORDI", id_empresa: $scope.usuario.id_empresa }
                    const promesa = ListaAnticiposEmpleado(filtro, 0)
                    promesa.then((datos) => {
                        const anticipos = { data: [], totalOrdinario: 0, totalExtraOrdinario: 0 }
                        let salario_base_antiguedad = datos.parametros.salario_base_antiguedad
                        let de0a1 = datos.parametros.antiguedad_cero_uno
                        let de2a4 = datos.parametros.antiguedad_dos_cuatro
                        let de5a7 = datos.parametros.antiguedad_cinco_siete
                        let de8a10 = datos.parametros.antiguedad_ocho_diez
                        let de11a14 = datos.parametros.antiguedad_once_catorce
                        let de15a19 = datos.parametros.antiguedad_quice_diecinueve
                        let de20a24 = datos.parametros.antiguedad_veinte_veinticuatro
                        let de25ainfinito = datos.parametros.antiguedad_mas_veinticinco
                        let bonoAntiguedad = 0;
                        if (datos.anticipos.length > 0) {
                            for (let k = 0; k < datos.anticipos.length; k++) {
                                if (datos.anticipos[k].tipoAnticipo.nombre_corto != filtro.nombre) {
                                    anticipos.totalOrdinario += datos.anticipos[k].monto
                                    datos.anticipos[k].es_ordinario = true
                                    anticipos.data.push(datos.anticipos[k])
                                } else {
                                    anticipos.totalExtraOrdinario += datos.anticipos[k].monto
                                    datos.anticipos[k].es_ordinario = false
                                    anticipos.data.push(datos.anticipos[k])
                                }
                            }
                            for (let k = 0; k < anticipos.data.length; k++) {
                                let ficha = anticipos.data[k].empleado.empleadosFichas[(anticipos.data[k].empleado.empleadosFichas.length - 1)]
                                let antiguedad = calculateAge(ficha.fecha_inicio);
                                if (!ficha.tipoPersonal) {
                                    return $scope.mensaje('No se puede calcular. Faltan datos del empleado : Tipo de personal : "Oficina" / "Campo"')
                                }
                                if (antiguedad >= 0 && antiguedad <= 1) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de0a1) / 100)
                                } else if (antiguedad >= 2 && antiguedad <= 4) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de2a4) / 100)
                                } else if (antiguedad >= 5 && antiguedad <= 7) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de5a7) / 100)
                                } else if (antiguedad >= 8 && antiguedad <= 10) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de8a10) / 100)
                                } else if (antiguedad >= 11 && antiguedad <= 14) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de11a14) / 100)
                                } else if (antiguedad >= 15 && antiguedad <= 19) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de15a19) / 100)
                                } else if (antiguedad >= 20 && antiguedad <= 24) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de20a24) / 100)
                                } else if (antiguedad > 25 && antiguedad < 100) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de25ainfinito) / 100)
                                }
                                if (!ficha.tipoPersonal) {
                                    return $scope.mensaje('No se puede calcular. Faltan datos del empleado : Tipo de personal : "Oficina" / "Campo"')
                                }
                                if (ficha.tipoPersonal.nombre.toLowerCase() == "campo") {
                                    anticipos.promedioPorAnticipoAnterior = ficha.haber_basico * 2 + bonoAntiguedad;
                                    anticipos.data[k].promedioPorAnticipo = ficha.haber_basico * 2 + bonoAntiguedad;
                                } else {
                                    //Oficina = SB + ((SB/120)*HE parámetro)+ BA
                                    if (ficha.horas_extra && ficha.horasExtraOrdiniarias.length > 0) {
                                        let he = ficha.horasExtraOrdiniarias.filter((hora) => (new Date(hora.fecha) < new Date() && new Date(hora.fecha) > (new Date().setMonth(new Date().getMonth() - 1))))
                                        if (he.length > 0) {
                                            anticipos.data[k].promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                            anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                        } else {
                                            anticipos.data[k].promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                            anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                        }
                                    } else {
                                        anticipos.data[k].promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                        anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                    }
                                }
                                anticipos.data[k]._30porciento = (anticipos.data[k].promedioPorAnticipo * 0.30)
                                anticipos._30porcientoAnterior = (anticipos.promedioPorAnticipoAnterior * 0.30)
                            }
                        } else {
                            let ficha = datos.empleado.empleadosFichas[(datos.empleado.empleadosFichas.length - 1)]
                            let antiguedad = calculateAge(ficha.fecha_inicio);

                            if (antiguedad >= 0 && antiguedad <= 1) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de0a1) / 100)
                            } else if (antiguedad >= 2 && antiguedad <= 4) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de2a4) / 100)
                            } else if (antiguedad >= 5 && antiguedad <= 7) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de5a7) / 100)
                            } else if (antiguedad >= 8 && antiguedad <= 10) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de8a10) / 100)
                            } else if (antiguedad >= 11 && antiguedad <= 14) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de11a14) / 100)
                            } else if (antiguedad >= 15 && antiguedad <= 19) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de15a19) / 100)
                            } else if (antiguedad >= 20 && antiguedad <= 24) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de20a24) / 100)
                            } else if (antiguedad >= 25 && antiguedad < 100) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de25ainfinito) / 100)
                            }
                            if (!ficha.tipoPersonal) {
                                return $scope.mostrarMensaje('No se puede calcular. Faltan datos del empleado : Tipo de personal : "Oficina" / "Campo"')
                            }
                            if (ficha.tipoPersonal.nombre.toLowerCase() == "campo") {
                                anticipos.promedioPorAnticipoAnterior = ficha.haber_basico * 2 + bonoAntiguedad;
                                anticipos.promedioPorAnticipo = ficha.haber_basico * 2 + bonoAntiguedad;
                            } else {
                                //Oficina = SB + ((SB/120)*HE parámetro)+ BA
                                if (ficha.horas_extra && ficha.horasExtraOrdiniarias.length > 0) {
                                    let he = ficha.horasExtraOrdiniarias.filter((hora) => (new Date(hora.fecha) < new Date() && new Date(hora.fecha) > (new Date().setMonth(new Date().getMonth() - 1))))
                                    if (he.length > 0) {
                                        anticipos.promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                        anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                    } else {
                                        anticipos.promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                        anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                    }
                                } else {
                                    anticipos.promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                    anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                }
                            }
                            anticipos._30porciento = (anticipos.promedioPorAnticipo * 0.30)
                            anticipos._30porcientoAnterior = (anticipos.promedioPorAnticipoAnterior * 0.30)
                        }
                        if (anticipos.data.length > 0) {
                            for (let index = 0; index < anticipos.data.length; index++) {
                                const anticipo = anticipos.data[index];
                                const column = []
                                column.push((index + 1) + '')
                                column.push(empleado.nombre_completo)
                                column.push($scope.formatoFechaPDF(anticipo.fecha))
                                column.push(anticipo.detalle && anticipo.detalle || 'Ordinario')
                                // column.push(formatoFechaPDF(anticipo.promedioPorAnticipo))
                                // column.push(formatoFechaPDF(anticipo._30porciento))
                                column.push((!anticipo.es_ordinario ? anticipo.monto : 0).toFixed(2))
                                column.push((anticipo.es_ordinario ? anticipo.monto : 0).toFixed(2))
                                column.push(anticipo.monto.toFixed(2))
                                // column.push(formatoFechaPDF((anticipo.salario_basico-anticipo.monto)))
                                $scope.reporteExcelEmpleadosAnticipos.push(column)
                            }
                        }
                        // else{
                        //     // const anticipo = anticipos.data[index];
                        //         const column = []
                        //         column.push('1')
                        //         column.push(empleado.nombre_completo)
                        //         column.push($scope.formatoFechaPDF(anticipos.fecha))
                        //         column.push(anticipos.detalle && anticipos.detalle || 'Ordinario')
                        //         // column.push(formatoFechaPDF(anticipo.promedioPorAnticipo))
                        //         // column.push(formatoFechaPDF(anticipo._30porciento))
                        //         column.push((0).toFixed(2))
                        //         column.push((0).toFixed(2))
                        //         column.push((anticipos.totalOrdinario + anticipos.totalExtraOrdinario).toFixed(2))
                        //         // column.push(formatoFechaPDF((anticipo.salario_basico-anticipo.monto)))
                        //         $scope.reporteExcelEmpleadosAnticipos.push(column)
                        // }

                        if ($scope.listaEmpleadosAnticipos.length > 0) {
                            $scope.generarExcelEmpleadosAnticipos($scope.listaEmpleadosAnticipos)
                        }
                        // else {
                        //     const ws_name = "SheetJS";
                        //     const wb = new Workbook(), ws = sheet_from_array_of_arrays($scope.reporteExcelEmpleadosAnticipos);
                        //     /* add worksheet to workbook */
                        //     wb.SheetNames.push(ws_name);
                        //     wb.Sheets[ws_name] = ws;
                        //     const wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                        //     saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-RRHH-ANTICIPOS.xlsx");
                        //     $scope.anticipos = []
                        //     $scope.listaEmpleadosAnticipos = undefined
                        //     $scope.reporteExcelEmpleadosAnticipos = undefined
                        //     blockUI.stop();
                        // }
                    }).catch((err) => {
                        const men = (err.stack !== undefined && err.stack !== null) ? err.stack : 'se perdió la conexión.'
                        $scope.mostrarMensaje('Se produjo un error! > ' + men)
                    })
                } else {
                    const empleado = $scope.listaEmpleadosAnticipos.pop()
                    if (!$scope.reporteExcelEmpleadosAnticipos) $scope.reporteExcelEmpleadosAnticipos = [["N°", "EMPLEADO",
                        "FECHA", "DETALLE", "ANTICIPO EXTRAORDINARIO", "ANTICIPO EXTRAORDINARIO", "TOTAL ANTICIPO"]];
                    $scope.anticipo_ordinaroOextra = 0
                    const filtro = { inicio: $scope.filtroAnticipo.fecha_inicial, fin: $scope.filtroAnticipo.fecha_final, nombre: "EXTRAORDI", id_empresa: $scope.usuario.id_empresa }
                    const promesa = ListaAnticiposEmpleado(filtro, empleado.id_ficha)
                    promesa.then((datos) => {
                        const anticipos = { data: [], totalOrdinario: 0, totalExtraOrdinario: 0 }
                        let salario_base_antiguedad = datos.parametros.salario_base_antiguedad
                        let de0a1 = datos.parametros.antiguedad_cero_uno
                        let de2a4 = datos.parametros.antiguedad_dos_cuatro
                        let de5a7 = datos.parametros.antiguedad_cinco_siete
                        let de8a10 = datos.parametros.antiguedad_ocho_diez
                        let de11a14 = datos.parametros.antiguedad_once_catorce
                        let de15a19 = datos.parametros.antiguedad_quice_diecinueve
                        let de20a24 = datos.parametros.antiguedad_veinte_veinticuatro
                        let de25ainfinito = datos.parametros.antiguedad_mas_veinticinco
                        let bonoAntiguedad = 0;
                        if (datos.anticipos.length > 0) {
                            for (let k = 0; k < datos.anticipos.length; k++) {
                                if (datos.anticipos[k].tipoAnticipo.nombre_corto != filtro.nombre) {
                                    anticipos.totalOrdinario += datos.anticipos[k].monto
                                    datos.anticipos[k].es_ordinario = true
                                    anticipos.data.push(datos.anticipos[k])
                                } else {
                                    anticipos.totalExtraOrdinario += datos.anticipos[k].monto
                                    datos.anticipos[k].es_ordinario = false
                                    anticipos.data.push(datos.anticipos[k])
                                }
                            }
                            for (let k = 0; k < anticipos.data.length; k++) {
                                let ficha = anticipos.data[k].empleado.empleadosFichas[(anticipos.data[k].empleado.empleadosFichas.length - 1)]
                                let antiguedad = calculateAge(ficha.fecha_inicio);
                                if (!ficha.tipoPersonal) {
                                    return $scope.mensaje('No se puede calcular. Faltan datos del empleado : Tipo de personal : "Oficina" / "Campo"')
                                }
                                if (antiguedad >= 0 && antiguedad <= 1) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de0a1) / 100)
                                } else if (antiguedad >= 2 && antiguedad <= 4) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de2a4) / 100)
                                } else if (antiguedad >= 5 && antiguedad <= 7) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de5a7) / 100)
                                } else if (antiguedad >= 8 && antiguedad <= 10) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de8a10) / 100)
                                } else if (antiguedad >= 11 && antiguedad <= 14) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de11a14) / 100)
                                } else if (antiguedad >= 15 && antiguedad <= 19) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de15a19) / 100)
                                } else if (antiguedad >= 20 && antiguedad <= 24) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de20a24) / 100)
                                } else if (antiguedad > 25 && antiguedad < 100) {
                                    bonoAntiguedad = ((salario_base_antiguedad * 3 * de25ainfinito) / 100)
                                }
                                if (!ficha.tipoPersonal) {
                                    return $scope.mensaje('No se puede calcular. Faltan datos del empleado : Tipo de personal : "Oficina" / "Campo"')
                                }
                                if (ficha.tipoPersonal.nombre.toLowerCase() == "campo") {
                                    anticipos.promedioPorAnticipoAnterior = ficha.haber_basico * 2 + bonoAntiguedad;
                                    anticipos.data[k].promedioPorAnticipo = ficha.haber_basico * 2 + bonoAntiguedad;
                                } else {
                                    //Oficina = SB + ((SB/120)*HE parámetro)+ BA
                                    if (ficha.horas_extra && ficha.horasExtraOrdiniarias.length > 0) {
                                        let he = ficha.horasExtraOrdiniarias.filter((hora) => (new Date(hora.fecha) < new Date() && new Date(hora.fecha) > (new Date().setMonth(new Date().getMonth() - 1))))
                                        if (he.length > 0) {
                                            anticipos.data[k].promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                            anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                        } else {
                                            anticipos.data[k].promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                            anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                        }
                                    } else {
                                        anticipos.data[k].promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                        anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                    }
                                }
                                anticipos.data[k]._30porciento = (anticipos.data[k].promedioPorAnticipo * 0.30)
                                anticipos._30porcientoAnterior = (anticipos.promedioPorAnticipoAnterior * 0.30)
                            }
                        } else {
                            let ficha = datos.empleado.empleadosFichas[(datos.empleado.empleadosFichas.length - 1)]
                            let antiguedad = calculateAge(ficha.fecha_inicio);

                            if (antiguedad >= 0 && antiguedad <= 1) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de0a1) / 100)
                            } else if (antiguedad >= 2 && antiguedad <= 4) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de2a4) / 100)
                            } else if (antiguedad >= 5 && antiguedad <= 7) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de5a7) / 100)
                            } else if (antiguedad >= 8 && antiguedad <= 10) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de8a10) / 100)
                            } else if (antiguedad >= 11 && antiguedad <= 14) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de11a14) / 100)
                            } else if (antiguedad >= 15 && antiguedad <= 19) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de15a19) / 100)
                            } else if (antiguedad >= 20 && antiguedad <= 24) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de20a24) / 100)
                            } else if (antiguedad >= 25 && antiguedad < 100) {
                                bonoAntiguedad = ((salario_base_antiguedad * 3 * de25ainfinito) / 100)
                            }
                            if (!ficha.tipoPersonal) {
                                return $scope.mostrarMensaje('No se puede calcular. Faltan datos del empleado : Tipo de personal : "Oficina" / "Campo"')
                            }
                            if (ficha.tipoPersonal.nombre.toLowerCase() == "campo") {
                                anticipos.promedioPorAnticipoAnterior = ficha.haber_basico * 2 + bonoAntiguedad;
                                anticipos.promedioPorAnticipo = ficha.haber_basico * 2 + bonoAntiguedad;
                            } else {
                                //Oficina = SB + ((SB/120)*HE parámetro)+ BA
                                if (ficha.horas_extra && ficha.horasExtraOrdiniarias.length > 0) {
                                    let he = ficha.horasExtraOrdiniarias.filter((hora) => (new Date(hora.fecha) < new Date() && new Date(hora.fecha) > (new Date().setMonth(new Date().getMonth() - 1))))
                                    if (he.length > 0) {
                                        anticipos.promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                        anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * he[0].horas) + bonoAntiguedad;
                                    } else {
                                        anticipos.promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                        anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                    }
                                } else {
                                    anticipos.promedioPorAnticipo = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                    anticipos.promedioPorAnticipoAnterior = ficha.haber_basico + ((ficha.haber_basico / 120) * 1) + bonoAntiguedad;
                                }
                            }
                            anticipos._30porciento = (anticipos.promedioPorAnticipo * 0.30)
                            anticipos._30porcientoAnterior = (anticipos.promedioPorAnticipoAnterior * 0.30)
                        }
                        if (anticipos.data.length > 0) {
                            for (let index = 0; index < anticipos.data.length; index++) {
                                const anticipo = anticipos.data[index];
                                const column = []
                                column.push((index + 1) + '')
                                column.push(empleado.nombre_completo)
                                column.push($scope.formatoFechaPDF(anticipo.fecha))
                                column.push(anticipo.detalle && anticipo.detalle || 'Ordinario')
                                // column.push(formatoFechaPDF(anticipo.promedioPorAnticipo))
                                // column.push(formatoFechaPDF(anticipo._30porciento))
                                column.push((!anticipo.es_ordinario ? anticipo.monto : 0).toFixed(2))
                                column.push((anticipo.es_ordinario ? anticipo.monto : 0).toFixed(2))
                                column.push(anticipo.monto.toFixed(2))
                                // column.push(formatoFechaPDF((anticipo.salario_basico-anticipo.monto)))
                                $scope.reporteExcelEmpleadosAnticipos.push(column)
                            }
                        }
                        // else{
                        //     // const anticipo = anticipos.data[index];
                        //         const column = []
                        //         column.push('1')
                        //         column.push(empleado.nombre_completo)
                        //         column.push($scope.formatoFechaPDF(anticipos.fecha))
                        //         column.push(anticipos.detalle && anticipos.detalle || 'Ordinario')
                        //         // column.push(formatoFechaPDF(anticipo.promedioPorAnticipo))
                        //         // column.push(formatoFechaPDF(anticipo._30porciento))
                        //         column.push((0).toFixed(2))
                        //         column.push((0).toFixed(2))
                        //         column.push((anticipos.totalOrdinario + anticipos.totalExtraOrdinario).toFixed(2))
                        //         // column.push(formatoFechaPDF((anticipo.salario_basico-anticipo.monto)))
                        //         $scope.reporteExcelEmpleadosAnticipos.push(column)
                        // }

                        if ($scope.listaEmpleadosAnticipos.length > 0) {
                            $scope.generarExcelEmpleadosAnticipos($scope.listaEmpleadosAnticipos)
                        } else {
                            // $scope.reporteExcelEmpleadosAnticipos.sort(orberByFechafactura);
                            const ws_name = "SheetJS";
                            const wb = new Workbook(), ws = sheet_from_array_of_arrays($scope.reporteExcelEmpleadosAnticipos);
                            /* add worksheet to workbook */
                            wb.SheetNames.push(ws_name);
                            wb.Sheets[ws_name] = ws;
                            const wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                            saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-RRHH-ANTICIPOS.xlsx");
                            $scope.anticipos = []
                            $scope.listaEmpleadosAnticipos = undefined
                            $scope.reporteExcelEmpleadosAnticipos = undefined
                            blockUI.stop();
                        }
                    }).catch((err) => {
                        const men = (err.stack !== undefined && err.stack !== null) ? err.stack : 'se perdió la conexión.'
                        $scope.mostrarMensaje('Se produjo un error! > ' + men)
                    })
                }
            }
            $scope.abrirModalFechasAnticiposExcel = () => {
                $scope.abrirPopup($scope.idmodalFechasAnticipoExcel);
            }
            function orberByFechafactura(anticipoA, anticipoB) {
                if (anticipoB === undefined || anticipoB === null) return 1;
                // const fech = a.fecha_factura.getTime() - anticipoB.fecha_factura.getTime()
                if (a.fecha_factura.getDate() === anticipoB.fecha_factura.getDate() &&
                    a.fecha_factura.getMonth() === anticipoB.fecha_factura.getMonth() &&
                    a.fecha_factura.getFullYear() === anticipoB.fecha_factura.getFullYear()) {
                    return a.factura - anticipoB.factura
                }
                return facturA.fecha_factura.getTime() - anticipoB.fecha_factura.getTime()
            }

            $scope.cerrarDialogNuevoAnticipoExtraordinario = function () {
                $scope.dataAE = {};
                $scope.cerrarPopup($scope.idModalNuevoAnticipoExtraordinario);
            }
            $scope.guardarAnticipoExtraoridnario = function (data) {
                $scope.dataAE = data;
                const meses = ["1-ENERO", "2-FEBRERO", "3-MARZO", "4-ABRIL", "5-MAYO", "6-JUNIO", "7-JULIO", "8-AGOSTO", "9-SEPTIEMBRE", "10-OCTUBRE", "11-NOVIEMBRE", "12-DICIEMBRE"];
                $scope.dataAE.id_empleado = $scope.empleado.id;
                $scope.dataAE.salario_basico = $scope.empleado.haber_basico;
                $scope.dataAE.textoClase = "EXTRAORDI";
                var fechaOriginal = $scope.dataAE.fecha;
                let fecha = $scope.dataAE.fecha.split('/');
                let hoy = new Date();
                let fechaFormateada = fecha[2] + '/' + fecha[1] + '/' + fecha[0] + ' ' + hoy.getHours() + ":" + hoy.getMinutes() + ":" + hoy.getSeconds();
                let mesIn = new Date(fechaFormateada).getMonth();
                let anioIn = new Date(fechaFormateada).getFullYear();
                let mesAct = new Date().getMonth();
                let anioAct = new Date().getFullYear();
                $scope.dataAE.fecha = fechaFormateada
                $scope.dataAE.total = $scope.dataAE.monto;
                $scope.dataAE.montoExtraoridnario = $scope.dataAE.monto;
                var planilla = RRHHlistaPlanillaSueldos($scope.usuario.id_empresa, anioIn, meses[mesIn]);
                planilla.then(function (dato) {
                    if (dato.planillas.length == 0) {
                        if (anioIn == anioAct && mesIn > mesAct) {
                            SweetAlert.swal("Anticipo no guardado", "No se guardó debido a que no corresponde al mes vigente", "warning");
                            $scope.dataAE.fecha = fechaOriginal;
                        } else {
                            if (anioIn == anioAct && mesIn == mesAct) {
                                const promesa = NuevoAnticipoEmpleado($scope.empleado.id_ficha, $scope.dataAE)
                                promesa.then(function (data) {
                                    $scope.dataAE = {}
                                    $scope.cerrarDialogNuevoAnticipoExtraordinario()
                                    $scope.obtenerAnticiposExtra($scope.empleado)
                                    $scope.mostrarMensaje(data.mensaje)
                                }).catch((err) => {
                                    const msg = (err.stack !== undefined && err.stack !== null) ? err.stack : (err.message !== undefined && err.message !== null) ? err.message : 'Se perdió la conexión.'
                                    $scope.mostrarMensaje(msg)
                                })
                            }
                            if (anioIn == anioAct && mesIn < mesAct) {
                                SweetAlert.swal({
                                    title: "Esta seguro?",
                                    text: "El registro de anticipo no corresponde al mes vigente",
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Si',
                                    cancelButtonText: "No"
                                }).then(function (result) {
                                    if (result.value) {
                                        const promesa = NuevoAnticipoEmpleado($scope.empleado.id_ficha, $scope.dataAE)
                                        promesa.then(function (data) {
                                            $scope.dataAE = {}
                                            $scope.cerrarDialogNuevoAnticipoExtraordinario()
                                            $scope.obtenerAnticiposExtra($scope.empleado)
                                            $scope.mostrarMensaje(data.mensaje)
                                        }).catch((err) => {
                                            const msg = (err.stack !== undefined && err.stack !== null) ? err.stack : (err.message !== undefined && err.message !== null) ? err.message : 'Se perdió la conexión.'
                                            $scope.mostrarMensaje(msg)
                                        })
                                    } else {
                                        $scope.dataAE.fecha = fechaOriginal;
                                    }
                                });
                            }
                            if (anioIn < anioAct && mesIn > mesAct) {
                                SweetAlert.swal({
                                    title: "Esta seguro?",
                                    text: "El registro de anticipo no corresponde al mes vigente",
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Si',
                                    cancelButtonText: "No"
                                }).then(function (result) {
                                    if (result.value) {
                                        const promesa = NuevoAnticipoEmpleado($scope.empleado.id_ficha, $scope.dataAE)
                                        promesa.then(function (data) {
                                            $scope.dataAE = {}
                                            $scope.cerrarDialogNuevoAnticipoExtraordinario()
                                            $scope.mostrarMensaje(data.mensaje)
                                        }).catch((err) => {
                                            const msg = (err.stack !== undefined && err.stack !== null) ? err.stack : (err.message !== undefined && err.message !== null) ? err.message : 'Se perdió la conexión.'
                                            $scope.mostrarMensaje(msg)
                                        })
                                    } else {
                                        $scope.dataAE.fecha = fechaOriginal;
                                    }
                                });
                            }
                        }
                    } else {
                        SweetAlert.swal("Anticipo no guardado", "No se guardó debido a que la planilla del mes se encuentra cerrada", "warning");
                        $scope.dataAE.fecha = fechaOriginal;
                    }

                })
            }
            /* inicio comprobante desde anticipo */
            $scope.verificarRegistroIndividual = function () {
                $scope.registroIndividual = $scope.registroIndividual == true ? false : true 
            }
            $scope.crearComprobanteDesdeAnticipoPorBanco = function (banco) {
                let datosAnticipos = []
                for (const anticipo of $scope.listaAnticipos) {
                    if (!anticipo.id_asiento_contabilidad && anticipo.ficha.banco.nombre.toUpperCase() === banco.nombre.toUpperCase()) {
                        datosAnticipos.push(anticipo)
                    }
                }
                if (datosAnticipos.length > 0) {
                    let datos = { banco: banco, anticipos: datosAnticipos, registroIndividual: $scope.registroIndividual }
                    $scope.cerrarDialogAnticipoRegular();
                    $scope.crearNuevoComprobanteDesdeAnticipo("AnticiposRegulares",
                        'Registro de comprobante de anticipos regulares del mes ' + $scope.filtroAnticipo.mes.nombre + ' del año ' + $scope.filtroAnticipo.gestion + '. para el banco ' + banco.nombre,
                        datos)
                } else {
                    $scope.mostrarMensaje("No existen registros para procesar.")
                }
            }
            $scope.crearNuevoComprobanteDesdeAnticipo = function (tipo, mensaje, datos) {
                SweetAlert.swal({
                    title: mensaje,
                    icon: "info",
                    allowEscapeKey: false,
                    allowOutsideClick: false,
                    html: '<h5>Generar el comprobante puede tardar varios minutos. se esta recuperando y procesando la información para generar el comprobante.</h5>'
                })
                SweetAlert.showLoading()

                $scope.crearNuevoComprobante(tipo, datos)
            }
            /* fin comprobante desde anticipo */
            /* llamdas atencion */
            $scope.obtenerMotivoLLamadasAtencion = function () {
                blockUI.start();
                var promesa = ClasesTipoEmpresa("RRHH_MLLA", $scope.usuario.id_empresa);
                promesa.then(function (entidad) {
                    $scope.tipoLLamadaAtencion = entidad
                    blockUI.stop();
                });
            }
            $scope.crearRegistroLlamadaatencion = function (empleado) {
                $scope.empleado = empleado
                $scope.abrirModalLlamadaATencion()
            }
            $scope.abrirModalLlamadaATencion = function (dato) {
                $scope.obtenerMotivoLLamadasAtencion();
                if (dato) {
                    $scope.llamadaAtencion = dato
                } else {
                    $scope.llamadaAtencion = { fecha: new Date(), visado: false, eliminado: false, id_ficha: $scope.empleado.id_ficha }
                }
                $scope.filtrarPersonal("")
                $scope.abrirPopup($scope.idModalLlamadaATencion);
            }

            $scope.guardarLLamadaDeAtencion = function () {
                $scope.llamadaAtencion.fecha_solicitud = new Date($scope.convertirFecha($scope.llamadaAtencion.fecha_solicitud))
                $scope.llamadaAtencion.fecha_realizado = $scope.llamadaAtencion.fecha_realizado ? new Date($scope.convertirFecha($scope.llamadaAtencion.fecha_realizado)) : null
                $scope.llamadaAtencion.fecha_entrega = $scope.llamadaAtencion.fecha_realizado ? new Date($scope.convertirFecha($scope.llamadaAtencion.fecha_entrega)) : null
                $scope.llamadaAtencion.fecha_devolucion = $scope.llamadaAtencion.fecha_devolucion ? new Date($scope.convertirFecha($scope.llamadaAtencion.fecha_devolucion)) : null
                let promesa = CrearLlamadaAtencion($scope.usuario.empresa.id, $scope.llamadaAtencion)
                promesa.then(function (res) {
                    if (res.hasErr) return alert(res.mensaje)
                    SweetAlert.swal("", res.mensaje, "success");
                    $scope.cerrarModalLlamadaATencion();
                    $scope.imprimirCartaLLamadaAtencion(res.llamadaAtencion);
                }).catch((err) => {
                    if ($scope.llamadaAtencion.fecha_solicitud) $scope.llamadaAtencion.fecha_solicitud = $scope.formatoFechaPDF($scope.llamadaAtencion.fecha_solicitud);
                    if ($scope.llamadaAtencion.fecha_realizado) $scope.llamadaAtencion.fecha_realizado = $scope.formatoFechaPDF($scope.llamadaAtencion.fecha_realizado);
                    if ($scope.llamadaAtencion.fecha_entrega) $scope.llamadaAtencion.fecha_entrega = $scope.formatoFechaPDF($scope.llamadaAtencion.fecha_entrega);
                    if ($scope.llamadaAtencion.fecha_devolucion) $scope.llamadaAtencion.fecha_devolucion = $scope.formatoFechaPDF($scope.llamadaAtencion.fecha_devolucion);
                    alert(err?.stack ?? 'Se perdió la conexión.');
                })
            }
            $scope.imprimirCartaLLamadaAtencion = (llamadaAtencion) => {
                const doc = new PDFDocument({ size: 'letter', margin: 40, compress: false });//[612, 792] {compress: false},
                const stream = doc.pipe(blobStream());
                const imgDelay = ObtenerImagen($scope.usuario.empresa.imagen)
                let paginas = 1;
                imgDelay.then((imagen) => {
                    if (imagen) doc.image(imagen, 30, 20, { fit: [70, 70] });
                    let y = 35;
                    doc.moveDown(2);
                    doc.font('Helvetica', 10);
                    const fecha = $scope.formatoFechaPDF(llamadaAtencion.fecha_solicitud).split('/');
                    const mes = $scope.meses[parseInt(fecha[1]) - 1].nombre
                    const lugarFecha = $scope.usuario.empresa.departamento.nombre + ', ' + fecha[0] + ' de ' + mes + ' ' + fecha[2]
                    doc.text(lugarFecha, 0, y, { align: 'center' });
                    y += 15;
                    const correlativo_anio = 'RR.HH.- LA - 00' + llamadaAtencion.numero_correlativo + '/' + fecha[2];
                    doc.text(correlativo_anio, 0, y, { align: 'center' });
                    y += 80;
                    const genero = $scope.generos.find(genero => genero.id === llamadaAtencion.ficha.empleado.persona.id_genero);
                    let lexico = 'Señor(a)';
                    if (!genero) {
                        alert('No se pudo obtener el genero de la persona.');
                    } else {
                        if (genero.nombre.toLowerCase() === 'masculino') lexico = 'Señor';
                        if (genero.nombre.toLowerCase() === 'femenino') lexico = 'Señora';
                    }
                    doc.text(lexico, 40, y);
                    y += 15;
                    const empleado = llamadaAtencion?.ficha?.empleado?.persona?.nombre_completo ?? 'Error';
                    doc.text(empleado, 40, y);
                    y += 40;
                    doc.font('Helvetica-Bold', 10);
                    doc.text('Presente.-', 40, y);
                    y += 40;
                    const motivo = llamadaAtencion?.motivo?.nombre ?? 'error';
                    const detalle = llamadaAtencion?.detalle ?? '';
                    doc.text('REF.: LLAMADA DE ATENCIÓN – ' + motivo, 40, y);
                    y += 80;
                    doc.font('Helvetica', 10);
                    const primer_parrafo = 'Mediante la presente, se le hace entrega de una llamada de atención por, ' + motivo + ', ' + detalle + '.';
                    doc.text(primer_parrafo, 40, y);
                    y += 40;
                    const segundo_parrafo = 'La misiva constituye una medida preventiva respecto a futuras faltas que pudiere cometer, recomendándole que no vuelva a incurrir en este tipo de faltas y/o incumplimientos.';
                    doc.text(segundo_parrafo, 40, y);
                    y += 40;
                    const tercer_parrafo = 'Sin otro particular nos despedimos.'
                    doc.text(tercer_parrafo, 40, y);
                    y += 10;
                    doc.text('Atte.', 40, y);
                    y += 120;
                    const firmante = llamadaAtencion?.firmante?.empleado?.persona?.nombre_completo ?? 'Firmante:';
                    doc.text(firmante, 40, y, { width: 266, align:"center" });
                    y += 10;
                    const cargos = llamadaAtencion?.firmante?.cargos?.map(cargo => cargo.cargo.nombre).join(', ') ?? 'Cargo:';
                    doc.text(cargos, 40, y, { width: 266, align:"center" });
                    y += 60;
                    doc.font('Helvetica', 6);
                    doc.text($scope.usuario.nombre_usuario, 40, y);
                    y += 10;
                    doc.text('CC. Arch.', 40, y);
                    if(llamadaAtencion.eliminado){
                        doc.font('Helvetica', 60);
                        doc.rotate(330, { origin: [285, 320] })
                        doc.fillColor('red').fillOpacity(0.6).text('ANULADO', 0, 350, { align: 'center' })
                        doc.restore();
                    }
                    doc.end();
                    stream.on('finish', () => {
                        const fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                })
            }
            $scope.abrirModalHistorialLlamadaATencionEmpleado = function () {
                let filtro = { fecha_inicio2: "", fecha_fin2: "", fecha_inicio: "", fecha_fin: "", tipo_fecha: "", id_ficha: $scope.empleado.id_ficha }
                $scope.obtenerlistaHistorialLlamadaATencion(filtro)
                $scope.abrirPopup($scope.idModalHistorialLlamadaATencionEmpleado);
            }
            $scope.obtenerlistaHistorialLlamadaATencion = function (filtro) {
                $scope.paginatorLlamadasAtencion = Paginator();
                $scope.paginatorLlamadasAtencion.column = "fecha_solicitud";
                $scope.paginatorLlamadasAtencion.direction = "desc";
                $scope.paginatorLlamadasAtencion.itemsPerPage = 10;
                $scope.paginatorLlamadasAtencion.callBack = $scope.obtenerLLlamadasAtencion;
                $scope.filtroLlamadaAtencion = filtro;

                if ($scope.filtroLlamadaAtencion.fecha_inicio && $scope.filtroLlamadaAtencion.fecha_fin) {
                    $scope.filtroLlamadaAtencion.fecha_inicio2 = new Date($scope.convertirFecha($scope.filtroLlamadaAtencion.fecha_inicio))
                    $scope.filtroLlamadaAtencion.fecha_fin2 = new Date($scope.convertirFecha($scope.filtroLlamadaAtencion.fecha_fin))

                } else {
                    $scope.filtroLlamadaAtencion.fecha_inicio2 = ""
                    $scope.filtroLlamadaAtencion.fecha_fin2 = ""
                }
                $scope.paginatorLlamadasAtencion.getSearch("", $scope.filtroLlamadaAtencion, null);
            }
            $scope.obtenerLLlamadasAtencion = function () {
                var promesa = HistorialLlamadaAtencion($scope.paginatorLlamadasAtencion)
                promesa.then(function (dato) {
                    $scope.paginatorLlamadasAtencion.setPages(dato.paginas);
                    $scope.listaLlamadasAtencion = dato.llamadasAtencion
                })
            }
            $scope.abrirModalHistorialLlamadasDeATencion = function () {
                let filtro = { fecha_inicio2: "", fecha_fin2: "", fecha_inicio: "", fecha_fin: "", tipo_fecha: "", id_ficha: "" }
                $scope.obtenerlistaHistorialLlamadaATencion(filtro)
                $scope.abrirPopup($scope.idModalHistorialLlamadasDeATencion);
            }
            $scope.editarLLamadaAtencion = function (datos) {
                $scope.meta = {
                    solicitante: { seleccionado: false },
                    recepcionista: { seleccionado: false },
                    firmante: { seleccionado: false }
                }
                var data = datos.firmante.empleado
                data.empleadosFichas = [delete datos.firmante.empleado]
                datos.firmante = data;
                $scope.llamadaAtencion = datos
                $scope.cerrarModalHistorialLlamadaATencionEmpleado()
                $scope.llamadaAtencion.fecha_solicitud = $scope.fechaATexto($scope.llamadaAtencion.fecha_solicitud)
                $scope.llamadaAtencion.fecha_realizado = $scope.fechaATexto($scope.llamadaAtencion.fecha_realizado)
                $scope.llamadaAtencion.fecha_entrega = $scope.fechaATexto($scope.llamadaAtencion.fecha_entrega)
                $scope.llamadaAtencion.fecha_devolucion = $scope.fechaATexto($scope.llamadaAtencion.fecha_devolucion)
            }
            $scope.eliminarLLamadaAtencion = function (datos) {
                $scope.cerrarModalHistorialLlamadaATencionEmpleado()
                $scope.llamadaAtencion = datos
                $scope.llamadaAtencion.eliminado = true
                $scope.guardarLLamadaDeAtencion()
                let filtro = { fecha_inicio2: "", fecha_fin2: "", fecha_inicio: "", fecha_fin: "", tipo_fecha: "", id_ficha: $scope.empleado.id_ficha }
                $scope.obtenerlistaHistorialLlamadaATencion(filtro)
            }
            $scope.cerrarModalLlamadaATencion = function () {
                $scope.cerrarPopup($scope.idModalLlamadaATencion);
            }
            $scope.cerrarModalHistorialLlamadaATencionEmpleado = function () {
                $scope.cerrarPopup($scope.idModalHistorialLlamadaATencionEmpleado);
            }
            $scope.cerrarModalHistorialLlamadasDeATencion = function () {
                $scope.cerrarPopup($scope.idModalHistorialLlamadasDeATencion);
            }
            $scope.buscarPersonal = function (query, tipo) {
                if (!$scope.meta) {
                    $scope.meta = {
                        solicitante: { busqueda: query, seleccionado: false },
                        recepcionista: { busqueda: query, seleccionado: false },
                        firmante: { busqueda: query, seleccionado: false }
                    }
                }
                if (query != "" && query != undefined) {
                    var promesa = $filter('filter')($scope.todoPersonal, query);
                    switch (tipo) {
                        case 1:
                            $scope.meta.solicitante.encontrado = promesa.length > 0 ? true : false
                            break;
                        case 2:
                            $scope.meta.recepcionista.encontrado = promesa.length > 0 ? true : false
                            break;
                        case 3:
                            $scope.meta.firmante.encontrado = promesa.length > 0 ? true : false
                            break;
                        default:
                            console.log('Error: tipo desconocido');
                            break;
                    }
                    return promesa;
                }
            }

            $scope.filtrarPersonal = function (query) {
                if ($scope.todoPersonal !== undefined) {
                    $scope.personalProcesado = $filter('filter')($scope.todoPersonal, query);
                } else {
                    var prom = ObtenerTodoPersonal($scope.usuario.empresa.id)
                    prom.then(function (personal) {
                        $scope.todoPersonal = personal.personal
                        $scope.personalProcesado = personal.personal
                        if (personal.mensaje !== undefined) {
                            $scope.mostrarMensaje(personal.mensaje)
                        }
                    }, function (err) {
                        $scope.mostrarMensaje("Se perdió la conexión.")
                    })
                }
            }
            $scope.establecerPersonal = function (personal, model, label, event, tipo) {
                switch (tipo) {
                    case 1:
                        if (personal.id) $scope.llamadaAtencion.solicitante = personal
                        $scope.meta.solicitante.encontrado = personal.id ? true : false
                        $scope.meta.solicitante.seleccionado = personal.id ? true : false
                        break;
                    case 2:
                        if (personal.id) $scope.llamadaAtencion.recepcionista = personal
                        $scope.meta.recepcionista.encontrado = personal.id ? true : false
                        $scope.meta.recepcionista.seleccionado = personal.id ? true : false
                        break;
                    case 3:
                        if (personal.id) $scope.llamadaAtencion.firmante = personal
                        $scope.meta.firmante.encontrado = personal.id ? true : false
                        $scope.meta.firmante.seleccionado = personal.id ? true : false
                        break;
                    default:
                        console.log('Error al establecer personal: tipo desconocido');
                        break;
                }
            }
            $scope.eliminarRegistroLLamadaAtencion = function (datos) {
                // abrir condicion mensaje ==========
                SweetAlert.swal({
                    title: "¿Esta seguro de eliminar el detalle?",
                    text: "",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si',
                    cancelButtonText: "No"
                }).then(function (result) {
                    if (result.value) {
                        $scope.eliminarLLamadaAtencion(datos);
                    }
                });
            }
            $scope.cerrarRegistroLLamadaAtencion = function (datos) {
                // abrir condicion mensaje ==========
                SweetAlert.swal({
                    title: "¿Esta seguro de cerrar el detalle?",
                    text: "",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si',
                    cancelButtonText: "No"
                }).then(function (result) {
                    if (result.value) {
                        $scope.cerrarRegistroLLamadaAtencion2(datos);
                    }
                });
            }
            $scope.cerrarRegistroLLamadaAtencion2 = function (registro) {
                let promesa = CerrarLlamadaAtencion(registro.id)
                promesa.then(function (dato) {
                    $scope.mostrarMensaje(dato.mensaje)
                    let filtro = { fecha_inicio2: "", fecha_fin2: "", fecha_inicio: "", fecha_fin: "", tipo_fecha: "", id_ficha: $scope.empleado.id_ficha }
                    $scope.obtenerlistaHistorialLlamadaATencion(filtro)
                })
            }
            $scope.generarImpRegistroLLamadaAtencion = function (doc, stream, datos, y, imagenEmpresa, finDoc) {
                $scope.dibujarCabeceraPDFImpresionLLamadaAtencion(doc, datos, imagenEmpresa, y);
                doc.font('Helvetica', 8);
                if (!finDoc) {
                    doc.rect(3, 400, 600, 0).dash(1, { space: 5 }).stroke();
                  
                } else {
                    if(datos.eliminado){
                        doc.font('Helvetica', 60);
                        doc.rotate(330, { origin: [0, 380] }).fillColor('red').fillOpacity(0.6).text('ANULADO', 200, 360)
                        doc.text('ANULADO', 0, 710)
                    }
                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                }
            }
            $scope.imprimirRegistroLLamadaAtencion = function (datos) {
                convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {
                    var doc = new PDFDocument({ compress: false, size: 'letter', margin: 0 });
                    var stream = doc.pipe(blobStream());
                    $scope.generarImpRegistroLLamadaAtencion(doc, stream, datos, 30, imagenEmpresa, false)
                    $scope.generarImpRegistroLLamadaAtencion(doc, stream, datos, 430, imagenEmpresa, true)

                });
            }

            $scope.dibujarCabeceraPDFImpresionLLamadaAtencion = function (doc, datos, imagenEmpresa, y) {
                let fecaEmicion = $scope.fechaATexto(datos.fecha);
                let fechaImp = $scope.fechaATexto(new Date())
                doc.font('Helvetica-Bold', 10);
                let empresa = $scope.usuario.empresa.razon_social
                doc.text(empresa, 40, y + 35);
                doc.font('Helvetica-Bold', 15).text("LLAMADA DE ATENCIÓN", 120, y + 10, { width: 492, align: "center" });
                doc.font('Helvetica-Bold', 12).text(datos.motivo.nombre, 120, y + 30, { width: 492, align: "center" });
                doc.rect(0, y + 65, 630, 0).dash(0, { space: 0 }).stroke();
                doc.image(imagenEmpresa, 40, y - 20, { fit: [80, 80] });            //cuerpo
                doc.font('Helvetica-Bold', 10);
                doc.text("Campo:", 40, y + 80);
                doc.text("Trabajador:", 40, y + 105);
                doc.text("Procedencia:", 40, y + 130);
                doc.text("Solicitante:", 40, y + 155);
                doc.text("Recepción:", 40, y + 180);
                doc.text("Estado", 40, y + 230);

                doc.text("Cargo:", 350, y + 105);
                doc.text("Visado:", 350, y + 130);
                doc.text("F. Solicitud:", 350, y + 155);
                doc.text("F. Realización:", 350, y + 180)
                doc.text("F. entrega:", 350, y + 205)
                doc.text("F. Devolución:", 350, y + 230)
                doc.font('Helvetica', 10);

                doc.text(datos.ficha.area.nombre, 110, y + 80);
                doc.text(datos.ficha.empleado.persona.nombre_completo, 110, y + 105);
                doc.text(datos.ficha.empleado.persona.direccion_numero, 110, y + 130);
                doc.text(datos.solicitante.persona.nombre_completo, 110, y + 155);
                doc.text(datos.recepcionista ? datos.recepcionista.persona.nombre_completo : "", 110, y + 180);
                doc.text(datos.cerrado ? 'Cerrado' : 'Abierto', 110, y + 230);

                doc.text(datos.ficha.cargos[0].cargo.nombre, 435, y + 105);
                doc.text(datos.visado ? "Si" : "No", 435, y + 130);
                doc.text($scope.fechaATexto(datos.fecha_solicitud), 435, y + 155);
                doc.text(datos.fecha_realizado ? $scope.fechaATexto(datos.fecha_realizado) : "", 435, y + 180)
                doc.text(datos.fecha_entrega ? $scope.fechaATexto(datos.fecha_entrega) : "", 435, y + 205)
                doc.text(datos.fecha_devolucion ? $scope.fechaATexto(datos.fecha_devolucion) : "", 435, y + 230)
                doc.text(datos.ficha.empleado.persona.nombre_completo, 40, y + 320);
                doc.text("TRABAJADOR", 100, y + 330);
                doc.text("JEFE DE AREA", 280, y + 320);
                doc.text("JEFE DE R.R.H.H.", 440, y + 320);
                doc.font('Helvetica', 5);
                doc.text("EMISIÓN: " + fecaEmicion, 200, y + 345);
                doc.text("IMPRESIÓN: " + fechaImp, 260, y + 345);
                doc.text("USUARIO: " + $scope.usuario.persona.nombre_completo, 40, y + 345);

            }
            $scope.generarExcelLlamadasAtencion = function () {
                blockUI.start();
                let data = [["Nº", "ITEM", "AÑO", "CAMPO", "TRABAJADOR", "CARGO", "PROCEDENCIA", "FECHA SOLICITUD", 'SOLICITANTE', 'MOTIVO', 'VISADO', 'FECHA REALIZ.', 'FECHA ENTREGA', 'PERSONA RECEPCIONA LLAMADA ATENCION', 'FECHA DEV.', 'ESTADO']];
                let index = 0;
                for (var i = 0; i < $scope.listaLlamadasAtencion.length; i++) {
                    let columns = [];
                    let llamadaAtencion = $scope.listaLlamadasAtencion[i]
                    index = index + 1
                    columns.push(index);
                    columns.push(llamadaAtencion.numero_correlativo);
                    columns.push(llamadaAtencion.ficha.area.nombre);
                    columns.push(new Date(llamadaAtencion.fecha_solicitud).getFullYear());
                    columns.push(llamadaAtencion.ficha.empleado.persona.nombre_completo);
                    columns.push(llamadaAtencion.ficha.cargos[0].cargo.nombre);
                    columns.push(llamadaAtencion.ficha.empleado.persona.direccion_numero);
                    columns.push(llamadaAtencion.fecha_solicitud);
                    columns.push(llamadaAtencion.solicitante.persona.nombre_completo);
                    columns.push(llamadaAtencion.motivo.nombre);
                    columns.push(llamadaAtencion.visado ? "SI" : "NO");
                    columns.push(llamadaAtencion.fecha_realizado);
                    columns.push(llamadaAtencion.fecha_entrega);
                    columns.push(llamadaAtencion.recepcionista.persona.nombre_completo);
                    columns.push(llamadaAtencion.fecha_devolucion);
                    columns.push(llamadaAtencion.cerrado ? "CERRADO" : 'ABIERTO');
                    data.push(columns);
                }

                var ws_name = "SheetJS";
                var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                /* add worksheet to workbook */
                wb.SheetNames.push(ws_name);
                wb.Sheets[ws_name] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-DE-LLAMADAS-ATENCION.xlsx");
                blockUI.stop();
            }
            $scope.generarReprotePDFLlamadasAtencion = function () {

                convertUrlToBase64Image($scope.usuario.empresa.imagen, function (imagenEmpresa) {
                    var doc = new PDFDocument({ size: 'letter', layout: 'landscape', compress: false, margin: 10 });
                    var stream = doc.pipe(blobStream());

                    var y = 185, itemsPorPagina = 15, items = 0, pagina = 1, totalPaginas = Math.ceil(($scope.listaLlamadasAtencion.length + 10) / itemsPorPagina);;
                    $scope.dibujarCabeceraPDFLlamadaAtencion(doc, pagina, totalPaginas, imagenEmpresa);
                    doc.font('Helvetica', 7);
                    for (var i = 0; i < $scope.listaLlamadasAtencion.length && items <= itemsPorPagina; i++) {
                        let llamadaAtencion = $scope.listaLlamadasAtencion[i]
                        doc.text(i + 1, 20, y);
                        /* doc.text(new Date(llamadaAtencion.fecha_solicitud).getFullYear(), 40, y); */
                        doc.text(llamadaAtencion.ficha.empleado.persona.nombre_completo, 40, y, { width: 100 });
                        doc.text(llamadaAtencion.ficha.area.nombre, 150, y);
                        doc.text(llamadaAtencion.ficha.empleado.persona.direccion_numero, 210, y);
                        doc.text($scope.fechaATexto(llamadaAtencion.fecha_solicitud), 270, y);
                        doc.text(llamadaAtencion.solicitante.persona.nombre_completo, 320, y, { width: 80 });
                        doc.text(llamadaAtencion.motivo.nombre, 405, y);
                        doc.text(llamadaAtencion.visado ? "SI" : "NO", 460, y);
                        doc.text($scope.fechaATexto(llamadaAtencion.fecha_realizado), 500, y);
                        doc.text($scope.fechaATexto(llamadaAtencion.fecha_entrega), 560, y);
                        doc.text(llamadaAtencion.recepcionista.persona.nombre_completo, 610, y, { width: 80 });
                        doc.text($scope.fechaATexto(llamadaAtencion.fecha_devolucion), 690, y);
                        doc.text(llamadaAtencion.cerrado ? "CERRADO" : 'ABIERTO', 730, y);
                        y = y + 20;
                        items++;
                        if (items == itemsPorPagina) {
                            doc.addPage({ margin: 0, bufferPages: true });
                            y = 185;
                            items = 0;
                            pagina = pagina + 1;
                            $scope.dibujarCabeceraPDFLlamadaAtencion(doc, pagina, totalPaginas, imagenEmpresa);
                            doc.font('Helvetica', 8);
                        }
                    }
                    let fechaActual = new Date();
                    let min = fechaActual.getMinutes();
                    if (min < 10) {
                        min = "0" + min;
                    }
                    doc.text("USUARIO: " + $scope.usuario.nombre_usuario, 45, 500);
                    doc.text("IMPRESION : " + fechaActual.getDate() + "/" + (fechaActual.getMonth() + 1) + "/" + fechaActual.getFullYear() + " Hr. " + fechaActual.getHours() + ":" + min, 175, 500);
                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                });
            }

            $scope.dibujarCabeceraPDFLlamadaAtencion = function (doc, pagina, totalPaginas, imagenEmpresa) {
                doc.font('Helvetica-Bold', 12);

                doc.image(imagenEmpresa, 60, 50, { fit: [75, 75] });

                doc.text("REPORTE DE LLAMADAS DE ATENCION", 0, 100, { align: "center" });

                doc.font('Helvetica-Bold', 8);

                doc.text("Nº", 20, 170);/* 
                doc.text("Año", 40, 170); */
                doc.text("Trabajador", 40, 170);
                doc.text("Campo", 150, 170);
                doc.text("Procedencia", 210, 170);
                doc.text("F. Solicitud", 270, 170);
                doc.text("Solicitante", 320, 170);
                doc.text("Motivo", 415, 170);
                doc.text("Visado", 460, 170);
                doc.text("F. Realiz.", 500, 170);
                doc.text("F. Entrega", 560, 170);
                doc.text("Recepcion", 610, 170);
                doc.text("F. Dev.", 690, 170);
                doc.text("Estado", 730, 170);

            }
            /* fin llamadas atencion */
            /* editar otras ausencias */
            $scope.editarOtrasAusencias = (ausencia) => {
                $scope.otraAusencia = ausencia
                $scope.otraAusencia.fecha_inicio_hora = new Date($scope.otraAusencia.fecha_inicio)
                $scope.otraAusencia.fecha_inicio_hora.setSeconds(0)
                $scope.otraAusencia.fecha_fin_hora = new Date($scope.otraAusencia.fecha_fin)
                $scope.otraAusencia.fecha_fin_hora.setSeconds(0)
                $scope.otraAusencia.fecha_inicio = $scope.fechaATexto(new Date($scope.otraAusencia.fecha_inicio))
                $scope.otraAusencia.fecha_fin = $scope.fechaATexto(new Date($scope.otraAusencia.fecha_fin))
                $scope.cerrarDialogHistorialAusencias()
            }
            /* fin editar otras ausencias */

            //********** INICIO repores ausencias médicas**************
            $scope.reportePdfAusenciasMedicas = (filtro) => {
                if ($scope.historialEmpleadoAusencias.length > 0) {
                    var doc = new PDFDocument({ size: [612, 792], compress: false, margin: 20 });
                    var stream = doc.pipe(blobStream());
                    var y = 77, itemsPorPagina = 45, items = 0, pagina = 1, totalPaginas = Math.ceil($scope.historialEmpleadoAusencias.length / itemsPorPagina);
                    $scope.cabeceraReportePdfAusenciasMedicas(doc, filtro, $scope.historialEmpleadoAusencias, pagina, totalPaginas);
                    doc.font('Helvetica', 6).lineGap(-2).lineWidth(0.2)
                    for (let i = 0; i < $scope.historialEmpleadoAusencias.length; i++) {
                        const ausencia = $scope.historialEmpleadoAusencias[i];
                        doc.text(i + 1, 37, y + 6, { width: 16 })
                        doc.text(fechaATexto(ausencia.createdAt), 53, y + 6, { width: 35, align: 'center' })
                        doc.text(ausencia.fecha_inicio ? fechaATexto(ausencia.fecha_inicio) : '', 88, y + 6, { width: 35, align: 'center' })
                        doc.text(ausencia.fecha_fin ? fechaATexto(ausencia.fecha_fin) : '', 123, y + 6, { width: 35, align: 'center' })
                        doc.text(ausencia.baja ? ausencia.baja : '', 158, y + 6, { width: 35, align: 'center' })
                        doc.text(ausencia.dias ? ausencia.dias : '', 195, y + 6, { width: 16 })
                        doc.text(ausencia.tipoAusencia ? ausencia.tipoAusencia ? ausencia.tipoAusencia.nombre.toUpperCase() : '' : '', 213, y + 6, { width: 70 })
                        doc.text(ausencia.diagnostico ? ausencia.diagnostico.toUpperCase() : '', 285, y + 1, { width: 177 })
                        doc.text(ausencia.observacion ? ausencia.observacion.toUpperCase() : '', 464, y + 1, { width: 113 })
                        doc.rect(35, y, 542, 15).stroke()
                        doc.rect(53, y, 0, 15).stroke()
                        doc.rect(88, y, 0, 15).stroke()
                        doc.rect(123, y, 0, 15).stroke()
                        doc.rect(158, y, 0, 15).stroke()
                        doc.rect(193, y, 0, 15).stroke()
                        doc.rect(211, y, 0, 15).stroke()
                        doc.rect(283, y, 0, 15).stroke()
                        doc.rect(462, y, 0, 15).stroke()
                        y += 15;
                        items++
                        if (items >= itemsPorPagina) {
                            doc.addPage({ size: [612, 792], margin: 10 });
                            y = 77;
                            items = 0;
                            pagina = pagina + 1;
                            $scope.cabeceraReportePdfAusenciasMedicas(doc, filtro, $scope.historialEmpleadoAusencias, pagina, totalPaginas);
                            doc.font('Helvetica', 6).lineGap(-2).lineWidth(0.2)
                        }
                    }
                    doc.end();
                    stream.on('finish', function () {
                        var fileURL = stream.toBlobURL('application/pdf');
                        window.open(fileURL, '_blank', 'location=no');
                    });
                } else {
                    SweetAlert.swal("", "<small>No se encontraron registros de ausencias médicas.</small>", "error");
                }
            }
            $scope.cabeceraReportePdfAusenciasMedicas = (doc, filtro, data, pagina, totalPaginas) => {
                doc.font('Helvetica-Bold', 8).text("HISTÓRICO DE AUSENCIAS MÉDICAS", 0, 30, { align: 'center' })
                if (data.trabajador) doc.font('Helvetica-Bold', 6).text(data.trabajador.nombre_completo ? data.trabajador.nombre_completo.toUpperCase() : '', 0, 40, { align: 'center' })
                if (filtro) {
                    if (filtro.inicio && filtro.fin) doc.font('Helvetica-Bold', 6).text("Desde " + fechaATexto(filtro.inicio) + " al " + fechaATexto(filtro.fin), 0, 47, { align: 'center' })
                }
                doc.lineGap(-2)
                doc.lineWidth(0.2).rect(35, 62, 542, 15).stroke()
                doc.rect(53, 62, 0, 15).stroke()
                doc.rect(88, 62, 0, 15).stroke()
                doc.rect(123, 62, 0, 15).stroke()
                doc.rect(158, 62, 0, 15).stroke()
                doc.rect(193, 62, 0, 15).stroke()
                doc.rect(211, 62, 0, 15).stroke()
                doc.rect(283, 62, 0, 15).stroke()
                doc.rect(462, 62, 0, 15).stroke()
                doc.text('N°', 35, 67, { width: 18, align: 'center' })
                doc.text('FECHA REGISTRO', 53, 64, { width: 35, align: 'center' })
                doc.text('FECHA INICIO', 88, 64, { width: 35, align: 'center' })
                doc.text('FECHA FINAL', 123, 64, { width: 35, align: 'center' })
                doc.text('PRIMERA BAJA', 158, 64, { width: 35, align: 'center' })
                doc.text('DÍAS', 193, 67, { width: 18, align: 'center' })
                doc.text('TIPO DE BAJA', 211, 67, { width: 72, align: 'center' })
                doc.text('DIAGNÓSTICO', 283, 67, { width: 179, align: 'center' })
                doc.text('OBSERVACIÓN', 462, 67, { width: 115, align: 'center' })

                doc.text("Página " + pagina + " de " + totalPaginas, 0, 755, { align: 'center' })
            }
            $scope.reporteXlsxAusenciasMedicas = () => {
                if ($scope.historialEmpleadoAusencias.length > 0) {
                    var data = [["N°", "EMPLEADO", "CI", "FECHA REGISTRO", "FECHA INICIO", "FECHA FIN", "PRIMERA BAJA", "DÍAS", "TIPO DE BAJA", "DIAGNÓSTICO",
                        "OBSERVACIÓN"]];
                    if ($scope.historialEmpleadoAusencias.trabajador) {
                        var nombre_empleado = $scope.historialEmpleadoAusencias.trabajador.nombre_completo
                        var ci = $scope.historialEmpleadoAusencias.trabajador.ci + $scope.historialEmpleadoAusencias.trabajador.extension
                    }
                    for (let i = 0; i < $scope.historialEmpleadoAusencias.length; i++) {
                        const ausencia = $scope.historialEmpleadoAusencias[i];
                        data.push([
                            i + 1,
                            nombre_empleado ? nombre_empleado : '',
                            ci ? ci : '',
                            fechaATexto(ausencia.createdAt),
                            ausencia.fecha_inicio ? fechaATexto(ausencia.fecha_inicio) : '',
                            ausencia.fecha_fin ? fechaATexto(ausencia.fecha_fin) : '',
                            ausencia.baja ? ausencia.baja : '',
                            ausencia.dias ? ausencia.dias : '',
                            ausencia.tipoAusencia ? ausencia.tipoAusencia.nombre : '',
                            ausencia.diagnostico ? ausencia.diagnostico : '',
                            ausencia.observacion ? ausencia.observacion : '',
                        ])
                    }
                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
                    /* add worksheet to workbook */
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE-AUSENCIAS-MEDICAS.xlsx");
                } else {
                    SweetAlert.swal("", "<small>No se encontraron registros de ausencias médicas.</small>", "error");
                }
            }
            //********** FIN repores ausencias médicas**************
            $scope.cargo_activo = false;
            $scope.cambioEstadoFiltro = (cargo_activo, estado) => {
                if (estado && estado == 'Inactivo') {
                    $scope.cargo_activo = false;
                    $scope.filtro.cargo_clase = null;

                }

                if (!estado && cargo_activo) {
                    $scope.filtro.estado = 'Activo';
                    $scope.filtro.cargo_clase = null;
                } else if (!estado) {
                    // $scope.filtro.estado = 'Inactivo';
                    $scope.filtro.cargo_clase = null;
                }
            }
            $scope.actualizarTotalAnticiposExtraordinarios = (anticipo) => {
                anticipo.editado = true;
                if($scope.anticipos.data){
                    $scope.anticipos.totalExtraOrdinario = $scope.anticipos.data.reduce((acc, { monto, es_ordinario }) => es_ordinario? acc+=0 :acc+=monto, 0)
                }
            }

            $scope.reportePDFBeneficios = function (beneficio, filtro) {
                var doc = new PDFDocument({ compress: false, layout: 'landscape', margin: 10 });
                var stream = doc.pipe(blobStream());

                doc.font('Helvetica', 7);
                var y = 100, itemsPorPagina = 25, items = 0, pagina = 1, totalPaginas = Math.ceil(beneficio.length / itemsPorPagina);
                $scope.dibujarCabeceraPDFBeneficios(doc, beneficio, pagina, totalPaginas, filtro);

                for (var i = 0; i < beneficio.length && items <= itemsPorPagina; i++) {
                    doc.font('Helvetica', 8);


                    doc.text(beneficio[i].ficha.empleado.persona.nombre_completo, 40, y, { width: 150 });
                    doc.text($scope.fechaATexto(beneficio[i].fecha_asistensia), 190, y);
                    var motivo = beneficio[i].motivo ? beneficio[i].motivo.nombre : ""; 
                    if (motivo.length >= 32) {
                        doc.text(motivo, 235, y, { width: 100 });
                        y = y + 15
                    } else if (motivo.length > 17) {
                        doc.text(motivo, 235, y, { width: 100 });
                    } else {
                        doc.text(motivo, 235, y, { width: 100 });
                    }

                    doc.text($scope.fechaATexto(beneficio[i].fecha_elaboracion), 385, y);
                    if (beneficio[i].tipo_beneficio) {

                        doc.text($scope.number_format(beneficio[i].total_ingresos, 2), 430, y)
                    } else {

                        doc.text($scope.number_format(beneficio[i].total_quinquenio, 2), 430, y)
                    }
                    if (beneficio[i].tipo_beneficio) {

                        doc.text($scope.number_format(beneficio[i].total_ingresos, 2), 480, y)
                    } else {

                        doc.text($scope.number_format(beneficio[i].total_quinquenio, 2), 480, y)
                    }
                    var cuenta = beneficio[i].cuenta ? beneficio[i].cuenta.numero : "";
                    doc.text(cuenta, 530, y);
                    var banco = beneficio[i].cuenta ? beneficio[i].cuenta.nombre : "";
                    doc.text(banco, 580, y)


                    y = y + 20;
                    items++;

                    if (items == itemsPorPagina) {
                        doc.addPage({ margin: 0, layout: 'landscape', bufferPages: true });
                        y = 100;
                        items = 0;
                        pagina = pagina + 1;
                        $scope.dibujarCabeceraPDFBeneficios(doc, beneficio, pagina, totalPaginas, filtro);
                    }
                }

                doc.end();
                stream.on('finish', function () {
                    var fileURL = stream.toBlobURL('application/pdf');
                    window.open(fileURL, '_blank', 'location=no');
                });

            }

            $scope.dibujarCabeceraPDFBeneficios = function (doc, beneficio, pagina, totalPaginas, filtro) {

                doc.font('Helvetica-Bold', 14);
                doc.text("REPORTE DE BENEFICIOS SOCIALES", 0, 60, { align: 'center' });
                doc.font('Helvetica-Bold', 10);
                if (filtro.tipo == 0 || filtro.tipo == false) {
                    doc.text("QUINQUENIO", 0, 75, { align: 'center' });
                } else {
                    doc.text("FINIQUITO", 0, 75, { align: 'center' });
                }

                doc.font('Helvetica-Bold', 8);
                doc.text("Nombre Completo", 40, 90);
                doc.text("Fecha", 200, 90);
                doc.text("Motivo", 245, 90);
                doc.text("Elaborado", 385, 90);
                doc.text("Monto", 430, 90);
                doc.text("Pagado", 480, 90);
                doc.text("N° Cheque", 530, 90);
                doc.text("Banco", 580, 90)

                var usuario = $scope.usuario.nombre_usuario;
                var fecha = new Date();

                doc.text("Usuario: " + usuario + " - " + $scope.fechaATexto(fecha), 450, 550);
                doc.text("Pagina " + pagina + " de " + totalPaginas, 0, 550, { align: 'center' });
            }

            $scope.reporteEXCELBeneficios = function (filtro) {
                var { tipo, inicio, fin } = filtro
                GetBeneficiosSociales($scope.usuario.id_empresa, tipo, inicio, fin)
                .then(({error, data, message, messageType}) => {
                    if(error) return SweetAlert.swal("", message, messageType)
                    try {
                        if(data.length === 0) return SweetAlert.swal("", "No existen datos para generar reporte de beneficios sociales", "info")
                        var matriz = filtro.tipo == 0 || filtro.tipo == false ? 
                        [["Nro.", "Nombre Completo", "Cargo Principal", "CI", "FECHA ELABORACIÓN", "Fecha Ingreso","N° Quinquenio", "Motivo", "Años de servicio", "Meses de Servicio", "Días de Servicio", "1er Mes", "2do Mes", "3er Mes", "Total", "Promedio", "Indemnización Años", "Indemnización Meses", "Indemnización Días", "Aguinaldo de Navidad", "Vacación", "Prima Legal", "Otros Ingresos", "Deducciones", "Forma de Pago", "Cuenta Bancaria", "Total"]] 
                        : 
                        [["Nro.", "Nombre Completo", "Cargo Principal", "CI", "FECHA ELABORACIÓN", "Fecha Ingreso","Fecha Retiro", "Motivo", "Años de servicio", "Meses de Servicio", "Días de Servicio", "1er Mes", "2do Mes", "3er Mes", "Total", "Promedio", "Indemnización Años", "Indemnización Meses", "Indemnización Días", "Aguinaldo de Navidad", "Vacación", "Prima Legal", "Otros Ingresos", "Deducciones", "Forma de Pago", "Cuenta Bancaria", "Total"]]

                        for (let i = 0; i < data.length; i++) {
                            const reg = data[i];
                            let persona = ""
                            let extension = ""
                            let cargos = ""
                            if(reg.ficha && reg.ficha.empleado && reg.ficha.empleado.persona) persona = reg.ficha.empleado.persona;
                            if(reg.ficha && reg.ficha.empleado && reg.ficha.empleado.extension) extension = reg.ficha.empleado.extension
                            if(reg.ficha && reg.ficha.cargos){
                                if(reg.ficha.cargos.length === 1) cargos = reg.ficha.cargos[0].cargo 
                                if(reg.ficha.cargos.length > 1){
                                    cargos = reg.ficha.cargos.filter(e=>e.principal)
                                    cargos = cargos.length == 0 ? reg.ficha.cargos[reg.ficha.cargos.length - 1].cargo : cargos = cargos[0].cargo;
                                } 
                            }
                            let cantidad = 0
                            let totalProm = 0
                            if(reg.primer_mes ){
                                cantidad++
                                totalProm += reg.primer_mes
                            }
                            if(reg.segundo_mes){
                                cantidad++
                                totalProm += reg.segundo_mes  
                            }
                            if(reg.tercer_mes ){
                                cantidad++
                                totalProm += reg.tercer_mes
                            }
                            let esFiniquito = filtro.tipo == 0 || filtro.tipo == false ? false : true;

                            matriz.push([
                                i+1,
                                persona ? persona.nombre_completo : "",
                                cargos ? cargos.nombre : "",
                                persona ? persona.ci && extension ? persona.ci+extension.nombre_corto : persona.ci :"",
                                reg.fecha_elaboracion ? $scope.fechaATexto(reg.fecha_elaboracion) : "",
                                reg.fecha_ingreso ? $scope.fechaATexto(reg.fecha_ingreso) : "",
                                esFiniquito ? (reg.fecha_retiro ? $scope.fechaATexto(reg.fecha_retiro) : "") : (reg.numero_quinquenio ? reg.numero_quinquenio : ""),
                                reg.motivo ? reg.motivo.nombre : "",
                                reg.anios_servicio ? reg.anios_servicio : "",
                                reg.meses_servicio ? reg.meses_servicio : "",
                                reg.dias_servicio ? reg.dias_servicio : "",
                                reg.primer_mes ? reg.primer_mes :"",
                                reg.segundo_mes ? reg.segundo_mes :"",
                                reg.tercer_mes ? reg.tercer_mes : "",
                                totalProm,
                                reg.promedio ? reg.promedio : "",
                                reg.anios_importe ? reg.anios_importe : "",
                                reg.meses_importe ? reg.meses_importe : "",
                                reg.dias_importe ? reg.dias_importe : "",
                                reg.navidad_importe ? reg.navidad_importe : "",
                                reg.importe_vacacion ? reg.importe_vacacion : "",
                                reg.impote_prima ? reg.importe_prima : "",
                                reg.total_ingresos ? reg.total_ingresos : "",
                                reg.total_deducciones ? reg.total_deducciones : "",
                                reg.id_cuenta_banco ? "BANCO" : "EFECTIVO",
                                reg.cuenta ? reg.cuenta.nombre :"",
                                esFiniquito ? (reg.total_ingresos ? reg.total_deducciones ? reg.total_ingresos-reg.total_deducciones : reg.total_ingresos : "") :  (reg.total_quinquenio ? reg.total_quinquenio :"")
                            ])
                            
                        }
                        var ws_name = "SheetJS";
                        var wb = new Workbook(), ws = sheet_from_array_of_arrays(matriz);
                        /* add worksheet to workbook */
                        wb.SheetNames.push(ws_name);
                        wb.Sheets[ws_name] = ws;
                        var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                        if (filtro.tipo == 0 || filtro.tipo == false) {
                            saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE DE QUINQUENIOS.xlsx");
                        } else {
                            saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE DE FINIQUITOS.xlsx");
                        }
                        blockUI.stop();
                    } catch (e) {
                        SweetAlert.swal("", "<b>Ocurrió un error al obtener los datos</b><br>"+e, "error")
                    }
                })
            }
            $scope.reportesRopaTrabajoResumidoXlsx = (filtro) => {
                SweetAlert.swal({
                    title: 'Obteniendo datos...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                ListaDotacionRopaEmpresa(filtro, $scope.usuario.id_empresa)
                .then(({ error, data, message, messageType }) => {
                    if( error ) return SweetAlert.swal("", message, messageType)
                    if(data.length == 0 ) return SweetAlert.swal("", "No se encontraron registros", "info")
                    SweetAlert.update({ title: "Generando archivo..." })
                    var matriz = [["N°", "DOC", "N°.ISO", "ASIGNADO A:", "CARGO", "CENTRO DE COSTO", "FECHA INGRESO", "CÓDIGO", "PRODUCTO", "GRUPO", "SUBGRUPO", "UNIDAD", "CANTIDAD", "P/U", "TOTAL", "C/U",	"TOTAL COSTO", "CUMPLIMIENTO", "FECHA ENTREGA" ,"TIEMPO USO", "PROXIMA ENTREGA", "CANTIDAD S/MATRIZ", "DIFERENCIA"]]
                    for (let i = 0; i < data.length; i++) {
                        const reg = data[i];
                        let fechaEntrega = new Date(reg.fecha_entrega);
                        let proximaEntrega = reg.fecha_entrega && reg.meses_uso ? fechaEntrega.setMonth(date.getMonth()+reg.meses_uso-1) : "";
                        matriz.push([
                            i+1,
                            reg.numero ? reg.numero : "",
                            reg.numero_iso_dotacion_ropa ? reg.numero_iso_dotacion_ropa : "",
                            reg.nombre_completo ? reg.nombre_completo : "",
                            reg.cargo ? reg.cargo : "",
                            reg.campo ? reg.campo : "",
                            reg.fecha_inicio ? $scope.fechaATexto(reg.fecha_inicio) : "",
                            reg.codigo ? reg.codigo : "",
                            reg.descripcion ? reg.descripcion : "",
                            reg.grupo ? reg.grupo : "",
                            reg.subgrupo ? reg.subgrupo : "",
                            reg.unidad_medida ? reg.unidad_medida : "",
                            reg.cantidad ? reg.cantidad : "",
                            reg.costo ? reg.costo : "",
                            reg. costo && reg.cantidad ? (reg.costo * reg.cantidad).toFixed(2) : "",
                            reg.costo ? (reg.costo * 0.87).toFixed(2) : "",
                            reg. costo && reg.cantidad ? ((reg.costo * reg.cantidad)*0.87).toFixed(2) : "",
                            reg.cumplimiento ? reg.cumplimiento : "",
                            reg.fecha_entrega ? $scope.fechaATexto(reg.fecha_entrega) : "",
                            reg.meses_uso ? reg.meses_uso : "",
                            proximaEntrega ? $scope.fechaATexto(proximaEntrega) :"",
                            reg.cantidad_config ? reg.cantidad_config : "",
                            reg.cantidad && reg.cantidad_config ? reg.cantidad - reg.cantidad_config: ""
                        ])
                    }
                    var ws_name = "SheetJS";
                    var wb = new Workbook(), ws = sheet_from_array_of_arrays(matriz);
                    wb.SheetNames.push(ws_name);
                    wb.Sheets[ws_name] = ws;
                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE DOTACION ROPA DE TRABAJO.xlsx");
                    SweetAlert.swal({
                        title: 'Finalizado!',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    })
                    blockUI.stop();
                    
                })
            }

            $scope.reportesRopaTrabajoResumidoPdf = (filtro) => {
                if(!filtro) return SweetAlert.swal("","Parámetros inválidos", "warning")
                ListaDotacionRopaEmpresa(filtro, $scope.usuario.id_empresa)
                .then(({error, data, message, messageType }) => {
                    if(error) return SweetAlert.swal("", message, messageType)
                    if(data.length == 0) return SweetAlert.swal("", "No se encontraron registros", "info")
                    try {
                        let registros = Object.values(data.reduce((acc , cur) => {
                            if(!acc[cur.id_campo]){
                                acc[cur.id_campo] = { nombre: cur.campo, importe: cur.importe ? cur.importe : 0 }
                            }else{
                                acc[cur.id_campo].importe += cur.importe ? cur.importe : 0;
                            }
                            return acc
                        }, {}))
                        if(registros.length > 0) registros.sort((a, b ) => {
                            if(a.nombre > b.nombre) return 1
                            if(a.nombre < b.nombre) return -1
                            return 0
                        })
                        convertUrlToBase64Image($scope.usuario.empresa.imagen, function (logo) { 
                            let titulo = "REPORTE DE CONSUMOS ROPA DE TRABAJO"
                            let subtitulo = "RESUMEN"
                            let hoy = new Date()
                            let desde = filtro.inicio ? $scope.fechaATexto(filtro.inicio) : "01/01/"+hoy.getFullYear()
                            let hasta = filtro.fin ? $scope.fechaATexto(filtro.fin) : $scope.fechaATexto(hoy);
							let metadata = "Impreso: "+$scope.formatoFechaHora(hoy)+"                  Usuario:"+$scope.usuario.nombre_usuario
                            let x = 40, y = 110, items = 0, itemsPerPage = 45, page = 1, pages = Math.ceil((registros.length+  2) / itemsPerPage);
                            var doc = new PDFDocument({ size: [612, 792], compress: false, margin: 10 });
                            var stream = doc.pipe(blobStream());
                            doc.lineGap(-1.2);
                            $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );
                            doc.lineWidth(0.4).rect(191, y, 250,0).stroke();
                            doc.font("Helvetica-Bold", 7).text("CENTRO DE COSTOS", 191, y+3, { width: 180, align: "center"})
                            doc.text("TOTAL", 371, y + 3, { width: 70, align: "center"})
                            y += 12; items++;
                            if (items === itemsPerPage) {
                                doc.addPage({ size: "letter", margin: 10, compress: false });
                                items = 0;
                                page++;
                                y = 110;
                                $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                            }
                            doc.rect(191, y, 250,0).stroke();
                            let total = 0
                            for (let i = 0; i < registros.length; i++) {
                                let { nombre, importe} = registros[i];
                                importe = importe ? importe *0.87 : 0
                                doc.font("Helvetica", 7).text(nombre, 196, y + 4);
                                doc.text(importe ?  number_format_negativo_to_positvo(importe, 2) : '0.00', 371, y + 4, { width: 65, align:'right'});
                                y += 12;
                                items++;
                                total += importe ? +importe.toFixed(2) : 0;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 110;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                            }
                            doc.rect(191, y, 250,0).stroke();
                            doc.font("Helvetica-Bold", 7).text("TOTALES", 196, y + 4);
                            doc.text(total ?  number_format_negativo_to_positvo(total, 2) : '0.00', 371, y + 4, { width: 65, align:'right'});
                            doc.end();
                            stream.on('finish', function () {
                                var fileURL = stream.toBlobURL('application/pdf');
                                window.open(fileURL, '_blank', 'location=no');
                            });
                            blockUI.stop();
                        })
                    } catch (e) {
                        SweetAlert.swal("","<b>Ocurrió un error al generar el documento...<b><br>"+e, "warning")
                    }
                })
            }
            
            $scope.reporteRopaTrabajoGeneralPdf = (filtro) => {
                if(!filtro) return SweetAlert.swal("","Parámetros inválidos", "warning");
                SweetAlert.swal({
                    title: 'Obteniendo datos...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                ListaDotacionRopaEmpresa(filtro, $scope.usuario.id_empresa)
                .then(({error, data, message, messageType }) => {
                    if(error) return SweetAlert.swal("", message, messageType)
                    if(data.length == 0) return SweetAlert.swal("", "No se encontraron registros", "info")
                    try {
                        let registros = Object.values(data.reduce((acc , cur) => {
                            if(!acc[cur.id_campo]){
                                acc[cur.id_campo] = { 
                                    campo: cur.campo, 
                                    items: Object.values( data.filter( e => e.id_campo===cur.id_campo ).reduce((acum, val) =>{
                                        if(!acum[val.id_producto]){
                                            acum[val.id_producto] = val
                                        }else{
                                            acum[val.id_producto].importe += val.importe ? val.importe : 0
                                            acum[val.id_producto].cantidad += val.cantidad ? val.cantidad : 0
                                        }
                                        return acum
                                    }, {}))
                                }
                            }
                            return acc
                        }, {}))
                        if(registros.length > 0) registros.sort((a, b ) => {
                            if(a.campo > b.campo) return 1
                            if(a.campo < b.campo) return -1
                            return 0
                        })
                        SweetAlert.update({ title: "Generando documento..." })
                        convertUrlToBase64Image($scope.usuario.empresa.imagen, function (logo) { 
                            let titulo = "REPORTE DE CONSUMOS ROPA DE TRABAJO"
                            let subtitulo = "DETALLADO GENERAL"
                            let hoy = new Date()
                            let desde = filtro.inicio ? $scope.fechaATexto(filtro.inicio) : "01/01/"+hoy.getFullYear()
                            let hasta = filtro.fin ? $scope.fechaATexto(filtro.fin) : $scope.fechaATexto(hoy);
							let metadata = "Impreso: "+$scope.formatoFechaHora(hoy)+"                  Usuario:"+$scope.usuario.nombre_usuario
                            let totalItems= registros.reduce((a, b) => a += b.items.length , (registros.length *3))
                            let x = 40, y = 95, items = 0, itemsPerPage = 50, page = 1, pages = Math.ceil( totalItems / itemsPerPage);
                            var doc = new PDFDocument({ size: [612, 792], compress: false, margin: 10 });
                            var stream = doc.pipe(blobStream());
                            doc.lineGap(-1.5);
                            doc.lineWidth(0.4);
                            $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );
                            let totalGeneral = 0;
                            for (let i = 0; i < registros.length; i++) {
                                const { campo, items:regs } = registros[i];
                                if(regs.length > 0) regs.sort((a, b ) => {
                                    if(a.fecha_entrega > b.fecha_entrega) return 1
                                    if(a.fecha_entrega < b.fecha_entrega) return -1
                                    if(a.numero_iso_dotacion_ropa > b.numero_iso_dotacion_ropa) return 1
                                    if(a.numero_iso_dotacion_ropa < b.numero_iso_dotacion_ropa) return -1
                                    return 0
                                })
                                doc.rect(x, y, 552, 12).fillAndStroke('#BEDAF9', '#BEDAF9').fillColor('#000').font("Helvetica-Bold", 7).text(campo.toUpperCase(), x + 5, y+3);
                                doc.stroke('#000');
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                                doc.text("FECHA", 70, y + 3, { width: 50, align: "center"})
                                doc.text("N° ISO", 120, y + 3, { width: 30, align: "center"})
                                doc.text("ASIGNADO", 150, y + 3, { width: 142, align: "center"})
                                doc.text("CÓDIGO", 292, y + 3, { width: 50, align: "center"})
                                doc.text("DESCRIPCIÓN", 342, y + 3, { width: 120, align: "center"})
                                doc.text("CANTIDAD", 462, y + 3, { width: 40, align: "center"})
                                doc.text("C/U", 502, y + 3, { width: 40, align: "center"})
                                doc.text("TOTAL", 542, y + 3, { width: 50, align: "center"})
                                doc.rect( 70, y + 12, 522, 0 ).stroke();
                                y += 12; items++;
                                let totalCampo = 0;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                                for ( let j = 0; j < regs.length; j++ ) {
                                    let { fecha_entrega, numero_iso_dotacion_ropa, nombre_completo, codigo, descripcion, cantidad, costo, importe } = regs[j];
                                    importe = importe ? importe * 0.87 : null;
                                    doc.font("Helvetica", 6).text(fecha_entrega ? $scope.fechaATexto(fecha_entrega) : "", 70, y + 4, { width: 50, align:"center"})
                                    doc.text(numero_iso_dotacion_ropa ? numero_iso_dotacion_ropa : "", 120, y + 4, { width: 28, align:'right' })
                                    doc.text(nombre_completo ? nombre_completo : "", 152, y + 4, { width: 140 })
                                    doc.text(codigo ? codigo : "", 294, y + 4, { width: 48 })
                                    doc.text(descripcion ? descripcion : "", 344, y + 4, { width: 118 })
                                    doc.text(cantidad ? cantidad : "", 462, y + 4, { width: 38, align:'right' })
                                    doc.text(costo ? number_format_negativo_to_positvo((costo * 0.87), 2) : "", 502, y + 4, { width: 38, align:'right' })
                                    doc.text(importe ? number_format_negativo_to_positvo(importe, 2) : "", 542, y + 4, { width: 48, align:'right' })
                                    totalCampo += importe ? +(importe.toFixed(2)) : 0;
                                    y += 12; items++;
                                    if (items === itemsPerPage) {
                                        doc.addPage({ size: "letter", margin: 10, compress: false });
                                        items = 0;
                                        page++;
                                        y = 95;
                                        $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                    }
                                }
                                totalGeneral += totalCampo ? +(totalCampo.toFixed(2)) : 0;
                                doc.rect(70, y, 522, 0).stroke()
                                doc.font("Helvetica-Bold", 7).text("TOTALES", 70, y + 3)
                                doc.text( totalCampo ? number_format_negativo_to_positvo(totalCampo, 2) : "" , 542, y + 3, { width: 48, align:'right' })
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                            }
                            doc.rect(x, y, 552, 0).stroke()
                            doc.font("Helvetica-Bold", 7).text("TOTAL GENERAL", x + 5, y + 3)
                            doc.text( totalGeneral ? number_format_negativo_to_positvo(totalGeneral, 2) : "" , 542, y + 3, { width: 48, align:'right' })
                            doc.end();
                            stream.on('finish', function () {
                                SweetAlert.swal({
                                    title: 'Finalizado!',
                                    icon: 'success',
                                    timer: 2000,
                                    showConfirmButton: false
                                })
                                var fileURL = stream.toBlobURL('application/pdf');
                                window.open(fileURL, '_blank', 'location=no');
                                
                            });
                            blockUI.stop();
                        })

                    } catch (e) {
                        SweetAlert.swal("","<b>Ocurrió un error al generar el documento...<b><br>"+e, "warning")
                    }
                })
            }
            $scope.reporteRopaTrabajoProductosPdf = (filtro) => {
                if(!filtro) return SweetAlert.swal("","Parámetros inválidos", "warning")
                SweetAlert.swal({
                    title: 'Obteniendo datos...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                ListaDotacionRopaEmpresa(filtro, $scope.usuario.id_empresa)
                .then(({error, data, message, messageType }) => {
                    if(error) return SweetAlert.swal("", message, messageType)
                    if(data.length == 0) return SweetAlert.swal("", "No se encontraron registros", "info")
                    try {
                        let registros = Object.values(data.reduce((acc , cur) => {
                            if(!acc[cur.id_campo]){
                                acc[cur.id_campo] = { 
                                    campo: cur.campo, 
                                    items: Object.values( data.filter( e => e.id_campo===cur.id_campo ).reduce((acum, val) =>{
                                        if(!acum[val.id_producto]){
                                            acum[val.id_producto] = val
                                        }else{
                                            acum[val.id_producto].importe += val.importe ? val.importe : 0
                                            acum[val.id_producto].cantidad += val.cantidad ? val.cantidad : 0
                                        }
                                        return acum
                                    }, {}))
                                }
                            }
                            return acc
                        }, {}))
                        if(registros.length > 0) registros.sort((a, b ) => {
                            if(a.campo > b.campo) return 1
                            if(a.campo < b.campo) return -1
                            return 0
                        })
                        SweetAlert.update({ title: "Generando documento..." })
                        convertUrlToBase64Image($scope.usuario.empresa.imagen, function (logo) { 
                            let titulo = "REPORTE DE CONSUMOS ROPA DE TRABAJO"
                            let subtitulo = "DETALLE POR ÍTEM"
                            let hoy = new Date()
                            let desde = filtro.inicio ? $scope.fechaATexto(filtro.inicio) : "01/01/"+hoy.getFullYear()
                            let hasta = filtro.fin ? $scope.fechaATexto(filtro.fin) : $scope.fechaATexto(hoy);
							let metadata = "Impreso: "+$scope.formatoFechaHora(hoy)+"                  Usuario:"+$scope.usuario.nombre_usuario
                            let totalItems = ( registros.length * 3 ) + registros.reduce((a, b) => a += b.items.length , 0)
                            let x = 40, y = 95, items = 0, itemsPerPage = 50, page = 1, pages = Math.ceil( totalItems / itemsPerPage);
                            var doc = new PDFDocument({ size: [612, 792], compress: false, margin: 10 });
                            var stream = doc.pipe(blobStream());
                            doc.lineGap(-1.2);
                            doc.lineWidth(0.4);
                            $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );
                            let totalGeneral = 0;
                            for (let i = 0; i < registros.length; i++) {
                                var { campo, items:regs } = registros[i];
                                doc.rect(x, y, 552, 12).fillAndStroke('#BEDAF9', '#BEDAF9').fillColor('#000').font("Helvetica-Bold", 7).text(campo.toUpperCase(), x + 5, y+3);
                                doc.stroke('#000');
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                                doc.text("CÓDIGO", 140, y + 4, { width: 60, align: "center"})
                                doc.text("DESCRIPCIÓN", 200, y + 4, { width: 210, align: "center"})
                                doc.text("CANTIDAD", 410, y + 4, { width: 52, align: "center"})
                                doc.text("C/U PROM.", 462, y + 4, { width: 65, align: "center"})
                                doc.text("TOTAL", 527, y + 4, { width: 65, align: "center"})
                                doc.rect( 140, y + 12, 452, 0 ).stroke();
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                                let totalCampo = 0;
                                for ( let j = 0; j < regs.length; j++ ) {
                                    let { codigo, descripcion, cantidad, importe } = regs[j];
                                    doc.font("Helvetica", 7)
                                    doc.text(codigo || "", 143, y + 4, { width: 57});
                                    doc.text(descripcion || "", 203, y + 4, { width: 207 });
                                    doc.text(cantidad || "", 412, y + 4, { width: 50, align:"right"});
                                    doc.text(cantidad && importe ? ((importe * 0.87)/cantidad).toFixed(2) : "", 465, y + 4, { width: 62, align:"right"});
                                    doc.text(importe ? number_format_negativo_to_positvo((importe * 0.87), 2) : "", 530, y + 4, { width: 62, align:"right"});
                                    totalCampo += importe ? +((importe * 0.87).toFixed(2)) : 0
                                    y += 12; items++;
                                    if (items === itemsPerPage) {
                                        doc.addPage({ size: "letter", margin: 10, compress: false });
                                        items = 0;
                                        page++;
                                        y = 95;
                                        $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                    }
                                }
                                doc.rect( 140, y, 452, 0 ).stroke();
                                doc.font("Helvetica-Bold", 7).text("TOTALES", 143, y + 4 )
                                doc.text(totalCampo ? number_format_negativo_to_positvo(totalCampo, 2) : "", 530, y + 4, { width: 62, align:"right"});
                                totalGeneral += totalCampo ? +(totalCampo.toFixed(2)) : 0;
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                            }
                            doc.rect(x, y, 552, 0).stroke()
                            doc.rect(x, y + 12, 552, 0).stroke()
                            doc.font("Helvetica-Bold", 7).text("TOTAL GENERAL", x + 5, y + 4)
                            doc.text(totalGeneral ? number_format_negativo_to_positvo(totalGeneral, 2) : "", 530, y + 4, { width: 62, align:"right"});
                            doc.end();
                            stream.on('finish', function () {
                                SweetAlert.swal({
                                    title: 'Finalizado!',
                                    icon: 'success',
                                    timer: 2000,
                                    showConfirmButton: false
                                })
                                var fileURL = stream.toBlobURL('application/pdf');
                                window.open(fileURL, '_blank', 'location=no');
                            });
                            blockUI.stop();
                        })

                    } catch (e) {
                        SweetAlert.swal("","<b>Ocurrió un error al generar el documento...<b><br>"+e, "warning")
                    }
                })
            }
            $scope.reporteRopaTrabajoDocumentosPdf = (filtro) => {
                if(!filtro) return SweetAlert.swal("","Parámetros inválidos", "warning")
                SweetAlert.swal({
                    title: 'Obteniendo datos...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                ListaDotacionRopaEmpresa(filtro, $scope.usuario.id_empresa)
                .then(({error, data, message, messageType }) => {
                    if(error) return SweetAlert.swal("", message, messageType)
                    if(data.length == 0) return SweetAlert.swal("", "No se encontraron registros", "info")
                    try {
                        let registros = Object.values(data.reduce((acc , cur) => {
                            if(!acc[cur.id_campo]){
                                acc[cur.id_campo] = { 
                                    campo: cur.campo, 
                                    items: Object.values( data.filter( e => e.id_campo===cur.id_campo ).reduce((acum, { fecha_entrega, numero_iso_dotacion_ropa, nombre_completo, cargo, importe }) =>{
                                        if(!acum[numero_iso_dotacion_ropa]){
                                            acum[numero_iso_dotacion_ropa] = {
                                                fecha: fecha_entrega,
                                                iso: numero_iso_dotacion_ropa,
                                                asignado: nombre_completo,
                                                cargo: cargo,
                                                total: importe
                                            }
                                        }else{
                                            acum[numero_iso_dotacion_ropa].total += importe ? importe : 0
                                        }
                                        return acum
                                    }, {}))
                                }
                            }
                            return acc
                        }, {}))
                        if(registros.length > 0) registros.sort((a, b ) => {
                            if(a.campo > b.campo) return 1
                            if(a.campo < b.campo) return -1
                            return 0
                        })
                        SweetAlert.update({ title: "Generando documento..." })
                        convertUrlToBase64Image($scope.usuario.empresa.imagen, function (logo) { 
                            let titulo = "REPORTE DE CONSUMOS ROPA DE TRABAJO"
                            let subtitulo = "RESUMIDO POR DOCUMENTO"
                            let hoy = new Date()
                            let desde = filtro.inicio ? $scope.fechaATexto(filtro.inicio) : "01/01/"+hoy.getFullYear()
                            let hasta = filtro.fin ? $scope.fechaATexto(filtro.fin) : $scope.fechaATexto(hoy);
							let metadata = "Impreso: "+$scope.formatoFechaHora(hoy)+"                  Usuario:"+$scope.usuario.nombre_usuario
                            let totalItems = ( registros.length * 3 ) + registros.reduce((a, b) => a += b.items.length , 0)
                            let x = 40, y = 95, items = 0, itemsPerPage = 50, page = 1, pages = Math.ceil( totalItems / itemsPerPage);
                            var doc = new PDFDocument({ size: [612, 792], compress: false, margin: 10 });
                            var stream = doc.pipe(blobStream());
                            doc.lineGap(-1.6);
                            doc.lineWidth(0.4);
                            $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );
                            let totalGeneral = 0;
                            for (let i = 0; i < registros.length; i++) {
                                var { campo, items:regs } = registros[i];
                                doc.rect(x, y, 552, 12).fillAndStroke('#BEDAF9', '#BEDAF9').fillColor('#000').font("Helvetica-Bold", 7).text(campo.toUpperCase(), x + 5, y+3);
                                doc.stroke('#000');
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                                doc.text("FECHA", 90, y + 4, { width: 40, align: "center"})
                                doc.text("N° ISO", 130, y + 4, { width: 40, align: "center"})
                                doc.text("ASIGNADO", 170, y + 4, { width: 192, align: "center"})
                                doc.text("CARGO", 382, y + 4, { width: 165, align: "center"})
                                doc.text("TOTAL", 527, y + 4, { width: 65, align: "center"})
                                doc.rect( 90, y + 12, 502, 0 ).stroke();
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                                let totalCampo = 0;
                                for ( let j = 0; j < regs.length; j++ ) {
                                    let { fecha, asignado, cargo, iso, total } = regs[j];
                                    doc.font("Helvetica", 7)
                                    doc.text(fecha ? $scope.fechaATexto(fecha) : "", 90, y + 4, { width: 40, align:"center"});
                                    doc.text(iso || "", 130, y + 4, { width: 40, align:"center" });
                                    doc.text(asignado || "", 170, y + 4, { width: 190 });
                                    doc.text(cargo || "", 382, y + 4, { width: 163 });
                                    doc.text(total ? number_format_negativo_to_positvo(total * 0.87, 2) : "", 527, y + 4, { width: 62, align:"right"});
                                    totalCampo += total ? +(( total * 0.87 ).toFixed(2)) : 0
                                    y += 12; items++;
                                    if (items === itemsPerPage) {
                                        doc.addPage({ size: "letter", margin: 10, compress: false });
                                        items = 0;
                                        page++;
                                        y = 95;
                                        $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                    }
                                }
                                doc.rect( 90, y, 502, 0 ).stroke();
                                doc.font("Helvetica-Bold", 7).text("TOTALES", 93, y + 4 )
                                doc.text(totalCampo ? number_format_negativo_to_positvo(totalCampo, 2) : "", 527, y + 4, { width: 62, align:"right"});
                                totalGeneral += totalCampo ? +(totalCampo.toFixed(2)) : 0;
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                            }
                            doc.rect(x, y, 552, 0).stroke()
                            doc.rect(x, y + 12, 552, 0).stroke()
                            doc.font("Helvetica-Bold", 7).text("TOTAL GENERAL", x + 5, y + 4)
                            doc.text(totalGeneral ? number_format_negativo_to_positvo(totalGeneral, 2) : "", 530, y + 4, { width: 62, align:"right"});
                            doc.end();
                            stream.on('finish', function () {
                                SweetAlert.swal({
                                    title: 'Finalizado!',
                                    icon: 'success',
                                    timer: 2000,
                                    showConfirmButton: false
                                })
                                var fileURL = stream.toBlobURL('application/pdf');
                                window.open(fileURL, '_blank', 'location=no');
                            });
                            blockUI.stop();
                        })

                    } catch (e) {
                        SweetAlert.swal("","<b>Ocurrió un error al generar el documento...<b><br>"+e, "warning")
                    }
                })
            }
            $scope.reporteRopaTrabajoEmpleadosPdf = (filtro) => {
                if(!filtro) return SweetAlert.swal("","Parámetros inválidos", "warning")
                SweetAlert.swal({
                    title: 'Obteniendo datos...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                ListaDotacionRopaEmpresa(filtro, $scope.usuario.id_empresa)
                .then(({error, data, message, messageType }) => {
                    if(error) return SweetAlert.swal("", message, messageType)
                    if(data.length == 0) return SweetAlert.swal("", "No se encontraron registros", "info")
                    try {
                        let registros = Object.values(data.reduce((acc , cur) => {
                            if(!acc[cur.id_empleado]){
                                acc[cur.id_empleado] = { 
                                    empleado: cur.nombre_completo, 
                                    items: data.filter( e => e.id_empleado===cur.id_empleado )
                                }
                            }
                            return acc
                        }, {}))
                        if(registros.length > 0) registros.sort((a, b ) => {
                            if(a.empleado > b.empleado) return 1
                            if(a.empleado < b.empleado) return -1
                            return 0
                        })
                        SweetAlert.update({ title: "Generando documento..." })
                        convertUrlToBase64Image($scope.usuario.empresa.imagen, function (logo) { 
                            let titulo = "REPORTE DE CONSUMOS ROPA DE TRABAJO"
                            let subtitulo = "DETALLADO POR EMPLEADO"
                            let hoy = new Date()
                            let desde = filtro.inicio ? $scope.fechaATexto(filtro.inicio) : "01/01/"+hoy.getFullYear()
                            let hasta = filtro.fin ? $scope.fechaATexto(filtro.fin) : $scope.fechaATexto(hoy);
							let metadata = "Impreso: "+$scope.formatoFechaHora(hoy)+"                  Usuario:"+$scope.usuario.nombre_usuario
                            let totalItems = ( registros.length * 3 ) + registros.reduce((a, b) => a += b.items.length , 0)
                            let x = 40, y = 95, items = 0, itemsPerPage = 53, page = 1, pages = Math.ceil( totalItems / itemsPerPage);
                            var doc = new PDFDocument({ size: [612, 792], compress: false, margin: 10 });
                            var stream = doc.pipe(blobStream());
                            doc.lineGap(-1.5);
                            doc.lineWidth(0.4);
                            $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );
                            let totalGeneral = 0;
                            for (let i = 0; i < registros.length; i++) {
                                var { empleado, items:regs } = registros[i];
                                doc.rect(x, y, 552, 12).fillAndStroke('#BEDAF9', '#BEDAF9').fillColor('#000').font("Helvetica-Bold", 7).text(empleado.toUpperCase(), x + 5, y+3);
                                doc.stroke('#000');
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                                doc.font("Helvetica-Bold", 7).text("FECHA", 70, y + 4, { width: 40, align: "center"})
                                doc.text("N° ISO", 110, y + 4, { width: 40, align: "center"})
                                doc.text("CENTRO COSTO", 150, y + 4, { width: 75, align: "center"})
                                doc.text("CÓDIGO", 225, y + 4, { width: 55, align: "center"})
                                doc.text("DESCRIPCIÓN", 280, y + 4, { width: 157, align: "center"})
                                doc.text("CANTIDAD", 437, y + 4, { width: 50, align: "center"})
                                doc.text("C/U", 487, y + 4, { width: 40, align: "center"})
                                doc.text("TOTAL", 527, y + 4, { width: 65, align: "center"})
                                doc.rect( 70, y + 12, 522, 0 ).stroke();
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                                let totalCampo = 0;
                                for ( let j = 0; j < regs.length; j++ ) {
                                    let { fecha_entrega, numero_iso_dotacion_ropa, campo, codigo, descripcion, costo, cantidad, importe } = regs[j];
                                    doc.font("Helvetica", 7)
                                    doc.text(fecha_entrega ? $scope.fechaATexto(fecha_entrega) :"", 70, y + 4, { width: 40, align:"center"});
                                    doc.text(numero_iso_dotacion_ropa || "", 110, y + 4, { width: 40, align:"center" });
                                    doc.text(campo || "", 153, y + 4, { width: 69 });
                                    doc.text(codigo || "", 225, y + 4, { width: 55, align:"center"});
                                    doc.text(descripcion || "", 280, y + 4, { width: 155});
                                    doc.text(cantidad ? cantidad.toFixed(2) : "", 437, y + 4, { width: 47, align:"right"});
                                    doc.text(costo ? (costo*0.87).toFixed(2) : "", 487, y + 4, { width: 37, align:"right"});
                                    doc.text(importe ? number_format_negativo_to_positvo(importe * 0.87, 2) : "", 527, y + 4, { width: 62, align:"right"});
                                    totalCampo += importe ? +((importe * 0.87).toFixed(2)) : 0
                                    y += 12; items++;
                                    if (items === itemsPerPage) {
                                        doc.addPage({ size: "letter", margin: 10, compress: false });
                                        items = 0;
                                        page++;
                                        y = 95;
                                        $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                    }
                                }
                                doc.rect( 70, y, 522, 0 ).stroke();
                                doc.font("Helvetica-Bold", 7).text("TOTALES", 73, y + 4 )
                                doc.text(totalCampo ? number_format_negativo_to_positvo(totalCampo, 2) : "", 527, y + 4, { width: 62, align:"right"});
                                totalGeneral += totalCampo ? +(totalCampo.toFixed(2)) : 0;
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteRopaTrabajoPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                            }
                            doc.rect(x, y, 552, 0).stroke()
                            doc.rect(x, y + 12, 552, 0).stroke()
                            doc.font("Helvetica-Bold", 7).text("TOTAL GENERAL", x + 5, y + 4)
                            doc.text(totalGeneral ? number_format_negativo_to_positvo(totalGeneral, 2) : "", 530, y + 4, { width: 62, align:"right"});
                            doc.end();
                            stream.on('finish', function () {
                                SweetAlert.swal({
                                    title: 'Finalizado!',
                                    icon: 'success',
                                    timer: 2000,
                                    showConfirmButton: false
                                })
                                var fileURL = stream.toBlobURL('application/pdf');
                                window.open(fileURL, '_blank', 'location=no');
                            });
                            blockUI.stop();
                        })

                    } catch (e) {
                        SweetAlert.swal("","<b>Ocurrió un error al generar el documento...<b><br>"+e, "warning")
                    }
                })
            }
            $scope.headerReporteRopaTrabajoPdf = function (doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages) {
				try {
					if (logo.length > 0 && logo !== "error") {
						if (logo) {
							doc.image(logo, 47, 33, { fit: [78, 45] }); 
						}
					}
					doc.lineWidth(0.5)
					doc.rect(40, 30, 552, 50).stroke();
					doc.rect(130, 30, 0, 50).stroke();
					doc.rect(482, 30, 0, 50).stroke();
	
					doc.font('Helvetica-Bold', 10);
					doc.text(titulo, 0, 40, { align: "center" });
					doc.font('Helvetica-Bold', 9);
					doc.text(subtitulo, 0, 53, { align: "center" });
					doc.font('Helvetica-Bold', 8);
					doc.text("Del "+desde +" al "+ hasta, 0, 65, { align: "center" });
					doc.text("FECHA DE IMPRESIÓN", 482, 40, { align: "center", width: 110});
					doc.font('Helvetica', 8);
					doc.text($scope.fechaATexto(hoy), 482, 65, { align: "center", width: 110 });
					doc.font('Helvetica-Bold', 7).text(page + " de " + pages, 0, 740, { align: 'center'})
					doc.font('Helvetica', 6).text(metadata, 0, 755, { align: 'center'})
				} catch (e) {
					console.error('Error al generar pdf...',e);
					return SweetAlert.swal("", "Ocurrió un error al generar pdf..."+e, "warning");
				}
			}
            $scope.abrirModalReporteGeneralOtrosBonos = () => {
                $scope.filtroBonos = { inicio: 0, fin: 0, empleado: 0, paginado: 1 }
                $scope.paginatorBonos = Paginator();
                $scope.paginatorBonos.column = "empleado";
                $scope.paginatorBonos.direction = "asc";
                $scope.paginatorBonos.itemsPerPage = "10";
                $scope.paginatorBonos.callBack = $scope.obtenerListaBonosEmpresaPaciente;
                $scope.paginatorBonos.getSearch("", $scope.filtroBonos, null);
                $scope.abrirPopup($scope.idModalReporteGeneralOtrosBonos);
            }
            $scope.cerrarModalReporteGeneralOtrosBonos = () => {
                $scope.cerrarPopup($scope.idModalReporteGeneralOtrosBonos);

            }
            $scope.obtenerListaBonosEmpresaPaciente = function (buscar) {
                $scope.paginatorBonos.filter = $scope.filtroBonos;
                if(buscar) $scope.paginatorBonos.currentPage = 1; 
               ListaBonosEmpresaPaciente($scope.usuario.id_empresa, $scope.paginatorBonos, 0, 1)
                .then(function (data) {
                    if(!data.error){
                        $scope.paginatorBonos.setPages(data.paginas);
                        $scope.otrosBonos = data.data;
                    }else{
                        console.log('ocurrio un error', data);
                    }
                })
            }
            $scope.imprimirOtroBonoPdf = (bono) => {
                if(typeof bono !== 'object') return SweetAlert.swal("","Parámetro inválido", "warning")
                try {
                    convertUrlToBase64Image($scope.usuario.empresa.imagen, function (logo) {
                        var doc = new PDFDocument({ size: 'letter', compress: false, margin: 0 });
                        var stream = doc.pipe(blobStream());
                        var y = 60, x = 50, hoy = $scope.formatoFechaHora(new Date);
                        doc.lineWidth(0.75).rect(x,y, 512, 277).stroke();
                        x += 20, y += 20;
                        doc.font("Helvetica-Bold", 10).fillColor('#DA112F').text("ORIGINAL", x, y, { width: 472, align: 'right' })
                        doc.fillColor('#000');
                        if(logo)  doc.image( logo, x, y, { fit: [75, 50] });
                        doc.font("Helvetica-Bold", 12).text("BOLETA", x + 75, y + 10 , { width: 347, align:"center"})
                        doc.font("Helvetica-Bold", 10).text("PAGO DE BONO", x + 75, y + 25 , { width: 347, align:"center"})
                        y += 56;
                        doc.lineWidth(0.25).rect(x, y + 2, 472, 0).stroke();
                        y += 12;
                        doc.font("Helvetica-Bold", 8).text( "TRABAJADOR:", x, y)
                        doc.font("Helvetica", 8).text( bono.empleado ? bono.empleado : "", x + 70, y)
                        y += 15
                        doc.font("Helvetica-Bold", 8).text( "FECHA:", x, y)
                        doc.font("Helvetica", 8).text( bono.fecha ? $scope.fechaATexto(bono.fecha) : "", x + 70, y)
                        y += 15
                        doc.font("Helvetica-Bold", 8).text( "MONTO:", x, y)
                        doc.font("Helvetica", 8).text( bono.monto ? "Bs. "+number_format_negativo_to_positvo(bono.monto, 2) : "", x + 70, y)
                        y += 15
                        doc.font("Helvetica-Bold", 8).text( "OBSERVACIÓN:", x, y)
                        doc.font("Helvetica", 8).text( bono.observacion ? bono.observacion.toUpperCase() : "", x + 70, y, { width: 402})
                        y += 102;
                        doc.font("Helvetica", 7);
                        doc.text("__________________________________", 70, y, { width: 157, align:'center'});
                        doc.text("__________________________________", 227, y, { width: 158, align:'center'});
                        doc.text("__________________________________", 385, y, { width: 157, align:'center'});
                        y += 12;
                        doc.font("Helvetica-Bold", 8);
                        doc.text( bono.empleado ? bono.empleado : "", 70, y, { width: 157, align:'center'})
                        doc.text( "JEFE AREA", 227, y, { width: 157, align:'center'})
                        doc.text( "JEFE DE RR.HH.", 385, y, { width: 157, align:'center'})
                        y += 20;
                        doc.font("Helvetica", 5).text( "Creado: "+$scope.formatoFechaHora(bono.createdAt)+"     Creado por: "+bono.nombre_usuario+"      Actualizado: "+$scope.formatoFechaHora(bono.updatedAt)+"   Impreso: "+hoy+"     Impreso por: "+$scope.usuario.nombre_usuario, 0, y, { width: 612, align: 'center'})
                        //COPIA TRABAJADOR
                        y += 70;
                        doc.lineWidth(0.1).rect(0, y, 612, 0).dash(3, {space: 15}).stroke();
                        doc.dash(0, {space: 0});
                        y += 60;

                        x = 50
                        doc.lineWidth(0.75).rect(x,y, 512, 277).stroke();
                        x += 20, y += 20;
                        doc.font("Helvetica-Bold", 10).fillColor('#DA112F').text("COPIA", x, y, { width: 472, align: 'right' })
                        doc.fillColor('#000');
                        if(logo)  doc.image( logo, x, y, { fit: [75, 50] });
                        doc.font("Helvetica-Bold", 12).text("BOLETA", x + 75, y + 10 , { width: 347, align:"center"})
                        doc.font("Helvetica-Bold", 10).text("PAGO DE BONO", x + 75, y + 25 , { width: 347, align:"center"})
                        y += 56;
                        doc.lineWidth(0.25).rect(x, y + 2, 472, 0).stroke();
                        y += 12;
                        doc.font("Helvetica-Bold", 8).text( "TRABAJADOR:", x, y)
                        doc.font("Helvetica", 8).text( bono.empleado ? bono.empleado : "", x + 70, y)
                        y += 15
                        doc.font("Helvetica-Bold", 8).text( "FECHA:", x, y)
                        doc.font("Helvetica", 8).text( bono.fecha ? $scope.fechaATexto(bono.fecha) : "", x + 70, y)
                        y += 15
                        doc.font("Helvetica-Bold", 8).text( "MONTO:", x, y)
                        doc.font("Helvetica", 8).text( bono.monto ? "Bs. "+number_format_negativo_to_positvo(bono.monto, 2) : "", x + 70, y)
                        y += 15
                        doc.font("Helvetica-Bold", 8).text( "OBSERVACIÓN:", x, y)
                        doc.font("Helvetica", 8).text( bono.observacion ? bono.observacion.toUpperCase() : "", x + 70, y, { width: 402})
                        y += 102;
                        doc.font("Helvetica", 7);
                        doc.text("__________________________________", 70, y, { width: 157, align:'center'});
                        doc.text("__________________________________", 227, y, { width: 158, align:'center'});
                        doc.text("__________________________________", 385, y, { width: 157, align:'center'});
                        y += 12;
                        doc.font("Helvetica-Bold", 8);
                        doc.text( bono.empleado ? bono.empleado : "", 70, y, { width: 157, align:'center'})
                        doc.text( "JEFE AREA", 227, y, { width: 157, align:'center'})
                        doc.text( "JEFE DE RR.HH.", 385, y, { width: 157, align:'center'})
                        y += 20;
                        doc.font("Helvetica", 5).text( "Creado: "+$scope.formatoFechaHora(bono.createdAt)+"     Creado por: "+bono.nombre_usuario+"      Actualizado: "+$scope.formatoFechaHora(bono.updatedAt)+"   Impreso: "+hoy+"     Impreso por: "+$scope.usuario.nombre_usuario, 0, y, { width: 612, align: 'center'})
                        doc.end();
                        stream.on('finish', function () {
                            blockUI.stop();
                            var fileURL = stream.toBlobURL('application/pdf');
                            window.open(fileURL, '_blank', 'location=no');
                        });
                    })
                } catch (e) {
                    SweetAlert.swal("","<b>Parámetro inválido</b><br>"+e, "error")
                }
                
            }
            $scope.reporteGeneralOtrosBonosPdf = (general) => {
                SweetAlert.swal({
                    title: 'Obteniendo datos...',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                $scope.filtroBonos.paginado=0;
                ListaBonosEmpresaPaciente($scope.usuario.id_empresa, $scope.paginatorBonos)
                .then(({error, data, message, messageType }) => {
                    if(error) return SweetAlert.swal("", message, messageType)
                    if(data.length == 0) return SweetAlert.swal("", "No se encontraron registros", "info")
                    try {
                        let registros = Object.values(data.reduce((acc , cur) => {
                            if(!acc[cur.empleado]){
                                acc[cur.empleado] = { 
                                    empleado: cur.empleado, 
                                    items: data.filter( e => e.empleado===cur.empleado )
                                }
                            }
                            return acc
                        }, {}))
                        SweetAlert.update({ title: "Generando documento..." })
                        convertUrlToBase64Image($scope.usuario.empresa.imagen, function (logo) { 
                            let titulo = "REPORTE DE BONOS"
                            let subtitulo = general ? "GENERAL" : registros[0].empleado;
                            let hoy = new Date()
                            let desde = $scope.filtroBonos.inicio ? $scope.fechaATexto($scope.filtroBonos.inicio) :( general ? "01/01/"+hoy.getFullYear() : null)
                            let hasta = $scope.filtroBonos.fin ? $scope.fechaATexto($scope.filtroBonos.fin) : $scope.fechaATexto(hoy);
							let metadata = "Impreso: "+$scope.formatoFechaHora(hoy)+"                  Usuario:"+$scope.usuario.nombre_usuario
                            let totalItems = ( registros.length * 4 ) + registros.reduce((a, b) => a += b.items.length , 0)
                            let x = 40, y = 95, w = general ? 537 : 552, items = 0, itemsPerPage = 53, page = 1, pages = Math.ceil( totalItems / itemsPerPage);
                            var doc = new PDFDocument({ size: [612, 792], compress: false, margin: 10 });
                            var stream = doc.pipe(blobStream());
                            doc.lineGap(-1.2);
                            doc.lineWidth(0.4);
                            $scope.headerReporteOtrosBonosPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );
                            let totalGeneral = 0;
                            for (let i = 0; i < registros.length; i++) {
                                var { empleado, items:regs } = registros[i];
                                if(general) {
                                    doc.rect( 40, y, 552, 12).fillAndStroke('#BEDAF9', '#BEDAF9').fillColor('#000').font("Helvetica-Bold", 6).text(empleado.toUpperCase(), x + 5, y + 4);
                                    doc.stroke('#000');
                                    y += 12; items++;
                                    if (items === itemsPerPage) {
                                        doc.addPage({ size: "letter", margin: 10, compress: false });
                                        items = 0;
                                        page++;
                                        y = 95;
                                        $scope.headerReporteOtrosBonosPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                    }
                                }
                                if(general && i === 0) x += 15;
                                doc.font("Helvetica-Bold", 6).text("FECHA", x, y + 4, { width: 40, align: "center"})
                                doc.text("USUARIO", x + 40, y + 4, { width: 70, align: "center"})
                                doc.text("OBSERVACIÓN", x + 110, y + 4, { width: general ? 362 : 377, align: "center"})
                                doc.text("MONTO", 527, y + 4, { width: 65, align: "center"})
                                doc.rect( x, y + 12, w, 0 ).stroke();
                                y += 12; items++;
                                if (items === itemsPerPage) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    items = 0;
                                    page++;
                                    y = 95;
                                    $scope.headerReporteOtrosBonosPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                }
                                let totalEmpleado = 0;
                                for ( let j = 0; j < regs.length; j++ ) {
                                    let { fecha, nombre_usuario, observacion, monto } = regs[j];
                                    doc.font("Helvetica", 6)
                                    doc.text( fecha ? $scope.fechaATexto(fecha) : "", x, y + 4, { width: 40, align:"center"});
                                    doc.text( nombre_usuario ? nombre_usuario.toUpperCase() : "", x + 40, y + 4, { width: 67, align:"center" });
                                    doc.text( observacion ? observacion.toUpperCase() : "", x + 110, y + 4, { width: general ? 360 : 375 });
                                    doc.text( monto ? number_format_negativo_to_positvo(monto, 2) : "", 527, y + 4, { width: 62, align:"right"});
                                    totalEmpleado += monto ? +(monto.toFixed(2)) : 0
                                    y += 12; items++;
                                    if (items === itemsPerPage) {
                                        doc.addPage({ size: "letter", margin: 10, compress: false });
                                        items = 0;
                                        page++;
                                        y = 95;
                                        $scope.headerReporteOtrosBonosPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                    }
                                }
                                doc.rect( x, y, w, 0 ).stroke();
                                doc.font("Helvetica-Bold", 6).text("TOTALES", x, y + 4, { width: 40, align: "center" })
                                doc.text(totalEmpleado ? number_format_negativo_to_positvo(totalEmpleado, 2) : "", 527, y + 4, { width: 62, align:"right"});
                                totalGeneral += totalEmpleado ? +(totalEmpleado.toFixed(2)) : 0;
                                if(general){
                                    y += 12; items++;
                                    if (items === itemsPerPage) {
                                        doc.addPage({ size: "letter", margin: 10, compress: false });
                                        items = 0;
                                        page++;
                                        y = 95;
                                        $scope.headerReporteOtrosBonosPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                    }
                                    y += 12; items++;
                                    if (items === itemsPerPage) {
                                        doc.addPage({ size: "letter", margin: 10, compress: false });
                                        items = 0;
                                        page++;
                                        y = 95;
                                        $scope.headerReporteOtrosBonosPdf( doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages );    
                                    }
                                }
                            }
                            if(general){
                                doc.rect(x, y, 552, 0).stroke()
                                doc.rect(x, y + 12, 552, 0).stroke()
                                doc.font("Helvetica-Bold", 6).text("TOTAL GENERAL", x + 5, y + 4)
                                doc.text(totalGeneral ? number_format_negativo_to_positvo(totalGeneral, 2) : "", 530, y + 4, { width: 62, align:"right"});
                            }
                            doc.end();
                            stream.on('finish', function () {
                                SweetAlert.swal({
                                    title: 'Finalizado!',
                                    icon: 'success',
                                    timer: 2000,
                                    showConfirmButton: false
                                })
                                var fileURL = stream.toBlobURL('application/pdf');
                                window.open(fileURL, '_blank', 'location=no');
                            });
                            blockUI.stop();
                        })
                        
                    } catch (e) {
                        SweetAlert.swal("","<b>Ocurrió un error al generar el documento...<b><br>"+e, "warning")
                    }
                })
                $scope.filtroBonos.paginado=1;
            }
            $scope.headerReporteOtrosBonosPdf = function (doc, logo, titulo, subtitulo, hoy, desde, hasta, metadata, page, pages) {
				try {
					if (logo.length > 0 && logo !== "error") {
						if (logo) {
							doc.image(logo, 47, 33, { fit: [78, 45] }); 
						}
					}
					doc.lineWidth(0.5)
					doc.rect(40, 30, 552, 50).stroke();
					doc.rect(130, 30, 0, 50).stroke();
					doc.rect(482, 30, 0, 50).stroke();
	
					doc.font('Helvetica-Bold', 9);
					doc.text(titulo, 0, 35, { align: "center" });
					doc.font('Helvetica-Bold', 8);
					doc.text(subtitulo, 0, 46, { align: "center" });
					doc.font('Helvetica-Bold', 7);
					if(desde){
                        doc.text("Del "+desde +" al "+ hasta, 0, 57, { align: "center" });
                    }else{
                        doc.text("Al "+ hasta, 0, 57, { align: "center" });
                    }
					doc.text("(Expresado en Bolivianos)", 0, 67, { align: "center" });
					doc.text("FECHA DE IMPRESIÓN", 482, 40, { align: "center", width: 110});
					doc.font('Helvetica', 8);
					doc.text($scope.fechaATexto(hoy), 482, 65, { align: "center", width: 110 });
					doc.font('Helvetica-Bold', 7).text(page + " de " + pages, 0, 740, { align: 'center'})
					doc.font('Helvetica', 6).text(metadata, 0, 755, { align: 'center'})
				} catch (e) {
					console.error('Error al generar pdf...',e);
					return SweetAlert.swal("", "Ocurrió un error al generar pdf..."+e, "warning");
				}
			}            
            $scope.reporteGeneralOtrosBonosXlsx = () => {
                SweetAlert.swal({
                    title: 'Generando reporte',
                    icon: 'info',
                    iconHtml: '<i class="fa fa-search size-icon"></i>',
                    html: '<strong class="number-percentage"></strong><div class="swal2-timer-progress-bar-container progress-change"><div class="swal2-timer-progress-bar progress-percentage" style="display: flex; width: 0%;"></div></div>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                $scope.filtroBonos.paginado=0;
                ListaBonosEmpresaPaciente($scope.usuario.id_empresa, $scope.paginatorBonos)
                .then( ({ error, data, message, messageType}) => {
                    if(error) return SweetAlert.swal("", message, messageType);
                    if(data.length == 0 ) return SweetAlert.swal("", "No se encontraron registros", "info")
                    try {
                        let matriz = [["FECHA","TRABAJADOR","CARGO","CAMPO","ÁREA","MONTO","OBSERVACIÓN","USUARIO","ELIMINADO"]]
                        for (let i = 0; i < data.length; i++) {
                            const { fecha, empleado, cargos, campo, area, monto, observacion, nombre_usuario, eliminado } = data[i];
                            matriz.push([
                                fecha ? $scope.fechaATexto(fecha) : "",
                                empleado ? empleado : "",
                                cargos ? cargos : "",
                                campo ? campo : "",
                                area ? area : "",
                                monto ? monto : "",
                                observacion ? observacion : "",
                                nombre_usuario ? nombre_usuario : "",
                                eliminado ? "SI": "NO"
                            ])
                        }
                        var ws_name = "SheetJS";
                        var wb = new Workbook(), ws = sheet_from_array_of_arrays(matriz);
                        wb.SheetNames.push(ws_name);
                        wb.Sheets[ws_name] = ws;
                        var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                        saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "REPORTE DE OTROS BONOS OTORGADOS.xlsx");
                        SweetAlert.swal({
                            title: 'Finalizado!',
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        })
                    } catch (e) {
                        SweetAlert.swal("", "<b>No se encontraron registros</b><br>"+e, "error")
                    }
                })
                $scope.filtroBonos.paginado=1;
            }               
            
            $scope.generarPdfAltasBajasEmpleadoXlsx = ( ) => {
                let filtro = {}
                ListaFichasAltasBajasEmpleadoIndividual($scope.usuario.id_empresa, filtro, $scope.empleado.id)
                    .then(({ fichas })=>{
                        if(!fichas) return SweetAlert.swal("", "No se puedieron recuperar las fichas", "error")
                        if(fichas.length === 0) return SweetAlert.swal("", "El empleado no histórico de contratos", "info")
                        try {
                            let datos = [["N°", "N° FICHA", "EMPLEADO", "CARGO", "CAMPO", "MOTIVO DE BAJA", "FECHA INGRESO", "FECHA RETIRO", "OBSERVACIÓN"]]
                            for (let i = 0; i < fichas.length; i++) {
                                const { id, beneficiosSociales, fecha_inicio, fecha_expiracion, cargos, empleado, observacion } = fichas[i];
                                let cargo = ""
                                if(cargos){
                                    if(cargos.length === 1) cargo = cargos[0].cargo ? cargos[0].cargo.nombre : ""
                                    if(cargos.length > 1) cargo = cargos.map(({ cargo }) => {
                                        if(cargo) return cargo.nombre;
                                        return 0
                                    }).join(", ");
                                }
                                let motivo = ""
                                if(beneficiosSociales && beneficiosSociales.length > 0 ){
                                    if(beneficiosSociales.length === 1){
                                        motivo = beneficiosSociales[0].motivo ? beneficiosSociales[0].motivo.nombre : ""
                                    }else{
                                        motivo = beneficiosSociales[beneficiosSociales.length - 1].motivo ? beneficiosSociales[beneficiosSociales.length - 1].motivo.nombre : ""
                                    }
                                }
                                datos.push([
                                    i+1,
                                    id,
                                    empleado.persona ? empleado.persona ? empleado.persona.nombre_completo : "" : "",
                                    cargo,
                                    empleado.campo ? empleado.campo.nombre  : "",
                                    motivo,
                                    fecha_inicio ? $scope.fechaATexto(fecha_inicio) : "",
                                    fecha_expiracion ? $scope.fechaATexto(fecha_expiracion) : "",
                                    observacion ? observacion : ""
                                ])
                            }
                            let ws_name = "SheetJS";
                            let wb = new Workbook(), ws = sheet_from_array_of_arrays(datos);
                            wb.SheetNames.push(ws_name);
                            wb.Sheets[ws_name] = ws;
                            let wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                            saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "Reporte Histórico de contratos.xlsx");
                            blockUI.stop();
                        } catch (e) {
                            SweetAlert.swal("","<b>Ocurrió un error al generar archivo</b><br>"+e)
                        }
                        
                    })
            }
            $scope.entregarItem = (item) => {
                item.entregado = !item.entregado
                item.producto.cantidad_disponible = item.entregado ? item.producto.cantidad_disponible - item.cantidad :  item.producto.cantidad_disponible + item.cantidad
                
            }
            // INICIO ADJUNTO PARA FORMACION
            $('#id-doc-formacion').ace_file_input({
                droppable: true,
                before_remove : () => {
                    $scope.formacionAcademica.adjunto = undefined
                    $scope.formacionAcademica.sin_respaldo = true
                    return true;
                  }
            })
            .on('change', function() {
                var files = $(this).data('ace_input_files');
                var r = new FileReader();
                if(files.length > 0 ) {
                    let adj = files[0];
                    let nombre = adj.name.split('.');
                    let extension = nombre[nombre.length - 1 ]
                    extension != "pdf" ? r.readAsDataURL(adj) : r.readAsBinaryString(adj);
                    r.onloadend = function (e) {
                        $scope.formacionAcademica.sin_respaldo = false
                        $scope.formacionAcademica.respaldo = {
                            data: e.target.result,
                            ext: "." + extension
                        } 
                    }
                }
            });
            // FIN ADJUNTO PARA FORMACION

            // INICIO ADJUNTO PARA EXPERIENCIA
            $('#id-doc-experiencia').ace_file_input({
                droppable: true,
                before_remove : () => {
                    $scope.experienciaLaboral.adjunto = undefined
                    $scope.experienciaLaboral.sin_respaldo = true
                    return true;
                  }
            })
            .on('change', function() {
                var files = $(this).data('ace_input_files');
                var r = new FileReader();
                if(files.length > 0 ) {
                    let adj = files[0];
                    let nombre = adj.name.split('.');
                    let extension = nombre[nombre.length - 1 ]
                    extension != "pdf" ? r.readAsDataURL(adj) : r.readAsBinaryString(adj);
                    r.onloadend = function (e) {
                        $scope.experienciaLaboral.sin_respaldo = false
                        $scope.experienciaLaboral.respaldo = {
                            data: e.target.result,
                            ext: "." + extension
                        } 
                    }
                }
            });
            // FIN ADJUNTO PARA EXPERIENCIA

            // INICIO ADJUNTO PARA CAPACITACION
            $('#id-doc-capacitacion').ace_file_input({
                droppable: true,
                before_remove : () => {
                    $scope.capacidad.adjunto = undefined
                    $scope.capacidad.sin_respaldo = true
                    return true;
                  }
            })
            .on('change', function() {
                var files = $(this).data('ace_input_files');
                var r = new FileReader();
                if(files.length > 0 ) {
                    let adj = files[0];
                    let nombre = adj.name.split('.');
                    let extension = nombre[nombre.length - 1 ]
                    extension != "pdf" ? r.readAsDataURL(adj) : r.readAsBinaryString(adj);
                    r.onloadend = function (e) {
                        $scope.capacidad.sin_respaldo = false
                        $scope.capacidad.respaldo = {
                            data: e.target.result,
                            ext: "." + extension
                        } 
                    }
                }
            });
            // FIN ADJUNTO PARA CAPACITACION

            // INICIO ADJUNTO PARA LOGRO
            $('#id-doc-logro').ace_file_input({
                droppable: true,
                before_remove : () => {
                    $scope.logro.adjunto = undefined
                    $scope.logro.sin_respaldo = true
                    return true;
                  }
            })
            .on('change', function() {
                var files = $(this).data('ace_input_files');
                var r = new FileReader();
                if(files.length > 0 ) {
                    let adj = files[0];
                    let nombre = adj.name.split('.');
                    let extension = nombre[nombre.length - 1 ]
                    extension != "pdf" ? r.readAsDataURL(adj) : r.readAsBinaryString(adj);
                    r.onloadend = function (e) {
                        $scope.logro.sin_respaldo = false
                        $scope.logro.respaldo = {
                            data: e.target.result,
                            ext: "." + extension
                        } 
                    }
                }
            });
            // FIN ADJUNTO PARA LOGRO
            $scope.imprimiIsoViaje = ( id ) => {
                SweetAlert.swal({
                    icon: 'info',
                    html:`<b>Generando reporte<br><small>Espere por favor...</small></b>`,
                    iconHtml:'<i class="fa fa-file-pdf-o size-icon"></i>',
                    allowEscapeKey: false,
                    allowOutsideClick: false
                })
                SweetAlert.showLoading()
                blockUI.noOpen = true;
                ObtenerViaje(id)
                .then( async ( { error, viaje, message, messageType } ) => {
                    if( error ) return SweetAlert.swal( "", message, messageType );
                    if( !viaje.configuracionIso ) return SweetAlert.swal("","<b>Documento sin ISO</b><small>El documento no fue guardado con la configuración ISO correcta.</small>", "error")
                    switch ( viaje.configuracionIso.version_impresion ) {
                        case 1:
                            await $scope.imprimirIsoViajeV1(viaje)
                            swal.close();
                            break;
                        default:
                            SweetAlert.swal("" ,"<b>Versión ISO desconocido</b><small></small>", "info")
                        break;
                    }
                })
            } 

            $scope.imprimirIsoViajeV1 = ( viaje ) => {
                try {
                    if( !viaje.destinos || viaje.destinos.length === 0) return SweetAlert.swal("", "<b>Viaje sin destino</b><br><small>No se encontró destino del viaje.</small>")
                    convertUrlToBase64Image($scope.usuario.empresa.imagen, async function (imagenEmpresa) {
                        var doc = new PDFDocument({ size: "letter", margin: 10, compress: false });
                        var stream = doc.pipe(blobStream());
                        doc.lineWidth(0.5)
                        doc.lineGap(-2.5)
                        await $scope.registrarFuentePdfKit(doc, '../../../assets/fonts/bookman-old-style.ttf', 'Bookman');
                        await $scope.registrarFuentePdfKit(doc, '../../../assets/fonts/bookman-old-style-bold.ttf', 'Bookman-Bold');
                        await $scope.registrarFuentePdfKit(doc, '../../../assets/fonts/bookman-old-style-italic.ttf', 'Bookman-Italic');
                        await $scope.registrarFuentePdfKit(doc, '../../../assets/fonts/bookman-old-style-italic-bold.ttf', 'Bookman-Italic-Bold');
                        let meta = "Creado: "+$scope.formatoFechaHora(viaje.createdAt)+"         Actualizado: "+$scope.formatoFechaHora(viaje.updatedAt)+ "         Impreso: "+$scope.formatoFechaHora(new Date())+"         Impreso por: "+$scope.usuario.nombre_usuario
                        if(viaje.destinos.length > 0){
                            for (let i = 0; i < viaje.destinos.length; i++) {
                                viaje.destinos[i].pasajeros = viaje.viajeDetalles.filter(x => viaje.destinos[i].id_destino === x.id_campo)
                            }
                        }
                        viaje.destinos = viaje.destinos.filter( el => { 
                            if(el.pasajeros && el.pasajeros.length > 0 ) return 1
                            return 0
                        })

                        if(viaje.destinos && viaje.destinos.length > 6) return SweetAlert.swal("","<b>El viaje se realizó a más de 6 destinos</b><small>No se puede generar la ISO</small>", "warning")
                        let longs = viaje.destinos.map(a=>a.pasajeros.length)
                        let maximo = Math.max(...longs)
                        let ancho = 507 / viaje.destinos.length;
                        var y = 225, itemsPorPagina = 44, items = 0, pagina = 1, totalPaginas = Math.ceil( ( maximo + 4 ) / itemsPorPagina);
                        $scope.headerIsoViajeV1( doc, viaje, meta, pagina, totalPaginas, imagenEmpresa);
                         for (let j = 0; j < maximo; j++) {
                                for (let h = 0; h < viaje.destinos.length; h++) {
                                    x = 60
                                    const destino = viaje.destinos[h];
                                    if(h > 0) x += ancho * h
                                    if(viaje.destinos && viaje.destinos.length > 1){
                                        let alto = 12;
                                        if( j === maximo - 1 ) {
                                            alto = ( 705 - y );
                                        }
                                        doc.rect(x,y,0, alto).stroke();
                                        switch (viaje.destinos.length) {
                                            case 6:
                                                doc.font('Bookman', 5)
                                                break;
                                            case 5:
                                                doc.font('Bookman', 5)
                                                break;
                                            case 4:
                                                doc.font('Bookman', 6)
                                                break;
                                            case 3:
                                                doc.font('Bookman', 6)
                                                break;
                                            case 2:
                                                doc.font('Bookman', 7)
                                            break;
                                            default:
                                                doc.font('Bookman', 4)
                                                break;
                                        }
                                    }else{
                                        doc.font('Bookman', 8)
                                    }
                                    if(destino.pasajeros[j]) doc.text( destino.pasajeros[j]?.ficha?.empleado?.persona?.nombre_completo, x + 8, y + 3, { width: ancho - 10 })
                                } 
                                y += 12;
                                items++;
                                if( items === itemsPorPagina && j != maximo - 1 ) {
                                    doc.addPage({ size: "letter", margin: 10, compress: false });
                                    doc.lineWidth(0.5)
                                    doc.lineGap(-2.5)
                                    y = 225;
                                    items = 0;
                                    pagina++;
                                    $scope.headerIsoViajeV1(doc, viaje, meta, pagina, totalPaginas, imagenEmpresa);

                                }
                            if( j === maximo - 1 ) {
                                doc.rect(60, 705, 507, 0).stroke();
                                doc.font('Bookman-Bold', 8).text('Observación: ', 70, 709)
                                doc.lineWidth(0.1).rect(140, 717, 422, 0).dash(5).stroke();
                                doc.lineWidth(0.1).rect(65, 729, 497, 0).dash(5).stroke();
                                doc.lineWidth(0.1).rect(65, 741, 497, 0).dash(5).stroke();
                            }                     
                         }
                        doc.end();
                        stream.on('finish', function () {
                            var fileURL = stream.toBlobURL('application/pdf');
                            window.open(fileURL, '_blank', 'location=no');
                        });
                        blockUI.stop();
                        $scope.$evalAsync()
                    });
                } catch (e) {
                    
                }
            }

            $scope.headerIsoViajeV1 = function (doc, viaje, meta, pagina, totalPaginas, imagenEmpresa) {
				doc.font('Bookman-Bold', 10);
				if (imagenEmpresa.length > 0 && imagenEmpresa !== "error") {
					if (imagenEmpresa) {
						doc.image(imagenEmpresa, 72, 62, { fit: [100, 51] }); //{ fit: [200, 72] } { fit: [100, 72] }
					}
				}
				//cuadros
				doc.rect(60, 60, 507, 55).stroke();
				doc.rect(164, 88, 403, 0).stroke();
				doc.rect(164, 60, 0, 55).stroke();
				doc.rect(431, 60, 0, 55).stroke();

				doc.text(viaje.configuracionIso.nombre.toUpperCase(), 164, 70, { width: 267, align: "center" });
				doc.font('Bookman-Italic-Bold', 9);
				doc.text("Codigo:", 243, 95);
				doc.font('Bookman-Bold', 9);
				doc.text(viaje.configuracionIso.codigo, 283, 95);
				doc.font('Bookman-Bold', 9);
				doc.text('´', 251, 95);
				doc.font('Bookman-Italic', 9);
				doc.text("Revision:", 435, 70);
				doc.font('Bookman', 9);
				doc.text(viaje.configuracionIso.revicion, 477, 70);
				doc.font('Bookman-Italic', 9);
				doc.text("Fecha de Aprobacion", 435, 90, { width: 132 });
				doc.font('Bookman', 9);
				doc.text($scope.fechaATexto(viaje.configuracionIso.fecha_aprobacion), 445, 100, { width: 132 });
				doc.text('´', 463, 70.2);
				doc.text('´', 516, 90.2);

                doc.rect(60, 125, 507, 45).stroke();
                doc.rect(145, 125, 0, 45).stroke();
                doc.rect(313.5, 125, 0, 45).stroke();
                doc.rect(398.5, 125, 0, 45).stroke();
                doc.rect(60, 140, 507, 0).stroke();
                doc.rect(60, 155, 507, 0).stroke();

                doc.font('Bookman-Bold', 8)
                doc.text("Conductor 1:", 70, 128)
                doc.text("Conductor 2:", 70, 143)
                doc.text("Vehículo:", 70, 158)
                doc.text("Licencia 1:", 323.5, 128)
                doc.text("Licencia 2:", 323.5, 143)
                doc.text("Placa:", 323.5, 158)
                doc.text("Fecha:", 70, 178)
                doc.text("N°: ", 515, 178)
                doc.font('Bookman', 8)
                doc.text(viaje.conductor?.nombre.toUpperCase(), 155, 128)
                doc.text(viaje.relevo?.nombre.toUpperCase(), 155, 143)
                let vehiculo = viaje.vehiculo?.nombre.split('-')
                let nombreVehiculo = vehiculo[0]
                let placa = vehiculo[1]
                if( nombreVehiculo && nombreVehiculo.length > 29) nombreVehiculo = nombreVehiculo.slice(0,29)
                doc.text(nombreVehiculo ? nombreVehiculo : "", 155, 158)
                doc.text(viaje.conductor && viaje.conductor.licencia ? viaje.conductor.tipoLicencia ? viaje.conductor.licencia + " - "+viaje.conductor.tipoLicencia.nombre   : viaje.conductor.licencia : "", 408.5, 128)
                doc.text(viaje.relevo && viaje.relevo.licencia ? viaje.relevo.tipoLicencia ? viaje.relevo.licencia + " - "+viaje.relevo.tipoLicencia.nombre   : viaje.relevo.licencia : "", 408.5, 143)
                doc.text( placa, 408.5, 158)
                doc.text( viaje.fecha_ingreso ? $scope.fechaATexto( viaje.fecha_ingreso) : $scope.fechaATexto(viaje.fecha_salida), 155, 178)
                doc.font('Bookman-Bold', 8).text(  viaje.fecha_ingreso ? " (Ingreso)" : " (Salida)", 205, 178 );
                doc.font('Bookman', 8).text(viaje.nro_iso ? viaje.nro_iso : "", 535, 178 )
                doc.rect(60, 195, 507, 558).stroke()
                doc.font('Bookman-Bold', 8).text("Campamentos", 60, 198, { width: 507, align: "center" })
                doc.rect(60, 210, 507, 0).stroke()
                doc.rect(60, 225, 507, 0).stroke()
                let x = 60;
                let ancho = 507 / viaje.destinos.length;
                if(viaje.destinos && viaje.destinos.length > 1){
                    switch (viaje.destinos.length) {
                        case 6:
                            doc.font('Bookman-Bold', 6)
                            break;
                        case 5:
                            doc.font('Bookman-Bold', 6)
                            break;
                        case 4:
                            doc.font('Bookman-Bold', 6)
                            break;
                        case 3:
                            doc.font('Bookman-Bold', 6)
                            break;
                        case 2:
                            doc.font('Bookman-Bold', 8)
                        break;
                        default:
                            doc.font('Bookman-Bold', 5)
                            break;
                    }
                }else{
                    doc.font('Bookman-Bold', 8)
                }
                for (let a = 0; a < viaje.destinos.length; a++) {
                    const destino = viaje.destinos[a];
                    doc.text(destino.destino && destino.destino.nombre ? destino.destino.nombre : "", x, 213, { align: "center", width: ancho } )
                    x += ancho
                    if(a + 1 != viaje.destinos.length ) doc.rect( x, 210, 0, 15 ).stroke()
                }

				doc.font('Bookman-Bold', 7).text('Página '+ pagina + ' de '+ totalPaginas, 0, 755, { width: 612, align: 'center' })
				doc.font('Bookman', 6).text( meta, 0, 765, { width: 612, align: 'center' });
			};
            $scope.setStock = (item) => {
                if( item.producto ){
                    item.cantidad_disponible = item.producto.inventarios.reduce((acc, curr )=> acc + curr.cantidad, 0)
                }
            }
            $scope.selectItem = function (item) {
                if(item){
                    item.entregado = item.entregado ? false : true;
                    item.cantidad_disponible = item.entregado ? (item.cantidad_disponible - item.cantidad) : (item.cantidad_disponible + item.cantidad)
                }
            }
            $scope.inicio()

        }]);
